!function(I){var g={};function n(C){if(g[C])return g[C].exports;var c=g[C]={i:C,l:!1,exports:{}};return I[C].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=I,n.c=g,n.d=function(I,g,C){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:C})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var C=Object.create(null);if(n.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var c in I)n.d(C,c,function(g){return I[g]}.bind(null,c));return C},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="/dist/",n(n.s=51)}([function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], "{").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxxQkFBcUI7QUFDaEU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IscUJBQXFCO0FBQ3pDLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDhCQUE4Qjs7QUFFOUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.17\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (false) { var repeat, classify, classifyRE, hasConsole; }\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {}\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (false\n  ) {}\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     false && false;\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (false\n  ) {}\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     false && false;\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       false && false;\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     false && false;\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (false) {}\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"production\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {}\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (false) {}\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (false) {}\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {}\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {}\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    false\n  ) {}\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {}\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (false) {}\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) { var perf; }\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnNonPresent, allowedGlobals; }\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n       false && false;\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) { var keyInLowerCase; }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n       false && false;\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (undefined)\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) { var lowerCaseEvent; }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {}\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {} else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (false) {}\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (false) {}\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {}\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {}\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? undefined\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n       false && false;\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) { var hyphenatedKey; } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     false && false;\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (false) {}\n    if (props && hasOwn(props, key)) {\n       false && false;\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {}\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {}\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (false) {}\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (false) {}\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {}\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {} else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (false) {}\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (false) {}\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (false) {}\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       false && false;\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       false && false;\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {}\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     false && false;\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (false\n  ) {}\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (false) {} else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (false) { var key; }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {} else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {}\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {}\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {} else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {}\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (false\n  ) {}\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {}\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {}\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {}\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.17';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       false && false;\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {}\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {}\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (false) {}\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (false) {}\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (false) {}\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (false\n              ) {}\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (false\n              ) {}\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {}\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {}\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {}\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {}\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (false) { var binding, typeBinding, value$1; }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {}\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {}\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     false && false;\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {}\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {}\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) { var name, opts; }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        false\n      ) {}\n    }\n    if (false\n    ) {}\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) { var res; }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) { var res; }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('--\x3e');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)--\x3e/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {}\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {}\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n         false && false;\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {}\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {}\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {}\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {}\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (false) {}\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {}\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {}\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {}\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (false) {}\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (false) {}\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {}\n      }\n    } else {\n      // literal attribute\n      if (false) { var res; }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {}\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (false) {}\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n       false && false;\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (false\n  ) {}\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (false) {}\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (false) {}\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {}\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {}\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (false) {}\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n     false && false;\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {}\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {}\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {}\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {}\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(4).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(5);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLENBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(6)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(8);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"7eac7aba\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT80OWQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLENBQTJQO0FBQ2pSLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiN2VhYzdhYmFcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\nbody {\\n    background-color: #5f6d64;\\n    margin: 0px;\\n}\\n.container {\\n    display: flex;\\n    margin-top: 2vh;\\n    min-width: 300px;\\n}\\n.header {\\n    display: block;\\n}\\n.header h1 {\\n    font-size: 2rem;\\n    font-family: \'Inconsolata\', monospace;\\n    text-align:center;\\n    color: #fff;\\n    padding-bottom: 1.0rem;\\n    margin-bottom: 0.0rem;\\n}\\n.header h2 {\\n    font-size: 100%;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    text-align:center;\\n    color: #eee;\\n    margin-bottom: 0.0rem;\\n    margin-top: 0.0rem;\\n}\\n.download-button {\\n    -webkit-transition-duration: 0.2s; /* Safari */\\n    background-color: #5daa61;\\n    border-color: #222;\\n    border-radius: 6px;\\n    border-style: solid;\\n    border-width: 2px;\\n    color: #222;\\n    display: inline-block;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    font-size: 1.0rem;\\n    margin-left: auto;\\n    margin-right: auto;\\n    padding: 15px 32px;\\n    text-align: center;\\n    text-decoration: none;\\n    transition-duration: 0.2s;\\n}\\n.download-button:hover {\\n    background-color: #487a4a;\\n    border-color: #ccc;\\n    color: #ccc;\\n}\\n.github {\\n    position: fixed;\\n    right: 1%;\\n    bottom: 10px;\\n}\\n", "",{"version":3,"sources":["src/App.vue","App.vue"],"names":[],"mappings":";AAqRA;IACA,yBAAA;IACA,WAAA;ACnRA;ADqRA;IACA,aAAA;IACA,eAAA;IACA,gBAAA;ACnRA;ADsRA;IACA,cAAA;ACpRA;ADuRA;IACA,eAAA;IACA,qCAAA;IACA,iBAAA;IACA,WAAA;IACA,sBAAA;IACA,qBAAA;ACrRA;ADuRA;IACA,eAAA;IACA,0CAAA;IACA,iBAAA;IACA,WAAA;IACA,qBAAA;IACA,kBAAA;ACrRA;ADwRA;IACA,iCAAA,EAAA,WAAA;IACA,yBAAA;IACA,kBAAA;IACA,kBAAA;IACA,mBAAA;IACA,iBAAA;IACA,WAAA;IACA,qBAAA;IACA,0CAAA;IACA,iBAAA;IACA,iBAAA;IACA,kBAAA;IACA,kBAAA;IACA,kBAAA;IACA,qBAAA;IACA,yBAAA;ACtRA;ADwRA;IACA,yBAAA;IACA,kBAAA;IACA,WAAA;ACtRA;ADyRA;IACA,eAAA;IACA,SAAA;IACA,YAAA;ACvRA","file":"App.vue","sourcesContent":["<template>\\n    <div id=\\"app\\">\\n        <div class=\\"header\\">\\n            <h1>cffinit</h1>\\n            <h2>Initialize your CITATION.cff files</h2>\\n        </div>\\n        <div class=\\"container\\">\\n            <Form\\n                v-bind:abstract=\\"abstract\\"\\n                v-bind:author_id=\\"author_id\\"\\n                v-bind:authors=\\"authors\\"\\n                v-bind:cff_version=\\"cff_version\\"\\n                v-bind:date_released=\\"date_released\\"\\n                v-bind:doi=\\"doi\\"\\n                v-bind:identifier_id=\\"identifier_id\\"\\n                v-bind:identifiers=\\"identifiers\\"\\n                v-bind:keyword_id=\\"keyword_id\\"\\n                v-bind:keywords=\\"keywords\\"\\n                v-bind:license=\\"license\\"\\n                v-bind:message=\\"message\\"\\n                v-bind:repository_code=\\"repository_code\\"\\n                v-bind:title=\\"title\\"\\n                v-bind:version=\\"version\\"\\n                v-on:add-abstract=\\"add_abstract\\"\\n                v-on:add-affiliation=\\"add_affiliation\\"\\n                v-on:add-author=\\"add_author\\"\\n                v-on:add-date-released=\\"add_date_released\\"\\n                v-on:add-doi=\\"add_doi\\"\\n                v-on:add-identifier=\\"add_identifier\\"\\n                v-on:add-identifiers=\\"add_identifiers\\"\\n                v-on:add-keyword=\\"add_keyword\\"\\n                v-on:add-keywords=\\"add_keywords\\"\\n                v-on:add-license=\\"add_license\\"\\n                v-on:add-name-particle=\\"add_name_particle\\"\\n                v-on:add-name-suffix=\\"add_name_suffix\\"\\n                v-on:add-orcid=\\"add_orcid\\"\\n                v-on:add-repository-code=\\"add_repository_code\\"\\n                v-on:add-title=\\"add_title\\"\\n                v-on:add-version=\\"add_version\\"\\n                v-on:move-author-down=\\"move_author_down\\"\\n                v-on:move-author-up=\\"move_author_up\\"\\n                v-on:move-identifier-down=\\"move_identifier_down\\"\\n                v-on:move-identifier-up=\\"move_identifier_up\\"\\n                v-on:move-keyword-down=\\"move_keyword_down\\"\\n                v-on:move-keyword-up=\\"move_keyword_up\\"\\n                v-on:remove-abstract=\\"remove_abstract\\"\\n                v-on:remove-affiliation=\\"remove_affiliation\\"\\n                v-on:remove-author=\\"remove_author\\"\\n                v-on:remove-date-released=\\"remove_date_released\\"\\n                v-on:remove-doi=\\"remove_doi\\"\\n                v-on:remove-identifier=\\"remove_identifier\\"\\n                v-on:remove-identifiers=\\"remove_identifiers\\"\\n                v-on:remove-keyword=\\"remove_keyword\\"\\n                v-on:remove-keywords=\\"remove_keywords\\"\\n                v-on:remove-license=\\"remove_license\\"\\n                v-on:remove-name-particle=\\"remove_name_particle\\"\\n                v-on:remove-name-suffix=\\"remove_name_suffix\\"\\n                v-on:remove-orcid=\\"remove_orcid\\"\\n                v-on:remove-repository-code=\\"remove_repository_code\\"\\n                v-on:remove-title=\\"remove_title\\"\\n                v-on:remove-version=\\"remove_version\\"\\n                v-on:update-abstract=\\"update_abstract\\"\\n                v-on:update-affiliation=\\"update_affiliation\\"\\n                v-on:update-cff-version=\\"update_cff_version\\"\\n                v-on:update-date-released=\\"update_date_released\\"\\n                v-on:update-doi=\\"update_doi\\"\\n                v-on:update-family-names=\\"update_family_names\\"\\n                v-on:update-given-names=\\"update_given_names\\"\\n                v-on:update-identifier-type=\\"update_identifier_type\\"\\n                v-on:update-identifier-value=\\"update_identifier_value\\"\\n                v-on:update-keyword=\\"update_keyword\\"\\n                v-on:update-license=\\"update_license\\"\\n                v-on:update-message=\\"update_message\\"\\n                v-on:update-name-particle=\\"update_name_particle\\"\\n                v-on:update-name-suffix=\\"update_name_suffix\\"\\n                v-on:update-orcid=\\"update_orcid\\"\\n                v-on:update-repository-code=\\"update_repository_code\\"\\n                v-on:update-title=\\"update_title\\"\\n                v-on:update-version=\\"update_version\\"\\n            />\\n            <CffText v-bind:cff=\\"cff\\"/>\\n        </div>\\n        <div class=\\"container\\">\\n            <button\\n                class=\\"download-button\\"\\n                v-on:click=\\"save_text_as_file\\">\\n                Save Text to File\\n            </button>\\n        </div>\\n        <div class=\\"github\\">\\n            <a href=\\"https://github.com/citation-file-format/cff-initializer-javascript\\">\\n                <img\\n                    src=\\"img/github-mark-light-64px.png\\"\\n                    width=\\"50px\\"\\n                    height=\\"50px\\"\\n                >\\n            </a>\\n        </div>\\n    </div>\\n</template>\\n\\n<script>\\n\\nimport {add as add_abstract,\\n        remove as remove_abstract,\\n        update as update_abstract} from \'./AbstractHandlers.js\';\\n\\nimport {add as add_affiliation,\\n        remove as remove_affiliation,\\n        update as update_affiliation} from \'./AffiliationHandlers.js\';\\n\\nimport {add as add_name_particle,\\n        remove as remove_name_particle,\\n        update as update_name_particle} from \'./NameParticleHandlers.js\';\\n\\nimport {add_author,\\n        move_author_down,\\n        move_author_up,\\n        remove_author} from \'./AuthorsHandlers.js\';\\n\\nimport {add_identifier,\\n        move_identifier_down,\\n        move_identifier_up,\\n        remove_identifier,\\n        update_identifier_type,\\n        update_identifier_value} from \'./IdentifierHandlers.js\';\\n\\nimport {add_identifiers,\\n        remove_identifiers} from \'./IdentifiersHandlers.js\';\\n\\nimport {add as add_keyword,\\n        move_down as move_keyword_down,\\n        move_up as move_keyword_up,\\n        remove as remove_keyword,\\n        update as update_keyword} from \'./KeywordHandlers.js\';\\n\\nimport {add as add_keywords,\\n        remove as remove_keywords} from \'./KeywordsHandlers.js\';\\n\\nimport {add as add_date_released,\\n        remove as remove_date_released,\\n        update as update_date_released} from \'./DateReleasedHandlers.js\';\\n\\nimport {add as add_doi,\\n        remove as remove_doi,\\n        update as update_doi} from \'./DoiHandlers.js\';\\n\\nimport {add as add_license,\\n        remove as remove_license,\\n        update as update_license} from \'./LicenseHandlers.js\';\\n\\nimport {add as add_repository_code,\\n        remove as remove_repository_code,\\n        update as update_repository_code} from \'./RepositoryCodeHandlers.js\';\\n\\nimport {compute_cff} from \'./compute_cff.js\';\\n\\nimport {update_family_names,\\n        update_given_names} from \'./AuthorHandler.js\';\\n\\nimport {add as add_orcid,\\n        remove as remove_orcid,\\n        update as update_orcid} from \'./OrcidHandlers.js\';\\n\\nimport {add as add_name_suffix,\\n        remove as remove_name_suffix,\\n        update as update_name_suffix} from \'./NameSuffixHandlers.js\';\\n\\nimport {update_cff_version,\\n        update_message} from \'./FormHandlers.js\';\\n\\nimport {save_text_as_file} from \'./download.js\';\\n\\nimport {add as add_title,\\n        remove as remove_title,\\n        update as update_title} from \'./TitleHandlers.js\';\\n\\nimport {add as add_version,\\n        remove as remove_version,\\n        update as update_version} from \'./VersionHandlers.js\';\\n\\nimport CffText from \'./CffText.vue\';\\n\\nimport Form from \'./Form.vue\';\\n\\nexport default {\\n    name: \'App\',\\n    components: {\\n        CffText,\\n        Form\\n    },\\n    data: function () {\\n        return {\\n            abstract: undefined,\\n            author_id: -1,\\n            authors: [],\\n            cff_version: \'1.1.0\',\\n            date_released: undefined,\\n            doi: undefined,\\n            identifier_id: -1,\\n            identifiers: undefined,\\n            keyword_id: -1,\\n            keywords: undefined,\\n            license: undefined,\\n            message: \'If you use this software, please cite it using these metadata.\',\\n            repository_code: undefined,\\n            title: undefined,\\n            version: undefined\\n        }\\n    },\\n    computed: {\\n        cff: compute_cff\\n    },\\n    methods: {\\n        add_abstract,\\n        add_affiliation,\\n        add_author,\\n        add_date_released,\\n        add_doi,\\n        add_identifier,\\n        add_identifiers,\\n        add_keyword,\\n        add_keywords,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_license,\\n        add_orcid,\\n        add_repository_code,\\n        add_title,\\n        add_version,\\n        move_author_down,\\n        move_author_up,\\n        move_identifier_down,\\n        move_identifier_up,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_abstract,\\n        remove_affiliation,\\n        remove_author,\\n        remove_date_released,\\n        remove_doi,\\n        remove_identifier,\\n        remove_identifiers,\\n        remove_keyword,\\n        remove_keywords,\\n        remove_license,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        remove_repository_code,\\n        remove_title,\\n        remove_version,\\n        save_text_as_file,\\n        update_abstract,\\n        update_affiliation,\\n        update_family_names,\\n        update_given_names,\\n        update_identifier_type,\\n        update_identifier_value,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid,\\n        update_cff_version,\\n        update_date_released,\\n        update_doi,\\n        update_keyword,\\n        update_license,\\n        update_message,\\n        update_repository_code,\\n        update_title,\\n        update_version\\n    }\\n};\\n<\/script>\\n\\n\\n<style>\\n    body {\\n        background-color: #5f6d64;\\n        margin: 0px;\\n    }\\n    .container {\\n        display: flex;\\n        margin-top: 2vh;\\n        min-width: 300px;\\n    }\\n\\n    .header {\\n        display: block;\\n    }\\n\\n    .header h1 {\\n        font-size: 2rem;\\n        font-family: \'Inconsolata\', monospace;\\n        text-align:center;\\n        color: #fff;\\n        padding-bottom: 1.0rem;\\n        margin-bottom: 0.0rem;\\n    }\\n    .header h2 {\\n        font-size: 100%;\\n        font-family: \'Source Sans Pro\', sans-serif;\\n        text-align:center;\\n        color: #eee;\\n        margin-bottom: 0.0rem;\\n        margin-top: 0.0rem;\\n    }\\n\\n    .download-button {\\n        -webkit-transition-duration: 0.2s; /* Safari */\\n        background-color: #5daa61;\\n        border-color: #222;\\n        border-radius: 6px;\\n        border-style: solid;\\n        border-width: 2px;\\n        color: #222;\\n        display: inline-block;\\n        font-family: \'Source Sans Pro\', sans-serif;\\n        font-size: 1.0rem;\\n        margin-left: auto;\\n        margin-right: auto;\\n        padding: 15px 32px;\\n        text-align: center;\\n        text-decoration: none;\\n        transition-duration: 0.2s;\\n    }\\n    .download-button:hover {\\n        background-color: #487a4a;\\n        border-color: #ccc;\\n        color: #ccc;\\n    }\\n\\n    .github {\\n        position: fixed;\\n        right: 1%;\\n        bottom: 10px;\\n    }\\n</style>\\n","\\nbody {\\n    background-color: #5f6d64;\\n    margin: 0px;\\n}\\n.container {\\n    display: flex;\\n    margin-top: 2vh;\\n    min-width: 300px;\\n}\\n.header {\\n    display: block;\\n}\\n.header h1 {\\n    font-size: 2rem;\\n    font-family: \'Inconsolata\', monospace;\\n    text-align:center;\\n    color: #fff;\\n    padding-bottom: 1.0rem;\\n    margin-bottom: 0.0rem;\\n}\\n.header h2 {\\n    font-size: 100%;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    text-align:center;\\n    color: #eee;\\n    margin-bottom: 0.0rem;\\n    margin-top: 0.0rem;\\n}\\n.download-button {\\n    -webkit-transition-duration: 0.2s; /* Safari */\\n    background-color: #5daa61;\\n    border-color: #222;\\n    border-radius: 6px;\\n    border-style: solid;\\n    border-width: 2px;\\n    color: #222;\\n    display: inline-block;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    font-size: 1.0rem;\\n    margin-left: auto;\\n    margin-right: auto;\\n    padding: 15px 32px;\\n    text-align: center;\\n    text-decoration: none;\\n    transition-duration: 0.2s;\\n}\\n.download-button:hover {\\n    background-color: #487a4a;\\n    border-color: #ccc;\\n    color: #ccc;\\n}\\n.github {\\n    position: fixed;\\n    right: 1%;\\n    bottom: 10px;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(10);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"592bb681\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ2ZmVGV4dC52dWU/MDFlMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUErUDtBQUNyUiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9DZmZUZXh0LnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI1OTJiYjY4MVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9DZmZUZXh0LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0NmZlRleHQudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.cff {\\n    background-color: #fff;\\n    box-sizing: border-box;\\n    flex-basis: 0.0;\\n    flex-grow: 1.0;\\n    height: 75vh;\\n    margin-left: 1%;\\n    margin-right: 1%;\\n}\\n.cff textarea {\\n    border-width: 0px;\\n    height: 100%;\\n    overflow-y: auto;\\n    resize: none;\\n    white-space: pre;\\n    width: 100%;\\n    box-sizing: border-box;\\n}\\n\\n", "",{"version":3,"sources":["src/CffText.vue","CffText.vue"],"names":[],"mappings":";AAsBA;IACA,sBAAA;IACA,sBAAA;IACA,eAAA;IACA,cAAA;IACA,YAAA;IACA,eAAA;IACA,gBAAA;ACpBA;ADuBA;IACA,iBAAA;IACA,YAAA;IACA,gBAAA;IACA,YAAA;IACA,gBAAA;IACA,WAAA;IACA,sBAAA;ACrBA","file":"CffText.vue","sourcesContent":["<template>\\n    <div class=\\"cff\\">\\n        <textarea\\n            id=\\"cfftext\\"\\n            v-model=\\"cff\\"\\n            readonly\\n            tabindex=\\"-1\\"\\n        />\\n    </div>\\n</template>\\n\\n<script>\\nexport default {\\n    name: \'CffText\',\\n    props: {\\n        cff: String\\n    }\\n};\\n<\/script>\\n\\n\\n<style>\\n    .cff {\\n        background-color: #fff;\\n        box-sizing: border-box;\\n        flex-basis: 0.0;\\n        flex-grow: 1.0;\\n        height: 75vh;\\n        margin-left: 1%;\\n        margin-right: 1%;\\n    }\\n\\n    .cff textarea {\\n        border-width: 0px;\\n        height: 100%;\\n        overflow-y: auto;\\n        resize: none;\\n        white-space: pre;\\n        width: 100%;\\n        box-sizing: border-box;\\n    }\\n\\n</style>\\n","\\n.cff {\\n    background-color: #fff;\\n    box-sizing: border-box;\\n    flex-basis: 0.0;\\n    flex-grow: 1.0;\\n    height: 75vh;\\n    margin-left: 1%;\\n    margin-right: 1%;\\n}\\n.cff textarea {\\n    border-width: 0px;\\n    height: 100%;\\n    overflow-y: auto;\\n    resize: none;\\n    white-space: pre;\\n    width: 100%;\\n    box-sizing: border-box;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ2ZmVGV4dC52dWU/OGEzZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxXQUFXLDZCQUE2Qiw2QkFBNkIsc0JBQXNCLHFCQUFxQixtQkFBbUIsc0JBQXNCLHVCQUF1QixHQUFHLGlCQUFpQix3QkFBd0IsbUJBQW1CLHVCQUF1QixtQkFBbUIsdUJBQXVCLGtCQUFrQiw2QkFBNkIsR0FBRyxXQUFXLGdGQUFnRixNQUFNLFdBQVcsV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVcsTUFBTSxNQUFNLFdBQVcsVUFBVSxXQUFXLFVBQVUsV0FBVyxVQUFVLFdBQVcsb1JBQW9SLG9DQUFvQyw0QkFBNEIsSUFBSSxvQ0FBb0MsaUNBQWlDLGlDQUFpQywwQkFBMEIseUJBQXlCLHVCQUF1QiwwQkFBMEIsMkJBQTJCLE9BQU8sdUJBQXVCLDRCQUE0Qix1QkFBdUIsMkJBQTJCLHVCQUF1QiwyQkFBMkIsc0JBQXNCLGlDQUFpQyxPQUFPLHlCQUF5Qiw2QkFBNkIsNkJBQTZCLHNCQUFzQixxQkFBcUIsbUJBQW1CLHNCQUFzQix1QkFBdUIsR0FBRyxpQkFBaUIsd0JBQXdCLG1CQUFtQix1QkFBdUIsbUJBQW1CLHVCQUF1QixrQkFBa0IsNkJBQTZCLEdBQUcsT0FBTyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uY2ZmIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgZmxleC1iYXNpczogMC4wO1xcbiAgICBmbGV4LWdyb3c6IDEuMDtcXG4gICAgaGVpZ2h0OiA3NXZoO1xcbiAgICBtYXJnaW4tbGVmdDogMSU7XFxuICAgIG1hcmdpbi1yaWdodDogMSU7XFxufVxcbi5jZmYgdGV4dGFyZWEge1xcbiAgICBib3JkZXItd2lkdGg6IDBweDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICByZXNpemU6IG5vbmU7XFxuICAgIHdoaXRlLXNwYWNlOiBwcmU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvQ2ZmVGV4dC52dWVcIixcIkNmZlRleHQudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFzQkE7SUFDQSxzQkFBQTtJQUNBLHNCQUFBO0lBQ0EsZUFBQTtJQUNBLGNBQUE7SUFDQSxZQUFBO0lBQ0EsZUFBQTtJQUNBLGdCQUFBO0FDcEJBO0FEdUJBO0lBQ0EsaUJBQUE7SUFDQSxZQUFBO0lBQ0EsZ0JBQUE7SUFDQSxZQUFBO0lBQ0EsZ0JBQUE7SUFDQSxXQUFBO0lBQ0Esc0JBQUE7QUNyQkFcIixcImZpbGVcIjpcIkNmZlRleHQudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY2ZmXFxcIj5cXG4gICAgICAgIDx0ZXh0YXJlYVxcbiAgICAgICAgICAgIGlkPVxcXCJjZmZ0ZXh0XFxcIlxcbiAgICAgICAgICAgIHYtbW9kZWw9XFxcImNmZlxcXCJcXG4gICAgICAgICAgICByZWFkb25seVxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgIC8+XFxuICAgIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIG5hbWU6ICdDZmZUZXh0JyxcXG4gICAgcHJvcHM6IHtcXG4gICAgICAgIGNmZjogU3RyaW5nXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcblxcbjxzdHlsZT5cXG4gICAgLmNmZiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgIGZsZXgtYmFzaXM6IDAuMDtcXG4gICAgICAgIGZsZXgtZ3JvdzogMS4wO1xcbiAgICAgICAgaGVpZ2h0OiA3NXZoO1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDElO1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxJTtcXG4gICAgfVxcblxcbiAgICAuY2ZmIHRleHRhcmVhIHtcXG4gICAgICAgIGJvcmRlci13aWR0aDogMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgICAgIHJlc2l6ZTogbm9uZTtcXG4gICAgICAgIHdoaXRlLXNwYWNlOiBwcmU7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIH1cXG5cXG48L3N0eWxlPlxcblwiLFwiXFxuLmNmZiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGZsZXgtYmFzaXM6IDAuMDtcXG4gICAgZmxleC1ncm93OiAxLjA7XFxuICAgIGhlaWdodDogNzV2aDtcXG4gICAgbWFyZ2luLWxlZnQ6IDElO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDElO1xcbn1cXG4uY2ZmIHRleHRhcmVhIHtcXG4gICAgYm9yZGVyLXdpZHRoOiAwcHg7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgcmVzaXplOiBub25lO1xcbiAgICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuXCJdfV0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(12);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"4f45d56b\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRm9ybS52dWU/Njc0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUE0UDtBQUNsUiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vRm9ybS52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNGY0NWQ1NmJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vRm9ybS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Gb3JtLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.form {\\n    background-color: #a7bcaf;\\n    flex-basis: 0.0;\\n    flex-grow: 1.0;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    height: 75vh;\\n    margin-left: 1%;\\n    margin-right: 1%;\\n    overflow-y: auto;\\n}\\n.form input {\\n    background-color: #ffffff;\\n    border-color: #a7bcaf;\\n    border-style: solid;\\n    border-width: 2px;\\n    color: #000000;\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    min-width: 400px;\\n    padding: 6px;\\n}\\n.form textarea {\\n    border-color: #a7bcaf;\\n    border-style: solid;\\n    border-width: 2px;\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    height: 80px;\\n    overflow-y: auto;\\n    resize: vertical;\\n    white-space: pre-line;\\n    width: 90%;\\n}\\n.form input:focus, .form textarea:focus {\\n    background-color: #ffff93;\\n}\\n.form input.error, .form textarea.error {\\n    border-color: red;\\n}\\np.caption {\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    margin-bottom: 0.5em;\\n    margin-top: 1.0em;\\n}\\np.message {\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    font-size: 0.8rem;\\n    margin-bottom: 2.5em;\\n    margin-top: 0.5em;\\n}\\n.form ul {\\n    list-style-type: none;\\n}\\n.form h1 {\\n    font-size: 1.4rem;\\n    padding-left: 40px;\\n    color: #222222;\\n}\\n\\n", "",{"version":3,"sources":["src/Form.vue","Form.vue"],"names":[],"mappings":";AA6RA;IACA,yBAAA;IACA,eAAA;IACA,cAAA;IACA,0CAAA;IACA,YAAA;IACA,eAAA;IACA,gBAAA;IACA,gBAAA;AC3RA;AD8RA;IACA,yBAAA;IACA,qBAAA;IACA,mBAAA;IACA,iBAAA;IACA,cAAA;IACA,qCAAA;IACA,iBAAA;IACA,gBAAA;IACA,YAAA;AC5RA;AD+RA;IACA,qBAAA;IACA,mBAAA;IACA,iBAAA;IACA,qCAAA;IACA,iBAAA;IACA,YAAA;IACA,gBAAA;IACA,gBAAA;IACA,qBAAA;IACA,UAAA;AC7RA;ADgSA;IACA,yBAAA;AC9RA;ADiSA;IACA,iBAAA;AC/RA;ADkSA;IACA,qCAAA;IACA,iBAAA;IACA,oBAAA;IACA,iBAAA;AChSA;ADmSA;IACA,0CAAA;IACA,iBAAA;IACA,oBAAA;IACA,iBAAA;ACjSA;ADoSA;IACA,qBAAA;AClSA;ADqSA;IACA,iBAAA;IACA,kBAAA;IACA,cAAA;ACnSA","file":"Form.vue","sourcesContent":["<template>\\n    <div class=\\"form\\">\\n        \x3c!-- <h1>Required properties</h1> --\x3e\\n        <ul>\\n            <li>\\n                <p class=\\"caption\\">\\n                    cff-version\\n                </p>\\n                <HelpText\\n                    text=\\"The exact version of the Citation File Format that is used for the file.\\"\\n                    url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#cff-version-required\\"\\n                />\\n                <input\\n                    v-bind:class=\\"{error: cff_version_validation.error }\\"\\n                    v-bind:value=\\"cff_version\\"\\n                    placeholder=\\"1.0.3\\"\\n                    type=\\"text\\"\\n                    v-on:input=\\"update_cff_version($event)\\"\\n                >\\n                <p\\n                    v-if=\\"cff_version_validation.error\\"\\n                    class=\\"message\\"\\n                >\\n                    {{ cff_version_validation.msg }}\\n                </p>\\n            </li>\\n\\n            <li>\\n                <p class=\\"caption\\">\\n                    message\\n                </p>\\n                <HelpText\\n                    text=\\"Specify instructions to users on how to cite the software the CITATION.cff file is associated with.\\"\\n                    url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#message-required\\"\\n                />\\n                <textarea\\n                    v-bind:class=\\"{error: message_validation.error }\\"\\n                    v-bind:value=\\"message\\"\\n                    class=\\"msg\\"\\n                    v-on:input=\\"update_message($event)\\"\\n                />\\n                <p\\n                    v-if=\\"message_validation.error\\"\\n                    class=\\"message\\"\\n                >\\n                    {{ message_validation.msg }}\\n                </p>\\n            </li>\\n\\n            <CreativeWork\\n                v-bind:abstract=\\"abstract\\"\\n                v-bind:author_id=\\"author_id\\"\\n                v-bind:authors=\\"authors\\"\\n                v-bind:date_released=\\"date_released\\"\\n                v-bind:doi=\\"doi\\"\\n                v-bind:identifier_id=\\"identifier_id\\"\\n                v-bind:identifiers=\\"identifiers\\"\\n                v-bind:keyword_id=\\"keyword_id\\"\\n                v-bind:keywords=\\"keywords\\"\\n                v-bind:license=\\"license\\"\\n                v-bind:repository_code=\\"repository_code\\"\\n                v-bind:title=\\"title\\"\\n                v-bind:version=\\"version\\"\\n                v-on:add-abstract=\\"add_abstract\\"\\n                v-on:add-affiliation=\\"add_affiliation\\"\\n                v-on:add-author=\\"add_author\\"\\n                v-on:add-date-released=\\"add_date_released\\"\\n                v-on:add-doi=\\"add_doi\\"\\n                v-on:add-identifier=\\"add_identifier\\"\\n                v-on:add-identifiers=\\"add_identifiers\\"\\n                v-on:add-keyword=\\"add_keyword\\"\\n                v-on:add-keywords=\\"add_keywords\\"\\n                v-on:add-license=\\"add_license\\"\\n                v-on:add-name-particle=\\"add_name_particle\\"\\n                v-on:add-name-suffix=\\"add_name_suffix\\"\\n                v-on:add-orcid=\\"add_orcid\\"\\n                v-on:add-repository-code=\\"add_repository_code\\"\\n                v-on:add-title=\\"add_title\\"\\n                v-on:add-version=\\"add_version\\"\\n                v-on:move-author-down=\\"move_author_down\\"\\n                v-on:move-author-up=\\"move_author_up\\"\\n                v-on:move-identifier-down=\\"move_identifier_down\\"\\n                v-on:move-identifier-up=\\"move_identifier_up\\"\\n                v-on:move-keyword-down=\\"move_keyword_down\\"\\n                v-on:move-keyword-up=\\"move_keyword_up\\"\\n                v-on:remove-abstract=\\"remove_abstract\\"\\n                v-on:remove-affiliation=\\"remove_affiliation\\"\\n                v-on:remove-author=\\"remove_author\\"\\n                v-on:remove-date-released=\\"remove_date_released\\"\\n                v-on:remove-doi=\\"remove_doi\\"\\n                v-on:remove-identifier=\\"remove_identifier\\"\\n                v-on:remove-identifiers=\\"remove_identifiers\\"\\n                v-on:remove-keyword=\\"remove_keyword\\"\\n                v-on:remove-keywords=\\"remove_keywords\\"\\n                v-on:remove-license=\\"remove_license\\"\\n                v-on:remove-name-particle=\\"remove_name_particle\\"\\n                v-on:remove-name-suffix=\\"remove_name_suffix\\"\\n                v-on:remove-orcid=\\"remove_orcid\\"\\n                v-on:remove-repository-code=\\"remove_repository_code\\"\\n                v-on:remove-title=\\"remove_title\\"\\n                v-on:remove-version=\\"remove_version\\"\\n                v-on:update-abstract=\\"update_abstract\\"\\n                v-on:update-affiliation=\\"update_affiliation\\"\\n                v-on:update-date-released=\\"update_date_released\\"\\n                v-on:update-doi=\\"update_doi\\"\\n                v-on:update-family-names=\\"update_family_names\\"\\n                v-on:update-given-names=\\"update_given_names\\"\\n                v-on:update-identifier-type=\\"update_identifier_type\\"\\n                v-on:update-identifier-value=\\"update_identifier_value\\"\\n                v-on:update-keyword=\\"update_keyword\\"\\n                v-on:update-license=\\"update_license\\"\\n                v-on:update-name-particle=\\"update_name_particle\\"\\n                v-on:update-name-suffix=\\"update_name_suffix\\"\\n                v-on:update-orcid=\\"update_orcid\\"\\n                v-on:update-repository-code=\\"update_repository_code\\"\\n                v-on:update-title=\\"update_title\\"\\n                v-on:update-version=\\"update_version\\"\\n            />\\n        </ul>\\n\x3c!--\\n        <h1>Optional properties</h1>\\n        <ul>\\n            <li>\\n                <p class=\\"caption\\">\\n                    references (TODO)\\n                </p>\\n            </li>\\n        </ul>\\n --\x3e\\n    </div>\\n</template>\\n\\n<script>\\nimport CreativeWork from \'./CreativeWork.vue\';\\nimport HelpText from \'./HelpText.vue\';\\n\\nimport {add_abstract,\\n        add_affiliation,\\n        add_author,\\n        add_date_released,\\n        add_doi,\\n        add_identifier,\\n        add_identifiers,\\n        add_keyword,\\n        add_keywords,\\n        add_license,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_orcid,\\n        add_repository_code,\\n        add_title,\\n        add_version,\\n        move_author_down,\\n        move_author_up,\\n        move_identifier_down,\\n        move_identifier_up,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_abstract,\\n        remove_affiliation,\\n        remove_author,\\n        remove_date_released,\\n        remove_identifier,\\n        remove_identifiers,\\n        remove_doi,\\n        remove_keyword,\\n        remove_keywords,\\n        remove_license,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        remove_repository_code,\\n        remove_title,\\n        remove_version,\\n        update_abstract,\\n        update_affiliation,\\n        update_cff_version,\\n        update_date_released,\\n        update_identifier_type,\\n        update_identifier_value,\\n        update_doi,\\n        update_family_names,\\n        update_given_names,\\n        update_keyword,\\n        update_license,\\n        update_message,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid,\\n        update_repository_code,\\n        update_title,\\n        update_version} from \'./FormEmitters.js\';\\n\\nimport {validate_message,\\n        validate_cff_version} from \'./FormValidators.js\';\\n\\nexport default {\\n    name: \'Form\',\\n    components: {\\n        CreativeWork,\\n        HelpText\\n    },\\n    props: {\\n        abstract: String,\\n        author_id: Number,\\n        authors: Array,\\n        cff_version: String,\\n        date_released: String,\\n        doi: String,\\n        identifier_id: Number,\\n        identifiers: Array,\\n        keyword_id: Number,\\n        keywords: Array,\\n        license: String,\\n        message: String,\\n        repository_code: String,\\n        title: String,\\n        version: undefined\\n    },\\n    computed: {\\n        message_validation: validate_message,\\n        cff_version_validation: validate_cff_version\\n    },\\n    methods: {\\n        add_abstract,\\n        add_affiliation,\\n        add_author,\\n        add_date_released,\\n        add_doi,\\n        add_identifier,\\n        add_identifiers,\\n        add_keyword,\\n        add_keywords,\\n        add_license,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_orcid,\\n        add_repository_code,\\n        add_title,\\n        add_version,\\n        move_author_down,\\n        move_author_up,\\n        move_identifier_down,\\n        move_identifier_up,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_abstract,\\n        remove_affiliation,\\n        remove_author,\\n        remove_date_released,\\n        remove_doi,\\n        remove_identifier,\\n        remove_identifiers,\\n        remove_keyword,\\n        remove_keywords,\\n        remove_license,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        remove_repository_code,\\n        remove_title,\\n        remove_version,\\n        update_abstract,\\n        update_affiliation,\\n        update_cff_version,\\n        update_date_released,\\n        update_doi,\\n        update_family_names,\\n        update_given_names,\\n        update_identifier_type,\\n        update_identifier_value,\\n        update_keyword,\\n        update_license,\\n        update_message,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid,\\n        update_repository_code,\\n        update_title,\\n        update_version\\n    }\\n};\\n<\/script>\\n\\n<style>\\n    .form {\\n        background-color: #a7bcaf;\\n        flex-basis: 0.0;\\n        flex-grow: 1.0;\\n        font-family: \'Source Sans Pro\', sans-serif;\\n        height: 75vh;\\n        margin-left: 1%;\\n        margin-right: 1%;\\n        overflow-y: auto;\\n    }\\n\\n    .form input {\\n        background-color: #ffffff;\\n        border-color: #a7bcaf;\\n        border-style: solid;\\n        border-width: 2px;\\n        color: #000000;\\n        font-family: \'Inconsolata\', monospace;\\n        font-size: 1.0rem;\\n        min-width: 400px;\\n        padding: 6px;\\n    }\\n\\n    .form textarea {\\n        border-color: #a7bcaf;\\n        border-style: solid;\\n        border-width: 2px;\\n        font-family: \'Inconsolata\', monospace;\\n        font-size: 1.0rem;\\n        height: 80px;\\n        overflow-y: auto;\\n        resize: vertical;\\n        white-space: pre-line;\\n        width: 90%;\\n    }\\n\\n    .form input:focus, .form textarea:focus {\\n        background-color: #ffff93;\\n    }\\n\\n    .form input.error, .form textarea.error {\\n        border-color: red;\\n    }\\n\\n    p.caption {\\n        font-family: \'Inconsolata\', monospace;\\n        font-size: 1.0rem;\\n        margin-bottom: 0.5em;\\n        margin-top: 1.0em;\\n    }\\n\\n    p.message {\\n        font-family: \'Source Sans Pro\', sans-serif;\\n        font-size: 0.8rem;\\n        margin-bottom: 2.5em;\\n        margin-top: 0.5em;\\n    }\\n\\n    .form ul {\\n        list-style-type: none;\\n    }\\n\\n    .form h1 {\\n        font-size: 1.4rem;\\n        padding-left: 40px;\\n        color: #222222;\\n    }\\n\\n</style>\\n","\\n.form {\\n    background-color: #a7bcaf;\\n    flex-basis: 0.0;\\n    flex-grow: 1.0;\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    height: 75vh;\\n    margin-left: 1%;\\n    margin-right: 1%;\\n    overflow-y: auto;\\n}\\n.form input {\\n    background-color: #ffffff;\\n    border-color: #a7bcaf;\\n    border-style: solid;\\n    border-width: 2px;\\n    color: #000000;\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    min-width: 400px;\\n    padding: 6px;\\n}\\n.form textarea {\\n    border-color: #a7bcaf;\\n    border-style: solid;\\n    border-width: 2px;\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    height: 80px;\\n    overflow-y: auto;\\n    resize: vertical;\\n    white-space: pre-line;\\n    width: 90%;\\n}\\n.form input:focus, .form textarea:focus {\\n    background-color: #ffff93;\\n}\\n.form input.error, .form textarea.error {\\n    border-color: red;\\n}\\np.caption {\\n    font-family: \'Inconsolata\', monospace;\\n    font-size: 1.0rem;\\n    margin-bottom: 0.5em;\\n    margin-top: 1.0em;\\n}\\np.message {\\n    font-family: \'Source Sans Pro\', sans-serif;\\n    font-size: 0.8rem;\\n    margin-bottom: 2.5em;\\n    margin-top: 0.5em;\\n}\\n.form ul {\\n    list-style-type: none;\\n}\\n.form h1 {\\n    font-size: 1.4rem;\\n    padding-left: 40px;\\n    color: #222222;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(14);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"38b75a02\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ3JlYXRpdmVXb3JrLnZ1ZT9iZTUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQThSO0FBQ3BULDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTQyMjc3ZmQ5XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQ3JlYXRpdmVXb3JrLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIzOGI3NWEwMlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTQyMjc3ZmQ5XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQ3JlYXRpdmVXb3JrLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDIyNzdmZDlcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9DcmVhdGl2ZVdvcmsudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.creative_work[data-v-42277fd9] {\\n    padding-left:0px;\\n}\\n", "",{"version":3,"sources":["src/CreativeWork.vue","CreativeWork.vue"],"names":[],"mappings":";AAkQA;IACA,gBAAA;AChQA","file":"CreativeWork.vue","sourcesContent":["<template>\\n    <ul class=\\"creative_work\\">\\n\\n        <Abstract\\n            v-bind:abstract=\\"abstract\\"\\n            v-on:add=\\"add_abstract\\"\\n            v-on:remove=\\"remove_abstract\\"\\n            v-on:update=\\"update_abstract\\"\\n        />\\n\\n        <Authors\\n            v-bind:authors=\\"authors\\"\\n            v-on:add=\\"add_author\\"\\n            v-on:add-affiliation=\\"add_affiliation\\"\\n            v-on:add-orcid=\\"add_orcid\\"\\n            v-on:add-name-particle=\\"add_name_particle\\"\\n            v-on:add-name-suffix=\\"add_name_suffix\\"\\n            v-on:move-down=\\"move_author_down\\"\\n            v-on:move-up=\\"move_author_up\\"\\n            v-on:remove=\\"remove_author\\"\\n            v-on:remove-affiliation=\\"remove_affiliation\\"\\n            v-on:remove-orcid=\\"remove_orcid\\"\\n            v-on:remove-name-particle=\\"remove_name_particle\\"\\n            v-on:remove-name-suffix=\\"remove_name_suffix\\"\\n            v-on:update-affiliation=\\"update_affiliation\\"\\n            v-on:update-family-names=\\"update_family_names\\"\\n            v-on:update-given-names=\\"update_given_names\\"\\n            v-on:update-name-particle=\\"update_name_particle\\"\\n            v-on:update-name-suffix=\\"update_name_suffix\\"\\n            v-on:update-orcid=\\"update_orcid\\"\\n        />\\n\\n        <DateReleased\\n            v-bind:date_released=\\"date_released\\"\\n            v-on:add=\\"add_date_released\\"\\n            v-on:remove=\\"remove_date_released\\"\\n            v-on:update=\\"update_date_released\\"\\n        />\\n\\n        <Doi\\n            v-bind:doi=\\"doi\\"\\n            v-on:add=\\"add_doi\\"\\n            v-on:remove=\\"remove_doi\\"\\n            v-on:update=\\"update_doi\\"\\n        />\\n\\n        <Identifiers\\n            v-bind:identifiers=\\"identifiers\\"\\n            v-on:add-identifier=\\"add_identifier\\"\\n            v-on:add-identifiers=\\"add_identifiers\\"\\n            v-on:move-identifier-down=\\"move_identifier_down\\"\\n            v-on:move-identifier-up=\\"move_identifier_up\\"\\n            v-on:remove-identifier=\\"remove_identifier\\"\\n            v-on:remove-identifiers=\\"remove_identifiers\\"\\n            v-on:update-identifier-type=\\"update_identifier_type\\"\\n            v-on:update-identifier-value=\\"update_identifier_value\\"\\n        />\\n\\n        <Keywords\\n            v-bind:keywords=\\"keywords\\"\\n            v-on:add-keyword=\\"add_keyword\\"\\n            v-on:add-keywords=\\"add_keywords\\"\\n            v-on:move-keyword-down=\\"move_keyword_down\\"\\n            v-on:move-keyword-up=\\"move_keyword_up\\"\\n            v-on:remove-keyword=\\"remove_keyword\\"\\n            v-on:remove-keywords=\\"remove_keywords\\"\\n            v-on:update-keyword=\\"update_keyword\\"\\n        />\\n\\n        <License\\n            v-bind:license=\\"license\\"\\n            v-on:add=\\"add_license\\"\\n            v-on:remove=\\"remove_license\\"\\n            v-on:update=\\"update_license\\"\\n        />\\n\\n        <RepositoryCode\\n            v-bind:repository_code=\\"repository_code\\"\\n            v-on:add=\\"add_repository_code\\"\\n            v-on:remove=\\"remove_repository_code\\"\\n            v-on:update=\\"update_repository_code\\"\\n        />\\n\\n        <Title\\n            v-bind:title=\\"title\\"\\n            v-on:add=\\"add_title\\"\\n            v-on:remove=\\"remove_title\\"\\n            v-on:update=\\"update_title\\"\\n        />\\n\\n        <Version\\n            v-bind:version=\\"version\\"\\n            v-on:add=\\"add_version\\"\\n            v-on:remove=\\"remove_version\\"\\n            v-on:update=\\"update_version\\"\\n        />\\n\\n    </ul>\\n</template>\\n\\n<script>\\nimport {add_abstract,\\n        add_affiliation,\\n        add_author,\\n        add_date_released,\\n        add_doi,\\n        add_identifier,\\n        add_identifiers,\\n        add_keyword,\\n        add_keywords,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_license,\\n        add_orcid,\\n        add_repository_code,\\n        add_title,\\n        add_version,\\n        move_author_down,\\n        move_author_up,\\n        move_identifier_down,\\n        move_identifier_up,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_abstract,\\n        remove_affiliation,\\n        remove_author,\\n        remove_date_released,\\n        remove_doi,\\n        remove_identifier,\\n        remove_identifiers,\\n        remove_keyword,\\n        remove_keywords,\\n        remove_license,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        remove_repository_code,\\n        remove_title,\\n        remove_version,\\n        update_abstract,\\n        update_affiliation,\\n        update_date_released,\\n        update_doi,\\n        update_family_names,\\n        update_given_names,\\n        update_identifier_type,\\n        update_identifier_value,\\n        update_keyword,\\n        update_license,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid,\\n        update_repository_code,\\n        update_title,\\n        update_version} from \'./CreativeWorkEmitters.js\';\\n\\nimport Authors from \'./Authors.vue\';\\nimport Abstract from \'./Abstract.vue\';\\nimport DateReleased from \'./DateReleased.vue\';\\nimport Doi from \'./Doi.vue\';\\nimport Identifiers from \'./Identifiers.vue\';\\nimport Keywords from \'./Keywords.vue\';\\nimport License from \'./License.vue\';\\nimport RepositoryCode from \'./RepositoryCode\';\\nimport Version from \'./Version.vue\';\\nimport Title from \'./Title.vue\';\\n\\nexport default {\\n    name: \'CreativeWork\',\\n    components: {\\n        Abstract,\\n        Authors,\\n        DateReleased,\\n        Doi,\\n        Identifiers,\\n        Keywords,\\n        License,\\n        RepositoryCode,\\n        Title,\\n        Version\\n    },\\n    props: {\\n        abstract: String,\\n        author_id: Number,\\n        authors: Array,\\n        date_released: String,\\n        doi: String,\\n        identifier_id: Number,\\n        identifiers: Array,\\n        keyword_id: Number,\\n        keywords: Array,\\n        license: String,\\n        repository_code: String,\\n        title: String,\\n        version: String\\n    },\\n    computed: {\\n    },\\n    methods: {\\n        add_abstract,\\n        add_affiliation,\\n        add_author,\\n        add_date_released,\\n        add_doi,\\n        add_identifier,\\n        add_identifiers,\\n        add_keyword,\\n        add_keywords,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_orcid,\\n        add_license,\\n        add_repository_code,\\n        add_title,\\n        add_version,\\n        move_author_down,\\n        move_author_up,\\n        move_identifier_down,\\n        move_identifier_up,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_abstract,\\n        remove_affiliation,\\n        remove_author,\\n        remove_date_released,\\n        remove_doi,\\n        remove_identifier,\\n        remove_identifiers,\\n        remove_keyword,\\n        remove_keywords,\\n        remove_license,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        remove_repository_code,\\n        remove_title,\\n        remove_version,\\n        update_abstract,\\n        update_affiliation,\\n        update_date_released,\\n        update_doi,\\n        update_family_names,\\n        update_given_names,\\n        update_identifier_type,\\n        update_identifier_value,\\n        update_keyword,\\n        update_license,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid,\\n        update_repository_code,\\n        update_title,\\n        update_version\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n.creative_work {\\n    padding-left:0px;\\n}\\n</style>\\n","\\n.creative_work[data-v-42277fd9] {\\n    padding-left:0px;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(16);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"e3706f5a\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0aG9ycy52dWU/ZTUwOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUF5UjtBQUMvUyw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0zZTdlOTc0MlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0F1dGhvcnMudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcImUzNzA2ZjVhXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtM2U3ZTk3NDJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BdXRob3JzLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtM2U3ZTk3NDJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BdXRob3JzLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer[data-v-3e7e9742] {\\n    min-width: 16px;\\n}\\n.add-button[data-v-3e7e9742] {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button[data-v-3e7e9742]:hover {\\n    background-color: #ddd;\\n}\\n.authors[data-v-3e7e9742] {\\n    padding-left:0px;\\n    padding-bottom: 2em;\\n}\\n\\n", "",{"version":3,"sources":["src/Authors.vue","Authors.vue"],"names":[],"mappings":";AAsGA;IACA,eAAA;ACpGA;ADuGA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;ACrGA;ADwGA;IACA,sBAAA;ACtGA;ADyGA;IACA,gBAAA;IACA,mBAAA;ACvGA","file":"Authors.vue","sourcesContent":["<template>\\n    <li>\\n        <p class=\\"caption\\">\\n            authors\\n            <button\\n                class=\\"add-button\\"\\n                tabindex=\\"-1\\"\\n                title=\\"Add author\\"\\n                v-on:click=\\"add\\">\\n                <div class=\\"button-spacer\\">\\n                    +\\n                </div>\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"The author(s) of the software\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required\\"\\n        />\\n        <ul class=\\"authors\\">\\n            <Author\\n                v-for=\\"author in authors\\"\\n                v-bind:author=\\"author\\"\\n                v-bind:key=\\"author.id\\"\\n                v-on:add-affiliation=\\"add_affiliation\\"\\n                v-on:add-name-particle=\\"add_name_particle\\"\\n                v-on:add-name-suffix=\\"add_name_suffix\\"\\n                v-on:add-orcid=\\"add_orcid\\"\\n                v-on:move-down=\\"move_down\\"\\n                v-on:move-up=\\"move_up\\"\\n                v-on:remove=\\"remove\\"\\n                v-on:remove-affiliation=\\"remove_affiliation\\"\\n                v-on:remove-name-particle=\\"remove_name_particle\\"\\n                v-on:remove-name-suffix=\\"remove_name_suffix\\"\\n                v-on:remove-orcid=\\"remove_orcid\\"\\n                v-on:update-affiliation=\\"update_affiliation\\"\\n                v-on:update-family-names=\\"update_family_names\\"\\n                v-on:update-given-names=\\"update_given_names\\"\\n                v-on:update-name-particle=\\"update_name_particle\\"\\n                v-on:update-name-suffix=\\"update_name_suffix\\"\\n                v-on:update-orcid=\\"update_orcid\\"\\n            />\\n        </ul>\\n    </li>\\n</template>\\n\\n<script>\\nimport {add,\\n        add_affiliation,\\n        add_name_suffix,\\n        add_name_particle,\\n        add_orcid,\\n        move_down,\\n        move_up,\\n        remove,\\n        remove_affiliation,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        update_affiliation,\\n        update_family_names,\\n        update_given_names,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid} from \'./AuthorsEmitters.js\';\\n\\nimport Author from \'./Author.vue\';\\nimport HelpText from \'./HelpText.vue\';\\n\\nexport default {\\n    name: \'Authors\',\\n    components: {\\n        Author,\\n        HelpText\\n    },\\n    props: {\\n        authors: Array\\n    },\\n    methods: {\\n        add,\\n        add_affiliation,\\n        add_name_particle,\\n        add_name_suffix,\\n        add_orcid,\\n        move_down,\\n        move_up,\\n        remove,\\n        remove_affiliation,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        remove_orcid,\\n        update_affiliation,\\n        update_family_names,\\n        update_given_names,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .add-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n    }\\n\\n    .add-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n    .authors {\\n        padding-left:0px;\\n        padding-bottom: 2em;\\n    }\\n\\n</style>\\n","\\n.button-spacer[data-v-3e7e9742] {\\n    min-width: 16px;\\n}\\n.add-button[data-v-3e7e9742] {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button[data-v-3e7e9742]:hover {\\n    background-color: #ddd;\\n}\\n.authors[data-v-3e7e9742] {\\n    padding-left:0px;\\n    padding-bottom: 2em;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0aG9ycy52dWU/MmI1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxzQ0FBc0Msc0JBQXNCLEdBQUcsZ0NBQWdDLDZCQUE2Qix3QkFBd0IsMEJBQTBCLHlCQUF5Qix5QkFBeUIsc0JBQXNCLHdCQUF3QixrQkFBa0IsR0FBRyxzQ0FBc0MsNkJBQTZCLEdBQUcsNkJBQTZCLHVCQUF1QiwwQkFBMEIsR0FBRyxXQUFXLGdGQUFnRixNQUFNLFVBQVUsTUFBTSxNQUFNLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFdBQVcsVUFBVSxNQUFNLE1BQU0sV0FBVyxNQUFNLE1BQU0sV0FBVyxXQUFXLG8xREFBbzFELDBiQUEwYiw2QkFBNkIsc0NBQXNDLHdDQUF3QyxvQkFBb0IseUNBQXlDLDBDQUEwQyxlQUFlLCtCQUErQixpQkFBaUIsMGNBQTBjLElBQUkscURBQXFELDBCQUEwQixPQUFPLHFCQUFxQixpQ0FBaUMsNEJBQTRCLDhCQUE4Qiw2QkFBNkIsNkJBQTZCLDBCQUEwQiw0QkFBNEIsc0JBQXNCLE9BQU8sMkJBQTJCLGlDQUFpQyxPQUFPLGtCQUFrQiwyQkFBMkIsOEJBQThCLE9BQU8sb0RBQW9ELHNCQUFzQixHQUFHLGdDQUFnQyw2QkFBNkIsd0JBQXdCLDBCQUEwQix5QkFBeUIseUJBQXlCLHNCQUFzQix3QkFBd0Isa0JBQWtCLEdBQUcsc0NBQXNDLDZCQUE2QixHQUFHLDZCQUE2Qix1QkFBdUIsMEJBQTBCLEdBQUcsT0FBTyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uYnV0dG9uLXNwYWNlcltkYXRhLXYtM2U3ZTk3NDJdIHtcXG4gICAgbWluLXdpZHRoOiAxNnB4O1xcbn1cXG4uYWRkLWJ1dHRvbltkYXRhLXYtM2U3ZTk3NDJdIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci1jb2xvcjogIzIyMjtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBmb250LXNpemU6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDJweCAxMHB4O1xcbiAgICBjb2xvcjogIzIyMjtcXG59XFxuLmFkZC1idXR0b25bZGF0YS12LTNlN2U5NzQyXTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcbi5hdXRob3JzW2RhdGEtdi0zZTdlOTc0Ml0ge1xcbiAgICBwYWRkaW5nLWxlZnQ6MHB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMmVtO1xcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvQXV0aG9ycy52dWVcIixcIkF1dGhvcnMudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFzR0E7SUFDQSxlQUFBO0FDcEdBO0FEdUdBO0lBQ0Esc0JBQUE7SUFDQSxpQkFBQTtJQUNBLG1CQUFBO0lBQ0Esa0JBQUE7SUFDQSxrQkFBQTtJQUNBLGVBQUE7SUFDQSxpQkFBQTtJQUNBLFdBQUE7QUNyR0E7QUR3R0E7SUFDQSxzQkFBQTtBQ3RHQTtBRHlHQTtJQUNBLGdCQUFBO0lBQ0EsbUJBQUE7QUN2R0FcIixcImZpbGVcIjpcIkF1dGhvcnMudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXG4gICAgPGxpPlxcbiAgICAgICAgPHAgY2xhc3M9XFxcImNhcHRpb25cXFwiPlxcbiAgICAgICAgICAgIGF1dGhvcnNcXG4gICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJhZGQtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJBZGQgYXV0aG9yXFxcIlxcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJhZGRcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidXR0b24tc3BhY2VyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICtcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8L3A+XFxuICAgICAgICA8SGVscFRleHRcXG4gICAgICAgICAgICB0ZXh0PVxcXCJUaGUgYXV0aG9yKHMpIG9mIHRoZSBzb2Z0d2FyZVxcXCJcXG4gICAgICAgICAgICB1cmw9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgICA8dWwgY2xhc3M9XFxcImF1dGhvcnNcXFwiPlxcbiAgICAgICAgICAgIDxBdXRob3JcXG4gICAgICAgICAgICAgICAgdi1mb3I9XFxcImF1dGhvciBpbiBhdXRob3JzXFxcIlxcbiAgICAgICAgICAgICAgICB2LWJpbmQ6YXV0aG9yPVxcXCJhdXRob3JcXFwiXFxuICAgICAgICAgICAgICAgIHYtYmluZDprZXk9XFxcImF1dGhvci5pZFxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtYWZmaWxpYXRpb249XFxcImFkZF9hZmZpbGlhdGlvblxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtbmFtZS1wYXJ0aWNsZT1cXFwiYWRkX25hbWVfcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246YWRkLW5hbWUtc3VmZml4PVxcXCJhZGRfbmFtZV9zdWZmaXhcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246YWRkLW9yY2lkPVxcXCJhZGRfb3JjaWRcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1kb3duPVxcXCJtb3ZlX2Rvd25cXFwiXFxuICAgICAgICAgICAgICAgIHYtb246bW92ZS11cD1cXFwibW92ZV91cFxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmU9XFxcInJlbW92ZVxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtYWZmaWxpYXRpb249XFxcInJlbW92ZV9hZmZpbGlhdGlvblxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtbmFtZS1wYXJ0aWNsZT1cXFwicmVtb3ZlX25hbWVfcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLW5hbWUtc3VmZml4PVxcXCJyZW1vdmVfbmFtZV9zdWZmaXhcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLW9yY2lkPVxcXCJyZW1vdmVfb3JjaWRcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWFmZmlsaWF0aW9uPVxcXCJ1cGRhdGVfYWZmaWxpYXRpb25cXFwiXFxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWZhbWlseS1uYW1lcz1cXFwidXBkYXRlX2ZhbWlseV9uYW1lc1xcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtZ2l2ZW4tbmFtZXM9XFxcInVwZGF0ZV9naXZlbl9uYW1lc1xcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtbmFtZS1wYXJ0aWNsZT1cXFwidXBkYXRlX25hbWVfcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLW5hbWUtc3VmZml4PVxcXCJ1cGRhdGVfbmFtZV9zdWZmaXhcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLW9yY2lkPVxcXCJ1cGRhdGVfb3JjaWRcXFwiXFxuICAgICAgICAgICAgLz5cXG4gICAgICAgIDwvdWw+XFxuICAgIDwvbGk+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcbmltcG9ydCB7YWRkLFxcbiAgICAgICAgYWRkX2FmZmlsaWF0aW9uLFxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxcbiAgICAgICAgYWRkX25hbWVfcGFydGljbGUsXFxuICAgICAgICBhZGRfb3JjaWQsXFxuICAgICAgICBtb3ZlX2Rvd24sXFxuICAgICAgICBtb3ZlX3VwLFxcbiAgICAgICAgcmVtb3ZlLFxcbiAgICAgICAgcmVtb3ZlX2FmZmlsaWF0aW9uLFxcbiAgICAgICAgcmVtb3ZlX25hbWVfcGFydGljbGUsXFxuICAgICAgICByZW1vdmVfbmFtZV9zdWZmaXgsXFxuICAgICAgICByZW1vdmVfb3JjaWQsXFxuICAgICAgICB1cGRhdGVfYWZmaWxpYXRpb24sXFxuICAgICAgICB1cGRhdGVfZmFtaWx5X25hbWVzLFxcbiAgICAgICAgdXBkYXRlX2dpdmVuX25hbWVzLFxcbiAgICAgICAgdXBkYXRlX25hbWVfcGFydGljbGUsXFxuICAgICAgICB1cGRhdGVfbmFtZV9zdWZmaXgsXFxuICAgICAgICB1cGRhdGVfb3JjaWR9IGZyb20gJy4vQXV0aG9yc0VtaXR0ZXJzLmpzJztcXG5cXG5pbXBvcnQgQXV0aG9yIGZyb20gJy4vQXV0aG9yLnZ1ZSc7XFxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIG5hbWU6ICdBdXRob3JzJyxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgICAgQXV0aG9yLFxcbiAgICAgICAgSGVscFRleHRcXG4gICAgfSxcXG4gICAgcHJvcHM6IHtcXG4gICAgICAgIGF1dGhvcnM6IEFycmF5XFxuICAgIH0sXFxuICAgIG1ldGhvZHM6IHtcXG4gICAgICAgIGFkZCxcXG4gICAgICAgIGFkZF9hZmZpbGlhdGlvbixcXG4gICAgICAgIGFkZF9uYW1lX3BhcnRpY2xlLFxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxcbiAgICAgICAgYWRkX29yY2lkLFxcbiAgICAgICAgbW92ZV9kb3duLFxcbiAgICAgICAgbW92ZV91cCxcXG4gICAgICAgIHJlbW92ZSxcXG4gICAgICAgIHJlbW92ZV9hZmZpbGlhdGlvbixcXG4gICAgICAgIHJlbW92ZV9uYW1lX3BhcnRpY2xlLFxcbiAgICAgICAgcmVtb3ZlX25hbWVfc3VmZml4LFxcbiAgICAgICAgcmVtb3ZlX29yY2lkLFxcbiAgICAgICAgdXBkYXRlX2FmZmlsaWF0aW9uLFxcbiAgICAgICAgdXBkYXRlX2ZhbWlseV9uYW1lcyxcXG4gICAgICAgIHVwZGF0ZV9naXZlbl9uYW1lcyxcXG4gICAgICAgIHVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxcbiAgICAgICAgdXBkYXRlX25hbWVfc3VmZml4LFxcbiAgICAgICAgdXBkYXRlX29yY2lkXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuXFxuICAgIC5idXR0b24tc3BhY2VyIHtcXG4gICAgICAgIG1pbi13aWR0aDogMTZweDtcXG4gICAgfVxcblxcbiAgICAuYWRkLWJ1dHRvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICAgICAgZm9udC1zaXplOiAxMDAlO1xcbiAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgICAgICBjb2xvcjogIzIyMjtcXG4gICAgfVxcblxcbiAgICAuYWRkLWJ1dHRvbjpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcbiAgICB9XFxuXFxuICAgIC5hdXRob3JzIHtcXG4gICAgICAgIHBhZGRpbmctbGVmdDowcHg7XFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMmVtO1xcbiAgICB9XFxuXFxuPC9zdHlsZT5cXG5cIixcIlxcbi5idXR0b24tc3BhY2VyW2RhdGEtdi0zZTdlOTc0Ml0ge1xcbiAgICBtaW4td2lkdGg6IDE2cHg7XFxufVxcbi5hZGQtYnV0dG9uW2RhdGEtdi0zZTdlOTc0Ml0ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbn1cXG4uYWRkLWJ1dHRvbltkYXRhLXYtM2U3ZTk3NDJdOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXG59XFxuLmF1dGhvcnNbZGF0YS12LTNlN2U5NzQyXSB7XFxuICAgIHBhZGRpbmctbGVmdDowcHg7XFxuICAgIHBhZGRpbmctYm90dG9tOiAyZW07XFxufVxcblxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(18);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"192aca36\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0aG9yLnZ1ZT82NDZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQXdSO0FBQzlTLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTEyYzRkNTc4XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXV0aG9yLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxOTJhY2EzNlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTEyYzRkNTc4XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXV0aG9yLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMTJjNGQ1NzhcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BdXRob3IudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer[data-v-12c4d578] {\\n    min-width: 16px;\\n}\\n.move-up-button[data-v-12c4d578], .move-down-button[data-v-12c4d578], .remove-button[data-v-12c4d578] {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.move-up-button[data-v-12c4d578]:hover, .move-down-button[data-v-12c4d578]:hover, .remove-button[data-v-12c4d578]:hover {\\n    background-color: #ddd;\\n}\\nul[data-v-12c4d578] {\\n    padding-bottom: 1em;\\n}\\n\\n\\n", "",{"version":3,"sources":["src/Author.vue","Author.vue"],"names":[],"mappings":";AAoLA;IACA,eAAA;AClLA;ADqLA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;ACnLA;ADsLA;IACA,sBAAA;ACpLA;ADuLA;IACA,mBAAA;ACrLA","file":"Author.vue","sourcesContent":["<template>\\n    <li>\\n        <button\\n            class=\\"remove-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Remove this author\\"\\n            v-on:click=\\"remove\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n            -\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-up-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this author up\\"\\n            v-on:click=\\"move_up\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25B2;\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-down-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this author down\\"\\n            v-on:click=\\"move_down\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25BC;\\n            </div>\\n        </button>\\n\\n        <p>\\n            {{ fullname }}\\n        </p>\\n\\n        <ul>\\n            <Affiliation\\n                v-bind:affiliation=\\"author.affiliation\\"\\n                v-on:add=\\"add_affiliation\\"\\n                v-on:remove=\\"remove_affiliation\\"\\n                v-on:update=\\"update_affiliation\\"\\n            />\\n\\n            <li>\\n                <p class=\\"caption\\">\\n                    given-names\\n                </p>\\n                <HelpText\\n                    text=\\"Specify given and any other names.\\"\\n                    url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2\\"\\n                />\\n                <input\\n                    v-bind:value=\\"author.given_names\\"\\n                    v-on:input=\\"update_given_names($event)\\"\\n                >\\n            </li>\\n\\n            <NameParticle\\n                v-bind:name_particle=\\"author.name_particle\\"\\n                v-on:add=\\"add_name_particle\\"\\n                v-on:remove=\\"remove_name_particle\\"\\n                v-on:update=\\"update_name_particle\\"\\n            />\\n\\n            <li>\\n                <p class=\\"caption\\">\\n                    family-names\\n                </p>\\n                <HelpText\\n                    text=\\"Specify family names, including combinations of given and patronymic forms.\\"\\n                    url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2\\"\\n                />\\n                <input\\n                    v-bind:value=\\"author.family_names\\"\\n                    v-on:input=\\"update_family_names($event)\\"\\n                >\\n            </li>\\n\\n            <NameSuffix\\n                v-bind:name_suffix=\\"author.name_suffix\\"\\n                v-on:add=\\"add_name_suffix\\"\\n                v-on:remove=\\"remove_name_suffix\\"\\n                v-on:update=\\"update_name_suffix\\"\\n            />\\n\\n            <AuthorOrcid\\n                v-bind:orcid=\\"author.orcid\\"\\n                v-on:add=\\"add_orcid\\"\\n                v-on:remove=\\"remove_orcid\\"\\n                v-on:update=\\"update_orcid\\"\\n            />\\n\\n        </ul>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport Affiliation from \'./Affiliation.vue\';\\nimport AuthorOrcid from \'./Orcid.vue\';\\nimport HelpText from \'./HelpText.vue\';\\nimport NameParticle from \'./NameParticle.vue\';\\nimport NameSuffix from \'./NameSuffix.vue\';\\n\\nimport {add_affiliation,\\n        add_orcid,\\n        add_name_particle,\\n        add_name_suffix,\\n        remove,\\n        remove_affiliation,\\n        remove_orcid,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        move_down,\\n        move_up,\\n        update_affiliation,\\n        update_family_names,\\n        update_given_names,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid} from \'./AuthorEmitters.js\';\\n\\nexport default {\\n    name: \'Author\',\\n    components: {\\n        Affiliation,\\n        AuthorOrcid,\\n        HelpText,\\n        NameParticle,\\n        NameSuffix\\n    },\\n    props: {\\n        author: Object\\n    },\\n    computed: {\\n        fullname: function () {\\n            let name_parts = [];\\n            if (this.author.hasOwnProperty(\'given_names\') && this.author.given_names !== \'\') {\\n                name_parts.push(this.author.given_names);\\n            }\\n            if (this.author.hasOwnProperty(\'name_particle\') && this.author.name_particle !== \'\') {\\n                name_parts.push(this.author.name_particle);\\n            }\\n            if (this.author.hasOwnProperty(\'family_names\') && this.author.family_names !== \'\') {\\n                name_parts.push(this.author.family_names);\\n            }\\n            if (this.author.hasOwnProperty(\'name_suffix\') && this.author.name_suffix !== \'\') {\\n                name_parts.push(this.author.name_suffix);\\n            }\\n            return name_parts.join(\' \');\\n        }\\n    },\\n    methods: {\\n        add_affiliation,\\n        add_orcid,\\n        add_name_particle,\\n        add_name_suffix,\\n        remove,\\n        remove_affiliation,\\n        remove_orcid,\\n        remove_name_particle,\\n        remove_name_suffix,\\n        move_down,\\n        move_up,\\n        update_affiliation,\\n        update_family_names,\\n        update_given_names,\\n        update_name_particle,\\n        update_name_suffix,\\n        update_orcid\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .move-up-button, .move-down-button, .remove-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n    }\\n\\n    .move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n    ul {\\n        padding-bottom: 1em;\\n    }\\n\\n\\n</style>\\n","\\n.button-spacer[data-v-12c4d578] {\\n    min-width: 16px;\\n}\\n.move-up-button[data-v-12c4d578], .move-down-button[data-v-12c4d578], .remove-button[data-v-12c4d578] {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.move-up-button[data-v-12c4d578]:hover, .move-down-button[data-v-12c4d578]:hover, .remove-button[data-v-12c4d578]:hover {\\n    background-color: #ddd;\\n}\\nul[data-v-12c4d578] {\\n    padding-bottom: 1em;\\n}\\n\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(20);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"3d0eae5c\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQWZmaWxpYXRpb24udnVlPzMzMDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBNlI7QUFDblQsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWIzMGJiODdcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BZmZpbGlhdGlvbi52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiM2QwZWFlNWNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xYjMwYmI4N1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FmZmlsaWF0aW9uLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWIzMGJiODdcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BZmZpbGlhdGlvbi52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\nbutton[data-v-1b30bb87] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n", "",{"version":3,"sources":["src/Affiliation.vue","Affiliation.vue"],"names":[],"mappings":";AA2EA;IACA,oBAAA;IACA,iBAAA;ACzEA","file":"Affiliation.vue","sourcesContent":["<template>\\n    <li v-if=\\"has_affiliation\\">\\n        <p class=\\"caption\\">\\n            affiliation\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove affiliation\\"\\n                v-on:click=\\"remove\\"\\n            >\\n                remove\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"To specify the affiliation of a person, e.g., a university, research centre, etc.\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2\\"\\n        />\\n        <input\\n            v-bind:class=\\"{error: validation.error }\\"\\n            v-bind:value=\\"affiliation\\"\\n            type=\\"text\\"\\n            v-on:input=\\"update($event)\\"\\n        >\\n        <p\\n            v-if=\\"validation.error\\"\\n            class=\\"message\\"\\n        >\\n            {{ validation.msg }}\\n        </p>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add affiliation\\"\\n            v-on:click=\\"add\\"\\n        >\\n            Add affiliation\\n        </button>\\n    </li>\\n</template>\\n\\n\\n<script>\\n\\nimport HelpText from \'./HelpText.vue\';\\n\\nimport {add,\\n        remove,\\n        update} from \'./AffiliationEmitters.js\';\\n\\nimport {validate} from \'./AffiliationValidators.js\';\\n\\nexport default {\\n    name: \'Affiliation\',\\n    components: {\\n        HelpText\\n    },\\n    props: {\\n        affiliation: String\\n    },\\n    computed: {\\n        has_affiliation: function () {\\n            return this.$props.hasOwnProperty(\'affiliation\') &&\\n                this.$props.affiliation !== undefined;\\n        },\\n        validation: validate\\n    },\\n    methods: {\\n        add,\\n        remove,\\n        update\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n    button {\\n        margin-bottom: 1.0em;\\n        margin-top: 1.0em;\\n    }\\n</style>\\n","\\nbutton[data-v-1b30bb87] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQWZmaWxpYXRpb24udnVlP2M3ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsOEJBQThCLDJCQUEyQix3QkFBd0IsR0FBRyxTQUFTLHdGQUF3RixNQUFNLFdBQVcsV0FBVyw0cEJBQTRwQix5QkFBeUIsME9BQTBPLGtCQUFrQiwwU0FBMFMsWUFBWSxzQ0FBc0MsaUNBQWlDLFlBQVksU0FBUyxtQ0FBbUMsb0JBQW9CLDZDQUE2Qyx5QkFBeUIsZUFBZSxvQ0FBb0Msa0JBQWtCLHdDQUF3Qyx5SEFBeUgsV0FBVyxzQ0FBc0MsaUJBQWlCLHNEQUFzRCxJQUFJLDJDQUEyQywrQkFBK0IsNEJBQTRCLE9BQU8sMENBQTBDLDJCQUEyQix3QkFBd0IsR0FBRyxLQUFLIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmJ1dHRvbltkYXRhLXYtMWIzMGJiODddIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XFxuICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvQWZmaWxpYXRpb24udnVlXCIsXCJBZmZpbGlhdGlvbi52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTJFQTtJQUNBLG9CQUFBO0lBQ0EsaUJBQUE7QUN6RUFcIixcImZpbGVcIjpcIkFmZmlsaWF0aW9uLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxsaSB2LWlmPVxcXCJoYXNfYWZmaWxpYXRpb25cXFwiPlxcbiAgICAgICAgPHAgY2xhc3M9XFxcImNhcHRpb25cXFwiPlxcbiAgICAgICAgICAgIGFmZmlsaWF0aW9uXFxuICAgICAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJSZW1vdmUgYWZmaWxpYXRpb25cXFwiXFxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcInJlbW92ZVxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPEhlbHBUZXh0XFxuICAgICAgICAgICAgdGV4dD1cXFwiVG8gc3BlY2lmeSB0aGUgYWZmaWxpYXRpb24gb2YgYSBwZXJzb24sIGUuZy4sIGEgdW5pdmVyc2l0eSwgcmVzZWFyY2ggY2VudHJlLCBldGMuXFxcIlxcbiAgICAgICAgICAgIHVybD1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcXFwiXFxuICAgICAgICAvPlxcbiAgICAgICAgPGlucHV0XFxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVxcXCJ7ZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IgfVxcXCJcXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XFxcImFmZmlsaWF0aW9uXFxcIlxcbiAgICAgICAgICAgIHR5cGU9XFxcInRleHRcXFwiXFxuICAgICAgICAgICAgdi1vbjppbnB1dD1cXFwidXBkYXRlKCRldmVudClcXFwiXFxuICAgICAgICA+XFxuICAgICAgICA8cFxcbiAgICAgICAgICAgIHYtaWY9XFxcInZhbGlkYXRpb24uZXJyb3JcXFwiXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1lc3NhZ2VcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAge3sgdmFsaWRhdGlvbi5tc2cgfX1cXG4gICAgICAgIDwvcD5cXG4gICAgPC9saT5cXG4gICAgPGxpIHYtZWxzZT5cXG4gICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgdGl0bGU9XFxcIkFkZCBhZmZpbGlhdGlvblxcXCJcXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJhZGRcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgQWRkIGFmZmlsaWF0aW9uXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9saT5cXG48L3RlbXBsYXRlPlxcblxcblxcbjxzY3JpcHQ+XFxuXFxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcXG5cXG5pbXBvcnQge2FkZCxcXG4gICAgICAgIHJlbW92ZSxcXG4gICAgICAgIHVwZGF0ZX0gZnJvbSAnLi9BZmZpbGlhdGlvbkVtaXR0ZXJzLmpzJztcXG5cXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL0FmZmlsaWF0aW9uVmFsaWRhdG9ycy5qcyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBuYW1lOiAnQWZmaWxpYXRpb24nLFxcbiAgICBjb21wb25lbnRzOiB7XFxuICAgICAgICBIZWxwVGV4dFxcbiAgICB9LFxcbiAgICBwcm9wczoge1xcbiAgICAgICAgYWZmaWxpYXRpb246IFN0cmluZ1xcbiAgICB9LFxcbiAgICBjb21wdXRlZDoge1xcbiAgICAgICAgaGFzX2FmZmlsaWF0aW9uOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCdhZmZpbGlhdGlvbicpICYmXFxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLmFmZmlsaWF0aW9uICE9PSB1bmRlZmluZWQ7XFxuICAgICAgICB9LFxcbiAgICAgICAgdmFsaWRhdGlvbjogdmFsaWRhdGVcXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICAgICAgYWRkLFxcbiAgICAgICAgcmVtb3ZlLFxcbiAgICAgICAgdXBkYXRlXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuICAgIGJ1dHRvbiB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcXG4gICAgICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbiAgICB9XFxuPC9zdHlsZT5cXG5cIixcIlxcbmJ1dHRvbltkYXRhLXYtMWIzMGJiODddIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XFxuICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbn1cXG5cIl19XSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(22);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"ad3198aa\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSGVscFRleHQudnVlP2VjZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBZ1E7QUFDdFIsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0hlbHBUZXh0LnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJhZDMxOThhYVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9IZWxwVGV4dC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9IZWxwVGV4dC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\np.help-text {\\n    font-style: italic;\\n    font-size: 0.8rem;\\n    margin-top: 0;\\n    margin-bottom: 0.5em;\\n}\\na.spec-link {\\n    font-style: normal;\\n}\\n", "",{"version":3,"sources":["src/HelpText.vue","HelpText.vue"],"names":[],"mappings":";AA0BA;IACA,kBAAA;IACA,iBAAA;IACA,aAAA;IACA,oBAAA;ACxBA;AD0BA;IACA,kBAAA;ACxBA","file":"HelpText.vue","sourcesContent":["<template>\\n    <p class=\\"help-text\\">\\n        {{text}}\\n        <a class=\\"spec-link\\" target=\\"docs\\" v-bind:href=\\"url\\">(spec)</a>\\n    </p>\\n</template>\\n\\n<script>\\n\\nexport default {\\n    name: \'HelpText\',\\n    components: {\\n    },\\n    props: {\\n        text: String,\\n        url: String\\n    },\\n    computed: {\\n    },\\n    methods: {\\n    }\\n};\\n\\n<\/script>\\n\\n<style>\\n    p.help-text {\\n        font-style: italic;\\n        font-size: 0.8rem;\\n        margin-top: 0;\\n        margin-bottom: 0.5em;\\n    }\\n    a.spec-link {\\n        font-style: normal;\\n    }\\n</style>\\n","\\np.help-text {\\n    font-style: italic;\\n    font-size: 0.8rem;\\n    margin-top: 0;\\n    margin-bottom: 0.5em;\\n}\\na.spec-link {\\n    font-style: normal;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSGVscFRleHQudnVlP2MzMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsa0JBQWtCLHlCQUF5Qix3QkFBd0Isb0JBQW9CLDJCQUEyQixHQUFHLGVBQWUseUJBQXlCLEdBQUcsU0FBUyxrRkFBa0YsTUFBTSxXQUFXLFdBQVcsVUFBVSxXQUFXLE1BQU0sTUFBTSxXQUFXLG1HQUFtRyxNQUFNLHNJQUFzSSwwQ0FBMEMsT0FBTyxlQUFlLG1EQUFtRCxrQkFBa0IsT0FBTyxpQkFBaUIsT0FBTyxJQUFJLDJDQUEyQyw2QkFBNkIsNEJBQTRCLHdCQUF3QiwrQkFBK0IsT0FBTyxtQkFBbUIsNkJBQTZCLE9BQU8sOEJBQThCLHlCQUF5Qix3QkFBd0Isb0JBQW9CLDJCQUEyQixHQUFHLGVBQWUseUJBQXlCLEdBQUcsS0FBSyIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5wLmhlbHAtdGV4dCB7XFxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gICAgZm9udC1zaXplOiAwLjhyZW07XFxuICAgIG1hcmdpbi10b3A6IDA7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xcbn1cXG5hLnNwZWMtbGluayB7XFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wic3JjL0hlbHBUZXh0LnZ1ZVwiLFwiSGVscFRleHQudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUEwQkE7SUFDQSxrQkFBQTtJQUNBLGlCQUFBO0lBQ0EsYUFBQTtJQUNBLG9CQUFBO0FDeEJBO0FEMEJBO0lBQ0Esa0JBQUE7QUN4QkFcIixcImZpbGVcIjpcIkhlbHBUZXh0LnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxwIGNsYXNzPVxcXCJoZWxwLXRleHRcXFwiPlxcbiAgICAgICAge3t0ZXh0fX1cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJzcGVjLWxpbmtcXFwiIHRhcmdldD1cXFwiZG9jc1xcXCIgdi1iaW5kOmhyZWY9XFxcInVybFxcXCI+KHNwZWMpPC9hPlxcbiAgICA8L3A+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgbmFtZTogJ0hlbHBUZXh0JyxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICB9LFxcbiAgICBwcm9wczoge1xcbiAgICAgICAgdGV4dDogU3RyaW5nLFxcbiAgICAgICAgdXJsOiBTdHJpbmdcXG4gICAgfSxcXG4gICAgY29tcHV0ZWQ6IHtcXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICB9XFxufTtcXG5cXG48L3NjcmlwdD5cXG5cXG48c3R5bGU+XFxuICAgIHAuaGVscC10ZXh0IHtcXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xcbiAgICB9XFxuICAgIGEuc3BlYy1saW5rIHtcXG4gICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gICAgfVxcbjwvc3R5bGU+XFxuXCIsXCJcXG5wLmhlbHAtdGV4dCB7XFxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gICAgZm9udC1zaXplOiAwLjhyZW07XFxuICAgIG1hcmdpbi10b3A6IDA7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNWVtO1xcbn1cXG5hLnNwZWMtbGluayB7XFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuXCJdfV0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(24);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"48208157\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvT3JjaWQudnVlPzU1NjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBNlA7QUFDblIsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL09yY2lkLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0ODIwODE1N1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9PcmNpZC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9PcmNpZC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"Orcid.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvT3JjaWQudnVlP2E5MmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsd0pBQXdKLHFFQUFxRSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJmaWxlXCI6XCJPcmNpZC52dWVcIn1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(26);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"fd11cba4\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVBhcnRpY2xlLnZ1ZT8yODk4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQThSO0FBQ3BULDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTlmZWRmM2FjXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vTmFtZVBhcnRpY2xlLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJmZDExY2JhNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTlmZWRmM2FjXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vTmFtZVBhcnRpY2xlLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtOWZlZGYzYWNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9OYW1lUGFydGljbGUudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\nbutton[data-v-9fedf3ac] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n", "",{"version":3,"sources":["src/NameParticle.vue","NameParticle.vue"],"names":[],"mappings":";AA0EA;IACA,oBAAA;IACA,iBAAA;ACxEA","file":"NameParticle.vue","sourcesContent":["<template>\\n    <li v-if=\\"has_name_particle\\">\\n        <p class=\\"caption\\">\\n            name-particle\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove name-particle\\"\\n                v-on:click=\\"remove\\"\\n            >\\n                remove\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"Specify nobiliary particles and prepositions, such as in Ludwig van Beethoven or Rafael van der Vaart.\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2\\"\\n        />\\n        <input\\n            v-bind:class=\\"{error: validation.error }\\"\\n            v-bind:value=\\"name_particle\\"\\n            type=\\"text\\"\\n            v-on:input=\\"update($event)\\"\\n        >\\n        <p\\n            v-if=\\"validation.error\\"\\n            class=\\"message\\"\\n        >\\n            {{ validation.msg }}\\n        </p>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add name-particle\\"\\n            v-on:click=\\"add\\"\\n        >\\n            Add name-particle\\n        </button>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {add,\\n        remove,\\n        update} from \'./NameParticleEmitters.js\';\\n\\nimport {validate} from \'./NameParticleValidators.js\';\\n\\nimport HelpText from \'./HelpText.vue\';\\n\\nexport default {\\n    name: \'NameParticle\',\\n    components: {\\n        HelpText\\n    },\\n    props: {\\n        name_particle: String\\n    },\\n    computed: {\\n        has_name_particle: function () {\\n            return this.$props.hasOwnProperty(\'name_particle\') &&\\n                this.$props.name_particle !== undefined;\\n        },\\n        validation: validate\\n    },\\n    methods: {\\n        add,\\n        remove,\\n        update\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n    button {\\n        margin-bottom: 1.0em;\\n        margin-top: 1.0em;\\n    }\\n</style>\\n","\\nbutton[data-v-9fedf3ac] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVBhcnRpY2xlLnZ1ZT80MmQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLENBQWdEO0FBQ25GO0FBQ0EsY0FBYyxRQUFTLDhCQUE4QiwyQkFBMkIsd0JBQXdCLEdBQUcsU0FBUywwRkFBMEYsTUFBTSxXQUFXLFdBQVcsd3JCQUF3ckIseUJBQXlCLDRPQUE0TyxrQkFBa0IsOFFBQThRLHNDQUFzQyxrQ0FBa0MsWUFBWSxTQUFTLG9DQUFvQywwQ0FBMEMsb0JBQW9CLDhDQUE4Qyx5QkFBeUIsZUFBZSxzQ0FBc0Msa0JBQWtCLDBDQUEwQyw2SEFBNkgsV0FBVyxzQ0FBc0MsaUJBQWlCLHNEQUFzRCxJQUFJLDJDQUEyQywrQkFBK0IsNEJBQTRCLE9BQU8sMENBQTBDLDJCQUEyQix3QkFBd0IsR0FBRyxLQUFLIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmJ1dHRvbltkYXRhLXYtOWZlZGYzYWNdIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XFxuICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvTmFtZVBhcnRpY2xlLnZ1ZVwiLFwiTmFtZVBhcnRpY2xlLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBMEVBO0lBQ0Esb0JBQUE7SUFDQSxpQkFBQTtBQ3hFQVwiLFwiZmlsZVwiOlwiTmFtZVBhcnRpY2xlLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxsaSB2LWlmPVxcXCJoYXNfbmFtZV9wYXJ0aWNsZVxcXCI+XFxuICAgICAgICA8cCBjbGFzcz1cXFwiY2FwdGlvblxcXCI+XFxuICAgICAgICAgICAgbmFtZS1wYXJ0aWNsZVxcbiAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcbiAgICAgICAgICAgICAgICB0aXRsZT1cXFwiUmVtb3ZlIG5hbWUtcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcInJlbW92ZVxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPEhlbHBUZXh0XFxuICAgICAgICAgICAgdGV4dD1cXFwiU3BlY2lmeSBub2JpbGlhcnkgcGFydGljbGVzIGFuZCBwcmVwb3NpdGlvbnMsIHN1Y2ggYXMgaW4gTHVkd2lnIHZhbiBCZWV0aG92ZW4gb3IgUmFmYWVsIHZhbiBkZXIgVmFhcnQuXFxcIlxcbiAgICAgICAgICAgIHVybD1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcXFwiXFxuICAgICAgICAvPlxcbiAgICAgICAgPGlucHV0XFxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVxcXCJ7ZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IgfVxcXCJcXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XFxcIm5hbWVfcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCJcXG4gICAgICAgICAgICB2LW9uOmlucHV0PVxcXCJ1cGRhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAgID5cXG4gICAgICAgIDxwXFxuICAgICAgICAgICAgdi1pZj1cXFwidmFsaWRhdGlvbi5lcnJvclxcXCJcXG4gICAgICAgICAgICBjbGFzcz1cXFwibWVzc2FnZVxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgICB7eyB2YWxpZGF0aW9uLm1zZyB9fVxcbiAgICAgICAgPC9wPlxcbiAgICA8L2xpPlxcbiAgICA8bGkgdi1lbHNlPlxcbiAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiQWRkIG5hbWUtcGFydGljbGVcXFwiXFxuICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwiYWRkXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIEFkZCBuYW1lLXBhcnRpY2xlXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9saT5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuXFxuaW1wb3J0IHthZGQsXFxuICAgICAgICByZW1vdmUsXFxuICAgICAgICB1cGRhdGV9IGZyb20gJy4vTmFtZVBhcnRpY2xlRW1pdHRlcnMuanMnO1xcblxcbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4vTmFtZVBhcnRpY2xlVmFsaWRhdG9ycy5qcyc7XFxuXFxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIG5hbWU6ICdOYW1lUGFydGljbGUnLFxcbiAgICBjb21wb25lbnRzOiB7XFxuICAgICAgICBIZWxwVGV4dFxcbiAgICB9LFxcbiAgICBwcm9wczoge1xcbiAgICAgICAgbmFtZV9wYXJ0aWNsZTogU3RyaW5nXFxuICAgIH0sXFxuICAgIGNvbXB1dGVkOiB7XFxuICAgICAgICBoYXNfbmFtZV9wYXJ0aWNsZTogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnbmFtZV9wYXJ0aWNsZScpICYmXFxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLm5hbWVfcGFydGljbGUgIT09IHVuZGVmaW5lZDtcXG4gICAgICAgIH0sXFxuICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0ZVxcbiAgICB9LFxcbiAgICBtZXRob2RzOiB7XFxuICAgICAgICBhZGQsXFxuICAgICAgICByZW1vdmUsXFxuICAgICAgICB1cGRhdGVcXG4gICAgfVxcbn07XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlIHNjb3BlZD5cXG4gICAgYnV0dG9uIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEuMGVtO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMS4wZW07XFxuICAgIH1cXG48L3N0eWxlPlxcblwiLFwiXFxuYnV0dG9uW2RhdGEtdi05ZmVkZjNhY10ge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcXG4gICAgbWFyZ2luLXRvcDogMS4wZW07XFxufVxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(28);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"6f5c1fb6\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVN1ZmZpeC52dWU/NzEwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUE0UjtBQUNsVCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01NTVjNzcxNlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL05hbWVTdWZmaXgudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjZmNWMxZmI2XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTU1Yzc3MTZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9OYW1lU3VmZml4LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTU1Yzc3MTZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9OYW1lU3VmZml4LnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\nbutton[data-v-555c7716] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n", "",{"version":3,"sources":["src/NameSuffix.vue","NameSuffix.vue"],"names":[],"mappings":";AA0EA;IACA,oBAAA;IACA,iBAAA;ACxEA","file":"NameSuffix.vue","sourcesContent":["<template >\\n    <li v-if=\\"has_name_suffix\\">\\n        <p class=\\"caption\\">\\n            name-suffix\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove name-suffix\\"\\n                v-on:click=\\"remove\\"\\n            >\\n                remove\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"Specify suffixes such as Jr. or III.\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2\\"\\n        />\\n        <input\\n            v-bind:class=\\"{error: validation.error }\\"\\n            v-bind:value=\\"name_suffix\\"\\n            type=\\"text\\"\\n            v-on:input=\\"update($event)\\"\\n        >\\n        <p\\n            v-if=\\"validation.error\\"\\n            class=\\"message\\"\\n        >\\n            {{ validation.msg }}\\n        </p>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add name-suffix\\"\\n            v-on:click=\\"add\\"\\n        >\\n            Add name-suffix\\n        </button>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {add,\\n        remove,\\n        update} from \'./NameSuffixEmitters.js\';\\n\\nimport {validate} from \'./NameSuffixValidators.js\';\\n\\nimport HelpText from \'./HelpText.vue\';\\n\\nexport default {\\n    name: \'NameSuffix\',\\n    components: {\\n        HelpText\\n    },\\n    props: {\\n        name_suffix: String\\n    },\\n    computed: {\\n        has_name_suffix: function () {\\n            return this.$props.hasOwnProperty(\'name_suffix\') &&\\n                this.$props.name_suffix !== undefined;\\n        },\\n        validation: validate\\n    },\\n    methods: {\\n        add,\\n        remove,\\n        update\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n    button {\\n        margin-bottom: 1.0em;\\n        margin-top: 1.0em;\\n    }\\n</style>\\n","\\nbutton[data-v-555c7716] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVN1ZmZpeC52dWU/ODM5MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyw4QkFBOEIsMkJBQTJCLHdCQUF3QixHQUFHLFNBQVMsc0ZBQXNGLE1BQU0sV0FBVyxXQUFXLCttQkFBK21CLHlCQUF5QiwwT0FBME8sa0JBQWtCLDBRQUEwUSxzQ0FBc0MsZ0NBQWdDLFlBQVksU0FBUyxrQ0FBa0MsMENBQTBDLG9CQUFvQiw0Q0FBNEMseUJBQXlCLGVBQWUsb0NBQW9DLGtCQUFrQix3Q0FBd0MseUhBQXlILFdBQVcsc0NBQXNDLGlCQUFpQixzREFBc0QsSUFBSSwyQ0FBMkMsK0JBQStCLDRCQUE0QixPQUFPLDBDQUEwQywyQkFBMkIsd0JBQXdCLEdBQUcsS0FBSyIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5idXR0b25bZGF0YS12LTU1NWM3NzE2XSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDEuMGVtO1xcbiAgICBtYXJnaW4tdG9wOiAxLjBlbTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wic3JjL05hbWVTdWZmaXgudnVlXCIsXCJOYW1lU3VmZml4LnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBMEVBO0lBQ0Esb0JBQUE7SUFDQSxpQkFBQTtBQ3hFQVwiLFwiZmlsZVwiOlwiTmFtZVN1ZmZpeC52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlID5cXG4gICAgPGxpIHYtaWY9XFxcImhhc19uYW1lX3N1ZmZpeFxcXCI+XFxuICAgICAgICA8cCBjbGFzcz1cXFwiY2FwdGlvblxcXCI+XFxuICAgICAgICAgICAgbmFtZS1zdWZmaXhcXG4gICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICAgICAgdGl0bGU9XFxcIlJlbW92ZSBuYW1lLXN1ZmZpeFxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwicmVtb3ZlXFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgcmVtb3ZlXFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8L3A+XFxuICAgICAgICA8SGVscFRleHRcXG4gICAgICAgICAgICB0ZXh0PVxcXCJTcGVjaWZ5IHN1ZmZpeGVzIHN1Y2ggYXMgSnIuIG9yIElJSS5cXFwiXFxuICAgICAgICAgICAgdXJsPVxcXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjZXhlbXBsYXJ5LXVzZXMtMlxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgICA8aW5wdXRcXG4gICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XFxcIntlcnJvcjogdmFsaWRhdGlvbi5lcnJvciB9XFxcIlxcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cXFwibmFtZV9zdWZmaXhcXFwiXFxuICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCJcXG4gICAgICAgICAgICB2LW9uOmlucHV0PVxcXCJ1cGRhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAgID5cXG4gICAgICAgIDxwXFxuICAgICAgICAgICAgdi1pZj1cXFwidmFsaWRhdGlvbi5lcnJvclxcXCJcXG4gICAgICAgICAgICBjbGFzcz1cXFwibWVzc2FnZVxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgICB7eyB2YWxpZGF0aW9uLm1zZyB9fVxcbiAgICAgICAgPC9wPlxcbiAgICA8L2xpPlxcbiAgICA8bGkgdi1lbHNlPlxcbiAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiQWRkIG5hbWUtc3VmZml4XFxcIlxcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcImFkZFxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgICBBZGQgbmFtZS1zdWZmaXhcXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICA8L2xpPlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5cXG5pbXBvcnQge2FkZCxcXG4gICAgICAgIHJlbW92ZSxcXG4gICAgICAgIHVwZGF0ZX0gZnJvbSAnLi9OYW1lU3VmZml4RW1pdHRlcnMuanMnO1xcblxcbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4vTmFtZVN1ZmZpeFZhbGlkYXRvcnMuanMnO1xcblxcbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBuYW1lOiAnTmFtZVN1ZmZpeCcsXFxuICAgIGNvbXBvbmVudHM6IHtcXG4gICAgICAgIEhlbHBUZXh0XFxuICAgIH0sXFxuICAgIHByb3BzOiB7XFxuICAgICAgICBuYW1lX3N1ZmZpeDogU3RyaW5nXFxuICAgIH0sXFxuICAgIGNvbXB1dGVkOiB7XFxuICAgICAgICBoYXNfbmFtZV9zdWZmaXg6IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcHJvcHMuaGFzT3duUHJvcGVydHkoJ25hbWVfc3VmZml4JykgJiZcXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMubmFtZV9zdWZmaXggIT09IHVuZGVmaW5lZDtcXG4gICAgICAgIH0sXFxuICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0ZVxcbiAgICB9LFxcbiAgICBtZXRob2RzOiB7XFxuICAgICAgICBhZGQsXFxuICAgICAgICByZW1vdmUsXFxuICAgICAgICB1cGRhdGVcXG4gICAgfVxcbn07XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlIHNjb3BlZD5cXG4gICAgYnV0dG9uIHtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEuMGVtO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMS4wZW07XFxuICAgIH1cXG48L3N0eWxlPlxcblwiLFwiXFxuYnV0dG9uW2RhdGEtdi01NTVjNzcxNl0ge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcXG4gICAgbWFyZ2luLXRvcDogMS4wZW07XFxufVxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(30);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"3c06f0ad\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQWJzdHJhY3QudnVlP2FmZGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBMFI7QUFDaFQsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzNlM2M3Y2FcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BYnN0cmFjdC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiM2MwNmYwYWRcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03M2UzYzdjYVxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0Fic3RyYWN0LnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzNlM2M3Y2FcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BYnN0cmFjdC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\nbutton[data-v-73e3c7ca] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n", "",{"version":3,"sources":["src/Abstract.vue","Abstract.vue"],"names":[],"mappings":";AAyEA;IACA,oBAAA;IACA,iBAAA;ACvEA","file":"Abstract.vue","sourcesContent":["<template>\\n    <li v-if=\\"has_abstract\\">\\n        <p class=\\"caption\\">\\n            abstract\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove abstract\\"\\n                v-on:click=\\"remove\\"\\n            >\\n                remove\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"A description of the software (version)\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required\\"\\n        />\\n        <textarea\\n            v-bind:class=\\"{error: validation.error }\\"\\n            v-bind:value=\\"abstract\\"\\n            v-on:input=\\"update($event)\\"\\n        />\\n        <p\\n            v-if=\\"validation.error\\"\\n            class=\\"message\\"\\n        >\\n            {{ validation.msg }}\\n        </p>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add abstract\\"\\n            v-on:click=\\"add\\"\\n        >\\n            Add abstract\\n        </button>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport HelpText from \'./HelpText.vue\';\\n\\nimport {add,\\n        remove,\\n        update} from \'./AbstractEmitters.js\';\\n\\nimport {validate} from \'./AbstractValidators.js\';\\n\\nexport default {\\n    name: \'Abstract\',\\n    components: {\\n        HelpText\\n    },\\n    props: {\\n        abstract: String\\n    },\\n    computed: {\\n        has_abstract: function () {\\n            return this.$props.hasOwnProperty(\'abstract\') &&\\n                this.$props.abstract !== undefined;\\n        },\\n        validation: validate\\n    },\\n    methods: {\\n        add,\\n        remove,\\n        update\\n    }\\n};\\n<\/script>\\n\\n<style scoped>\\n    button {\\n        margin-bottom: 1.0em;\\n        margin-top: 1.0em;\\n    }\\n</style>\\n","\\nbutton[data-v-73e3c7ca] {\\n    margin-bottom: 1.0em;\\n    margin-top: 1.0em;\\n}\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQWJzdHJhY3QudnVlPzM1ZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsOEJBQThCLDJCQUEyQix3QkFBd0IsR0FBRyxTQUFTLGtGQUFrRixNQUFNLFdBQVcsV0FBVyw0bkJBQTRuQix5QkFBeUIsNk1BQTZNLGtCQUFrQixrU0FBa1MsWUFBWSxzQ0FBc0MsOEJBQThCLFlBQVksU0FBUyxnQ0FBZ0Msb0JBQW9CLDBDQUEwQyx5QkFBeUIsZUFBZSxpQ0FBaUMsa0JBQWtCLHFDQUFxQyxtSEFBbUgsV0FBVyxzQ0FBc0MsaUJBQWlCLHNEQUFzRCxJQUFJLDJDQUEyQywrQkFBK0IsNEJBQTRCLE9BQU8sMENBQTBDLDJCQUEyQix3QkFBd0IsR0FBRyxLQUFLIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbmJ1dHRvbltkYXRhLXYtNzNlM2M3Y2FdIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XFxuICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvQWJzdHJhY3QudnVlXCIsXCJBYnN0cmFjdC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQXlFQTtJQUNBLG9CQUFBO0lBQ0EsaUJBQUE7QUN2RUFcIixcImZpbGVcIjpcIkFic3RyYWN0LnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxsaSB2LWlmPVxcXCJoYXNfYWJzdHJhY3RcXFwiPlxcbiAgICAgICAgPHAgY2xhc3M9XFxcImNhcHRpb25cXFwiPlxcbiAgICAgICAgICAgIGFic3RyYWN0XFxuICAgICAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJSZW1vdmUgYWJzdHJhY3RcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcInJlbW92ZVxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPEhlbHBUZXh0XFxuICAgICAgICAgICAgdGV4dD1cXFwiQSBkZXNjcmlwdGlvbiBvZiB0aGUgc29mdHdhcmUgKHZlcnNpb24pXFxcIlxcbiAgICAgICAgICAgIHVybD1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI3NvZnR3YXJlLWNpdGF0aW9uLW1ldGFkYXRhLXJlcXVpcmVkXFxcIlxcbiAgICAgICAgLz5cXG4gICAgICAgIDx0ZXh0YXJlYVxcbiAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cXFwie2Vycm9yOiB2YWxpZGF0aW9uLmVycm9yIH1cXFwiXFxuICAgICAgICAgICAgdi1iaW5kOnZhbHVlPVxcXCJhYnN0cmFjdFxcXCJcXG4gICAgICAgICAgICB2LW9uOmlucHV0PVxcXCJ1cGRhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAgIC8+XFxuICAgICAgICA8cFxcbiAgICAgICAgICAgIHYtaWY9XFxcInZhbGlkYXRpb24uZXJyb3JcXFwiXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1lc3NhZ2VcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAge3sgdmFsaWRhdGlvbi5tc2cgfX1cXG4gICAgICAgIDwvcD5cXG4gICAgPC9saT5cXG4gICAgPGxpIHYtZWxzZT5cXG4gICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgdGl0bGU9XFxcIkFkZCBhYnN0cmFjdFxcXCJcXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJhZGRcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgQWRkIGFic3RyYWN0XFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9saT5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuXFxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcXG5cXG5pbXBvcnQge2FkZCxcXG4gICAgICAgIHJlbW92ZSxcXG4gICAgICAgIHVwZGF0ZX0gZnJvbSAnLi9BYnN0cmFjdEVtaXR0ZXJzLmpzJztcXG5cXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL0Fic3RyYWN0VmFsaWRhdG9ycy5qcyc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBuYW1lOiAnQWJzdHJhY3QnLFxcbiAgICBjb21wb25lbnRzOiB7XFxuICAgICAgICBIZWxwVGV4dFxcbiAgICB9LFxcbiAgICBwcm9wczoge1xcbiAgICAgICAgYWJzdHJhY3Q6IFN0cmluZ1xcbiAgICB9LFxcbiAgICBjb21wdXRlZDoge1xcbiAgICAgICAgaGFzX2Fic3RyYWN0OiBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCdhYnN0cmFjdCcpICYmXFxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLmFic3RyYWN0ICE9PSB1bmRlZmluZWQ7XFxuICAgICAgICB9LFxcbiAgICAgICAgdmFsaWRhdGlvbjogdmFsaWRhdGVcXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICAgICAgYWRkLFxcbiAgICAgICAgcmVtb3ZlLFxcbiAgICAgICAgdXBkYXRlXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuICAgIGJ1dHRvbiB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcXG4gICAgICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbiAgICB9XFxuPC9zdHlsZT5cXG5cIixcIlxcbmJ1dHRvbltkYXRhLXYtNzNlM2M3Y2FdIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XFxuICAgIG1hcmdpbi10b3A6IDEuMGVtO1xcbn1cXG5cIl19XSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(32);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"5ed7e91a\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRGF0ZVJlbGVhc2VkLnZ1ZT9kOTlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQThSO0FBQ3BULDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTA5ZmMxNjA0XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vRGF0ZVJlbGVhc2VkLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI1ZWQ3ZTkxYVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTA5ZmMxNjA0XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vRGF0ZVJlbGVhc2VkLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDlmYzE2MDRcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9EYXRlUmVsZWFzZWQudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"DateReleased.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRGF0ZVJlbGVhc2VkLnZ1ZT9jZDg4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLENBQWdEO0FBQ25GO0FBQ0EsY0FBYyxRQUFTLDBLQUEwSyw0RUFBNEUiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKSh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwiZmlsZVwiOlwiRGF0ZVJlbGVhc2VkLnZ1ZVwifV0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(34);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"330dc2c6\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRG9pLnZ1ZT82MWJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQTJQO0FBQ2pSLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Eb2kudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjMzMGRjMmM2XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0RvaS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Eb2kudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"Doi.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRG9pLnZ1ZT9hN2Y0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLENBQWdEO0FBQ25GO0FBQ0EsY0FBYyxRQUFTLDBLQUEwSyxtRUFBbUUiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKSh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwiZmlsZVwiOlwiRG9pLnZ1ZVwifV0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(36);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"684aa5f5\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllcnMudnVlPzlkOTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBbVE7QUFDelIsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0lkZW50aWZpZXJzLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI2ODRhYTVmNVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9JZGVudGlmaWVycy52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9JZGVudGlmaWVycy52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.add-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button:hover {\\n    background-color: #ddd;\\n}\\nul {\\n    padding-bottom: 2em;\\n}\\nli {\\n    padding-top: 0.5em;\\n    padding-bottom: 0.5em;\\n}\\n\\n", "",{"version":3,"sources":["src/Identifiers.vue","Identifiers.vue"],"names":[],"mappings":";AA6FA;IACA,eAAA;AC3FA;AD8FA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;AC5FA;AD+FA;IACA,sBAAA;AC7FA;ADgGA;IACA,mBAAA;AC9FA;ADgGA;IACA,kBAAA;IACA,qBAAA;AC9FA","file":"Identifiers.vue","sourcesContent":["<template>\\n    <li v-if=\\"has_identifiers\\">\\n        <p class=\\"caption\\">\\n            identifiers\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove identifiers\\"\\n                v-on:click=\\"remove_identifiers\\"\\n            >\\n                remove\\n            </button>\\n            <button\\n                class=\\"add-button\\"\\n                tabindex=\\"-1\\"\\n                title=\\"Add identifier\\"\\n                v-on:click=\\"add_identifier\\">\\n                <div class=\\"button-spacer\\">\\n                    +\\n                </div>\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"Persistent identifiers for the software.\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#identifier-objects\\"\\n        />\\n        <ul>\\n            <Identifier\\n                v-for=\\"identifier in identifiers\\"\\n                v-bind:key=\\"identifier.id\\"\\n                v-bind:identifier=\\"identifier\\"\\n                v-on:move-identifier-down=\\"move_identifier_down\\"\\n                v-on:move-identifier-up=\\"move_identifier_up\\"\\n                v-on:remove-identifier=\\"remove_identifier\\"\\n                v-on:update-identifier-type=\\"update_identifier_type\\"\\n                v-on:update-identifier-value=\\"update_identifier_value\\"\\n            />\\n        </ul>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add identifiers\\"\\n            v-on:click=\\"add_identifiers\\"\\n        >\\n            Add identifiers\\n        </button>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {add_identifier,\\n        add_identifiers,\\n        move_identifier_down,\\n        move_identifier_up,\\n        remove_identifier,\\n        remove_identifiers,\\n        update_identifier_type,\\n        update_identifier_value} from \'./IdentifiersEmitters.js\';\\n\\nimport HelpText from \'./HelpText.vue\';\\nimport Identifier from \'./Identifier.vue\';\\n\\nexport default {\\n    name: \'Identifiers\',\\n    components: {\\n        HelpText,\\n        Identifier\\n    },\\n    props: {\\n        identifiers: Array\\n    },\\n    computed: {\\n        has_identifiers: function () {\\n            return this.$props.hasOwnProperty(\'identifiers\') &&\\n                this.$props.identifiers !== undefined\\n        }\\n    },\\n    methods: {\\n        add_identifier,\\n        add_identifiers,\\n        move_identifier_down,\\n        move_identifier_up,\\n        remove_identifier,\\n        remove_identifiers,\\n        update_identifier_type,\\n        update_identifier_value\\n    }\\n};\\n<\/script>\\n\\n<style>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .add-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n    }\\n\\n    .add-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n    ul {\\n        padding-bottom: 2em;\\n    }\\n    li {\\n        padding-top: 0.5em;\\n        padding-bottom: 0.5em;\\n    }\\n\\n</style>\\n","\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.add-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button:hover {\\n    background-color: #ddd;\\n}\\nul {\\n    padding-bottom: 2em;\\n}\\nli {\\n    padding-top: 0.5em;\\n    padding-bottom: 0.5em;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllcnMudnVlPzAxNGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMscUJBQXFCLHNCQUFzQixHQUFHLGVBQWUsNkJBQTZCLHdCQUF3QiwwQkFBMEIseUJBQXlCLHlCQUF5QixzQkFBc0Isd0JBQXdCLGtCQUFrQixHQUFHLHFCQUFxQiw2QkFBNkIsR0FBRyxNQUFNLDBCQUEwQixHQUFHLE1BQU0seUJBQXlCLDRCQUE0QixHQUFHLFdBQVcsd0ZBQXdGLE1BQU0sVUFBVSxNQUFNLE1BQU0sV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxVQUFVLE1BQU0sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLE1BQU0sTUFBTSxXQUFXLFdBQVcscXJEQUFxckQsaU9BQWlPLGlDQUFpQywwQ0FBMEMsNENBQTRDLG9CQUFvQiw2Q0FBNkMsOENBQThDLGVBQWUsbUNBQW1DLGtCQUFrQix3Q0FBd0MsbUlBQW1JLE9BQU8saUJBQWlCLGlQQUFpUCxJQUFJLDhDQUE4QywwQkFBMEIsT0FBTyxxQkFBcUIsaUNBQWlDLDRCQUE0Qiw4QkFBOEIsNkJBQTZCLDZCQUE2QiwwQkFBMEIsNEJBQTRCLHNCQUFzQixPQUFPLDJCQUEyQixpQ0FBaUMsT0FBTyxZQUFZLDhCQUE4QixPQUFPLFVBQVUsNkJBQTZCLGdDQUFnQyxPQUFPLG1DQUFtQyxzQkFBc0IsR0FBRyxlQUFlLDZCQUE2Qix3QkFBd0IsMEJBQTBCLHlCQUF5Qix5QkFBeUIsc0JBQXNCLHdCQUF3QixrQkFBa0IsR0FBRyxxQkFBcUIsNkJBQTZCLEdBQUcsTUFBTSwwQkFBMEIsR0FBRyxNQUFNLHlCQUF5Qiw0QkFBNEIsR0FBRyxPQUFPIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5idXR0b24tc3BhY2VyIHtcXG4gICAgbWluLXdpZHRoOiAxNnB4O1xcbn1cXG4uYWRkLWJ1dHRvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItY29sb3I6ICMyMjI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgZm9udC1zaXplOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAycHggMTBweDtcXG4gICAgY29sb3I6ICMyMjI7XFxufVxcbi5hZGQtYnV0dG9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXG59XFxudWwge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMmVtO1xcbn1cXG5saSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjVlbTtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNWVtO1xcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJzcmMvSWRlbnRpZmllcnMudnVlXCIsXCJJZGVudGlmaWVycy52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTZGQTtJQUNBLGVBQUE7QUMzRkE7QUQ4RkE7SUFDQSxzQkFBQTtJQUNBLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxrQkFBQTtJQUNBLGtCQUFBO0lBQ0EsZUFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtBQzVGQTtBRCtGQTtJQUNBLHNCQUFBO0FDN0ZBO0FEZ0dBO0lBQ0EsbUJBQUE7QUM5RkE7QURnR0E7SUFDQSxrQkFBQTtJQUNBLHFCQUFBO0FDOUZBXCIsXCJmaWxlXCI6XCJJZGVudGlmaWVycy52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcbiAgICA8bGkgdi1pZj1cXFwiaGFzX2lkZW50aWZpZXJzXFxcIj5cXG4gICAgICAgIDxwIGNsYXNzPVxcXCJjYXB0aW9uXFxcIj5cXG4gICAgICAgICAgICBpZGVudGlmaWVyc1xcbiAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcbiAgICAgICAgICAgICAgICB0aXRsZT1cXFwiUmVtb3ZlIGlkZW50aWZpZXJzXFxcIlxcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJyZW1vdmVfaWRlbnRpZmllcnNcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICByZW1vdmVcXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJhZGQtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJBZGQgaWRlbnRpZmllclxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwiYWRkX2lkZW50aWZpZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidXR0b24tc3BhY2VyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICtcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICA8L3A+XFxuICAgICAgICA8SGVscFRleHRcXG4gICAgICAgICAgICB0ZXh0PVxcXCJQZXJzaXN0ZW50IGlkZW50aWZpZXJzIGZvciB0aGUgc29mdHdhcmUuXFxcIlxcbiAgICAgICAgICAgIHVybD1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2lkZW50aWZpZXItb2JqZWN0c1xcXCJcXG4gICAgICAgIC8+XFxuICAgICAgICA8dWw+XFxuICAgICAgICAgICAgPElkZW50aWZpZXJcXG4gICAgICAgICAgICAgICAgdi1mb3I9XFxcImlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnNcXFwiXFxuICAgICAgICAgICAgICAgIHYtYmluZDprZXk9XFxcImlkZW50aWZpZXIuaWRcXFwiXFxuICAgICAgICAgICAgICAgIHYtYmluZDppZGVudGlmaWVyPVxcXCJpZGVudGlmaWVyXFxcIlxcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUtaWRlbnRpZmllci1kb3duPVxcXCJtb3ZlX2lkZW50aWZpZXJfZG93blxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWlkZW50aWZpZXItdXA9XFxcIm1vdmVfaWRlbnRpZmllcl91cFxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtaWRlbnRpZmllcj1cXFwicmVtb3ZlX2lkZW50aWZpZXJcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWlkZW50aWZpZXItdHlwZT1cXFwidXBkYXRlX2lkZW50aWZpZXJfdHlwZVxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtaWRlbnRpZmllci12YWx1ZT1cXFwidXBkYXRlX2lkZW50aWZpZXJfdmFsdWVcXFwiXFxuICAgICAgICAgICAgLz5cXG4gICAgICAgIDwvdWw+XFxuICAgIDwvbGk+XFxuICAgIDxsaSB2LWVsc2U+XFxuICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcbiAgICAgICAgICAgIHRpdGxlPVxcXCJBZGQgaWRlbnRpZmllcnNcXFwiXFxuICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwiYWRkX2lkZW50aWZpZXJzXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIEFkZCBpZGVudGlmaWVyc1xcbiAgICAgICAgPC9idXR0b24+XFxuICAgIDwvbGk+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcblxcbmltcG9ydCB7YWRkX2lkZW50aWZpZXIsXFxuICAgICAgICBhZGRfaWRlbnRpZmllcnMsXFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVyLFxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlfSBmcm9tICcuL0lkZW50aWZpZXJzRW1pdHRlcnMuanMnO1xcblxcbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XFxuaW1wb3J0IElkZW50aWZpZXIgZnJvbSAnLi9JZGVudGlmaWVyLnZ1ZSc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBuYW1lOiAnSWRlbnRpZmllcnMnLFxcbiAgICBjb21wb25lbnRzOiB7XFxuICAgICAgICBIZWxwVGV4dCxcXG4gICAgICAgIElkZW50aWZpZXJcXG4gICAgfSxcXG4gICAgcHJvcHM6IHtcXG4gICAgICAgIGlkZW50aWZpZXJzOiBBcnJheVxcbiAgICB9LFxcbiAgICBjb21wdXRlZDoge1xcbiAgICAgICAgaGFzX2lkZW50aWZpZXJzOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCdpZGVudGlmaWVycycpICYmXFxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLmlkZW50aWZpZXJzICE9PSB1bmRlZmluZWRcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICAgICAgYWRkX2lkZW50aWZpZXIsXFxuICAgICAgICBhZGRfaWRlbnRpZmllcnMsXFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVyLFxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZT5cXG5cXG4gICAgLmJ1dHRvbi1zcGFjZXIge1xcbiAgICAgICAgbWluLXdpZHRoOiAxNnB4O1xcbiAgICB9XFxuXFxuICAgIC5hZGQtYnV0dG9uIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICAgICAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgICAgICBib3JkZXItY29sb3I6ICMyMjI7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgICAgICBmb250LXNpemU6IDEwMCU7XFxuICAgICAgICBwYWRkaW5nOiAycHggMTBweDtcXG4gICAgICAgIGNvbG9yOiAjMjIyO1xcbiAgICB9XFxuXFxuICAgIC5hZGQtYnV0dG9uOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxuICAgIH1cXG5cXG4gICAgdWwge1xcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDJlbTtcXG4gICAgfVxcbiAgICBsaSB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogMC41ZW07XFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XFxuICAgIH1cXG5cXG48L3N0eWxlPlxcblwiLFwiXFxuLmJ1dHRvbi1zcGFjZXIge1xcbiAgICBtaW4td2lkdGg6IDE2cHg7XFxufVxcbi5hZGQtYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci1jb2xvcjogIzIyMjtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBmb250LXNpemU6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDJweCAxMHB4O1xcbiAgICBjb2xvcjogIzIyMjtcXG59XFxuLmFkZC1idXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcbn1cXG51bCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAyZW07XFxufVxcbmxpIHtcXG4gICAgcGFkZGluZy10b3A6IDAuNWVtO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XFxufVxcblxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(38);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"3a6cd34b\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllci52dWU/NzY2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFrUTtBQUN4Uiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vSWRlbnRpZmllci52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiM2E2Y2QzNGJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vSWRlbnRpZmllci52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9JZGVudGlmaWVyLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.move-up-button, .move-down-button, .remove-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n    margin-bottom: 10px;\\n}\\n.move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n    background-color: #ddd;\\n}\\n\\n", "",{"version":3,"sources":["src/Identifier.vue","Identifier.vue"],"names":[],"mappings":";AA2GA;IACA,eAAA;ACzGA;AD4GA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;IACA,mBAAA;AC1GA;AD6GA;IACA,sBAAA;AC3GA","file":"Identifier.vue","sourcesContent":["<template>\\n    <li>\\n        <button\\n            class=\\"remove-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Remove this identifier\\"\\n            v-on:click=\\"remove_identifier\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                -\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-up-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this identifier up\\"\\n            v-on:click=\\"move_identifier_up\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25B2;\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-down-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this identifier down\\"\\n            v-on:click=\\"move_identifier_down\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25BC;\\n            </div>\\n        </button>\\n\\n        <p class=\\"caption\\">\\n            type\\n        </p>\\n        <HelpText\\n            text=\\"The type of the identifier.\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#identifier-type-strings\\"\\n        />\\n        <input\\n            v-bind:value=\\"identifier.type\\"\\n            v-bind:class=\\"{error: validation_type.error }\\"\\n            placeholder=\\"doi | swh | url | other\\"\\n            v-on:input=\\"update_identifier_type($event)\\"\\n        >\\n        <p\\n            v-if=\\"validation_type.error\\"\\n            class=\\"message\\">\\n                {{ validation_type.msg }}\\n        </p>\\n        <p class=\\"caption\\">\\n            value\\n        </p>\\n        <input\\n            v-bind:value=\\"identifier.value\\"\\n            v-bind:class=\\"{error: validation_value.error }\\"\\n            v-on:input=\\"update_identifier_value($event)\\"\\n        >\\n        <p\\n            v-if=\\"validation_value.error\\"\\n            class=\\"message\\">\\n                {{ validation_value.msg }}\\n        </p>\\n\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {move_identifier_down,\\n        move_identifier_up,\\n        remove_identifier,\\n        update_identifier_type,\\n        update_identifier_value} from \'./IdentifierEmitters.js\';\\n\\nimport {validate_type,\\n        validate_value} from \'./IdentifierValidators.js\';\\n\\nimport HelpText from \'./HelpText.vue\';\\n\\nexport default {\\n    name: \'Identifier\',\\n    components: {\\n        HelpText\\n    },\\n    props: {\\n        identifier: Object\\n    },\\n    computed: {\\n        validation_type: validate_type,\\n        validation_value: validate_value\\n    },\\n    methods: {\\n        move_identifier_down,\\n        move_identifier_up,\\n        remove_identifier,\\n        update_identifier_type,\\n        update_identifier_value\\n    }\\n};\\n<\/script>\\n\\n<style>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .move-up-button, .move-down-button, .remove-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n        margin-bottom: 10px;\\n    }\\n\\n    .move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n</style>\\n","\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.move-up-button, .move-down-button, .remove-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n    margin-bottom: 10px;\\n}\\n.move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n    background-color: #ddd;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllci52dWU/ZDhkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxxQkFBcUIsc0JBQXNCLEdBQUcsc0RBQXNELDZCQUE2Qix3QkFBd0IsMEJBQTBCLHlCQUF5Qix5QkFBeUIsc0JBQXNCLHdCQUF3QixrQkFBa0IsMEJBQTBCLEdBQUcsd0VBQXdFLDZCQUE2QixHQUFHLFdBQVcsc0ZBQXNGLE1BQU0sVUFBVSxNQUFNLE1BQU0sV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxVQUFVLFdBQVcsTUFBTSxNQUFNLFdBQVcseW1CQUF5bUIsaVRBQWlULG9aQUFvWiw4QkFBOEIseU9BQXlPLHVCQUF1QiwyS0FBMkssK0JBQStCLHNMQUFzTCx3QkFBd0IsZ0VBQWdFLGlKQUFpSixnQ0FBZ0MsWUFBWSx1Q0FBdUMsa0NBQWtDLDBDQUEwQyxvQkFBb0IsNENBQTRDLHlCQUF5QixlQUFlLG1DQUFtQyxrQkFBa0IsMEZBQTBGLGlCQUFpQixpS0FBaUssSUFBSSw4Q0FBOEMsMEJBQTBCLE9BQU8sNERBQTRELGlDQUFpQyw0QkFBNEIsOEJBQThCLDZCQUE2Qiw2QkFBNkIsMEJBQTBCLDRCQUE0QixzQkFBc0IsOEJBQThCLE9BQU8sOEVBQThFLGlDQUFpQyxPQUFPLG1DQUFtQyxzQkFBc0IsR0FBRyxzREFBc0QsNkJBQTZCLHdCQUF3QiwwQkFBMEIseUJBQXlCLHlCQUF5QixzQkFBc0Isd0JBQXdCLGtCQUFrQiwwQkFBMEIsR0FBRyx3RUFBd0UsNkJBQTZCLEdBQUcsT0FBTyIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uYnV0dG9uLXNwYWNlciB7XFxuICAgIG1pbi13aWR0aDogMTZweDtcXG59XFxuLm1vdmUtdXAtYnV0dG9uLCAubW92ZS1kb3duLWJ1dHRvbiwgLnJlbW92ZS1idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4ubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInNyYy9JZGVudGlmaWVyLnZ1ZVwiLFwiSWRlbnRpZmllci52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTJHQTtJQUNBLGVBQUE7QUN6R0E7QUQ0R0E7SUFDQSxzQkFBQTtJQUNBLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxrQkFBQTtJQUNBLGtCQUFBO0lBQ0EsZUFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtJQUNBLG1CQUFBO0FDMUdBO0FENkdBO0lBQ0Esc0JBQUE7QUMzR0FcIixcImZpbGVcIjpcIklkZW50aWZpZXIudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgIGNsYXNzPVxcXCJyZW1vdmUtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiUmVtb3ZlIHRoaXMgaWRlbnRpZmllclxcXCJcXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJyZW1vdmVfaWRlbnRpZmllclxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidXR0b24tc3BhY2VyXFxcIj5cXG4gICAgICAgICAgICAgICAgLVxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1vdmUtdXAtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiTW92ZSB0aGlzIGlkZW50aWZpZXIgdXBcXFwiXFxuICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwibW92ZV9pZGVudGlmaWVyX3VwXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1zcGFjZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAmI3gyNUIyO1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1vdmUtZG93bi1idXR0b25cXFwiXFxuICAgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcbiAgICAgICAgICAgIHRpdGxlPVxcXCJNb3ZlIHRoaXMgaWRlbnRpZmllciBkb3duXFxcIlxcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcIm1vdmVfaWRlbnRpZmllcl9kb3duXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1zcGFjZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAmI3gyNUJDO1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8cCBjbGFzcz1cXFwiY2FwdGlvblxcXCI+XFxuICAgICAgICAgICAgdHlwZVxcbiAgICAgICAgPC9wPlxcbiAgICAgICAgPEhlbHBUZXh0XFxuICAgICAgICAgICAgdGV4dD1cXFwiVGhlIHR5cGUgb2YgdGhlIGlkZW50aWZpZXIuXFxcIlxcbiAgICAgICAgICAgIHVybD1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2lkZW50aWZpZXItdHlwZS1zdHJpbmdzXFxcIlxcbiAgICAgICAgLz5cXG4gICAgICAgIDxpbnB1dFxcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cXFwiaWRlbnRpZmllci50eXBlXFxcIlxcbiAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cXFwie2Vycm9yOiB2YWxpZGF0aW9uX3R5cGUuZXJyb3IgfVxcXCJcXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiZG9pIHwgc3doIHwgdXJsIHwgb3RoZXJcXFwiXFxuICAgICAgICAgICAgdi1vbjppbnB1dD1cXFwidXBkYXRlX2lkZW50aWZpZXJfdHlwZSgkZXZlbnQpXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgPHBcXG4gICAgICAgICAgICB2LWlmPVxcXCJ2YWxpZGF0aW9uX3R5cGUuZXJyb3JcXFwiXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICB7eyB2YWxpZGF0aW9uX3R5cGUubXNnIH19XFxuICAgICAgICA8L3A+XFxuICAgICAgICA8cCBjbGFzcz1cXFwiY2FwdGlvblxcXCI+XFxuICAgICAgICAgICAgdmFsdWVcXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxpbnB1dFxcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cXFwiaWRlbnRpZmllci52YWx1ZVxcXCJcXG4gICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XFxcIntlcnJvcjogdmFsaWRhdGlvbl92YWx1ZS5lcnJvciB9XFxcIlxcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XFxcInVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlKCRldmVudClcXFwiXFxuICAgICAgICA+XFxuICAgICAgICA8cFxcbiAgICAgICAgICAgIHYtaWY9XFxcInZhbGlkYXRpb25fdmFsdWUuZXJyb3JcXFwiXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1lc3NhZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICB7eyB2YWxpZGF0aW9uX3ZhbHVlLm1zZyB9fVxcbiAgICAgICAgPC9wPlxcblxcbiAgICA8L2xpPlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5cXG5pbXBvcnQge21vdmVfaWRlbnRpZmllcl9kb3duLFxcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX3VwLFxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXIsXFxuICAgICAgICB1cGRhdGVfaWRlbnRpZmllcl90eXBlLFxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWV9IGZyb20gJy4vSWRlbnRpZmllckVtaXR0ZXJzLmpzJztcXG5cXG5pbXBvcnQge3ZhbGlkYXRlX3R5cGUsXFxuICAgICAgICB2YWxpZGF0ZV92YWx1ZX0gZnJvbSAnLi9JZGVudGlmaWVyVmFsaWRhdG9ycy5qcyc7XFxuXFxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAgIG5hbWU6ICdJZGVudGlmaWVyJyxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgICAgSGVscFRleHRcXG4gICAgfSxcXG4gICAgcHJvcHM6IHtcXG4gICAgICAgIGlkZW50aWZpZXI6IE9iamVjdFxcbiAgICB9LFxcbiAgICBjb21wdXRlZDoge1xcbiAgICAgICAgdmFsaWRhdGlvbl90eXBlOiB2YWxpZGF0ZV90eXBlLFxcbiAgICAgICAgdmFsaWRhdGlvbl92YWx1ZTogdmFsaWRhdGVfdmFsdWVcXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX2Rvd24sXFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfdXAsXFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUsXFxuICAgICAgICB1cGRhdGVfaWRlbnRpZmllcl92YWx1ZVxcbiAgICB9XFxufTtcXG48L3NjcmlwdD5cXG5cXG48c3R5bGU+XFxuXFxuICAgIC5idXR0b24tc3BhY2VyIHtcXG4gICAgICAgIG1pbi13aWR0aDogMTZweDtcXG4gICAgfVxcblxcbiAgICAubW92ZS11cC1idXR0b24sIC5tb3ZlLWRvd24tYnV0dG9uLCAucmVtb3ZlLWJ1dHRvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICAgICAgZm9udC1zaXplOiAxMDAlO1xcbiAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgICAgICBjb2xvcjogIzIyMjtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgIH1cXG5cXG4gICAgLm1vdmUtdXAtYnV0dG9uOmhvdmVyLCAubW92ZS1kb3duLWJ1dHRvbjpob3ZlciwgLnJlbW92ZS1idXR0b246aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXG4gICAgfVxcblxcbjwvc3R5bGU+XFxuXCIsXCJcXG4uYnV0dG9uLXNwYWNlciB7XFxuICAgIG1pbi13aWR0aDogMTZweDtcXG59XFxuLm1vdmUtdXAtYnV0dG9uLCAubW92ZS1kb3duLWJ1dHRvbiwgLnJlbW92ZS1idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4ubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(40);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"1c6b242b\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZHMudnVlPzBhZTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBZ1E7QUFDdFIsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0tleXdvcmRzLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxYzZiMjQyYlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9LZXl3b3Jkcy52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9LZXl3b3Jkcy52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.add-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button:hover {\\n    background-color: #ddd;\\n}\\n\\n", "",{"version":3,"sources":["src/Keywords.vue","Keywords.vue"],"names":[],"mappings":";AA0FA;IACA,eAAA;ACxFA;AD2FA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;ACzFA;AD4FA;IACA,sBAAA;AC1FA","file":"Keywords.vue","sourcesContent":["<template>\\n    <li v-if=\\"has_keywords\\">\\n        <p class=\\"caption\\">\\n            keywords\\n            <button\\n                tabindex=\\"-1\\"\\n                title=\\"Remove keywords\\"\\n                v-on:click=\\"remove_keywords\\"\\n            >\\n                remove\\n            </button>\\n            <button\\n                class=\\"add-button\\"\\n                tabindex=\\"-1\\"\\n                title=\\"Add keyword\\"\\n                v-on:click=\\"add_keyword\\">\\n                <div class=\\"button-spacer\\">\\n                    +\\n                </div>\\n            </button>\\n        </p>\\n        <HelpText\\n            text=\\"Keywords pertaining to the software version\\"\\n            url=\\"https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required\\"\\n        />\\n        <ul>\\n            <Keyword\\n                v-for=\\"keyword in keywords\\"\\n                v-bind:key=\\"keyword.id\\"\\n                v-bind:keyword=\\"keyword\\"\\n                v-on:move-keyword-down=\\"move_keyword_down\\"\\n                v-on:move-keyword-up=\\"move_keyword_up\\"\\n                v-on:remove-keyword=\\"remove_keyword\\"\\n                v-on:update-keyword=\\"update_keyword\\"\\n            />\\n        </ul>\\n    </li>\\n    <li v-else>\\n        <button\\n            tabindex=\\"-1\\"\\n            title=\\"Add keywords\\"\\n            v-on:click=\\"add_keywords\\"\\n        >\\n            Add keywords\\n        </button>\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {add_keyword,\\n        add_keywords,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_keyword,\\n        remove_keywords,\\n        update_keyword} from \'./KeywordsEmitters.js\';\\n\\nimport HelpText from \'./HelpText.vue\';\\nimport Keyword from \'./Keyword.vue\';\\n\\nexport default {\\n    name: \'Keywords\',\\n    components: {\\n        HelpText,\\n        Keyword\\n    },\\n    props: {\\n        keywords: Array\\n    },\\n    computed: {\\n        has_keywords: function () {\\n            return this.$props.hasOwnProperty(\'keywords\') &&\\n                this.$props.keywords !== undefined\\n        }\\n    },\\n    methods: {\\n        add_keyword,\\n        add_keywords,\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_keyword,\\n        remove_keywords,\\n        update_keyword\\n    }\\n};\\n<\/script>\\n\\n<style>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .add-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n    }\\n\\n    .add-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n</style>\\n","\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.add-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n}\\n.add-button:hover {\\n    background-color: #ddd;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZHMudnVlP2M1NjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMscUJBQXFCLHNCQUFzQixHQUFHLGVBQWUsNkJBQTZCLHdCQUF3QiwwQkFBMEIseUJBQXlCLHlCQUF5QixzQkFBc0Isd0JBQXdCLGtCQUFrQixHQUFHLHFCQUFxQiw2QkFBNkIsR0FBRyxXQUFXLGtGQUFrRixNQUFNLFVBQVUsTUFBTSxNQUFNLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFdBQVcsVUFBVSxNQUFNLE1BQU0sV0FBVyw2aURBQTZpRCxxS0FBcUssOEJBQThCLDBDQUEwQyxzQ0FBc0Msb0JBQW9CLDBDQUEwQywyQ0FBMkMsZUFBZSxnQ0FBZ0Msa0JBQWtCLHFDQUFxQyw2SEFBNkgsT0FBTyxpQkFBaUIscUxBQXFMLElBQUksOENBQThDLDBCQUEwQixPQUFPLHFCQUFxQixpQ0FBaUMsNEJBQTRCLDhCQUE4Qiw2QkFBNkIsNkJBQTZCLDBCQUEwQiw0QkFBNEIsc0JBQXNCLE9BQU8sMkJBQTJCLGlDQUFpQyxPQUFPLG1DQUFtQyxzQkFBc0IsR0FBRyxlQUFlLDZCQUE2Qix3QkFBd0IsMEJBQTBCLHlCQUF5Qix5QkFBeUIsc0JBQXNCLHdCQUF3QixrQkFBa0IsR0FBRyxxQkFBcUIsNkJBQTZCLEdBQUcsT0FBTyIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uYnV0dG9uLXNwYWNlciB7XFxuICAgIG1pbi13aWR0aDogMTZweDtcXG59XFxuLmFkZC1idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbn1cXG4uYWRkLWJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInNyYy9LZXl3b3Jkcy52dWVcIixcIktleXdvcmRzLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBMEZBO0lBQ0EsZUFBQTtBQ3hGQTtBRDJGQTtJQUNBLHNCQUFBO0lBQ0EsaUJBQUE7SUFDQSxtQkFBQTtJQUNBLGtCQUFBO0lBQ0Esa0JBQUE7SUFDQSxlQUFBO0lBQ0EsaUJBQUE7SUFDQSxXQUFBO0FDekZBO0FENEZBO0lBQ0Esc0JBQUE7QUMxRkFcIixcImZpbGVcIjpcIktleXdvcmRzLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxsaSB2LWlmPVxcXCJoYXNfa2V5d29yZHNcXFwiPlxcbiAgICAgICAgPHAgY2xhc3M9XFxcImNhcHRpb25cXFwiPlxcbiAgICAgICAgICAgIGtleXdvcmRzXFxuICAgICAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJSZW1vdmUga2V5d29yZHNcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcInJlbW92ZV9rZXl3b3Jkc1xcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgY2xhc3M9XFxcImFkZC1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICAgICAgdGl0bGU9XFxcIkFkZCBrZXl3b3JkXFxcIlxcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJhZGRfa2V5d29yZFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1zcGFjZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgK1xcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgIDwvcD5cXG4gICAgICAgIDxIZWxwVGV4dFxcbiAgICAgICAgICAgIHRleHQ9XFxcIktleXdvcmRzIHBlcnRhaW5pbmcgdG8gdGhlIHNvZnR3YXJlIHZlcnNpb25cXFwiXFxuICAgICAgICAgICAgdXJsPVxcXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcXFwiXFxuICAgICAgICAvPlxcbiAgICAgICAgPHVsPlxcbiAgICAgICAgICAgIDxLZXl3b3JkXFxuICAgICAgICAgICAgICAgIHYtZm9yPVxcXCJrZXl3b3JkIGluIGtleXdvcmRzXFxcIlxcbiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PVxcXCJrZXl3b3JkLmlkXFxcIlxcbiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5d29yZD1cXFwia2V5d29yZFxcXCJcXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWtleXdvcmQtZG93bj1cXFwibW92ZV9rZXl3b3JkX2Rvd25cXFwiXFxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1rZXl3b3JkLXVwPVxcXCJtb3ZlX2tleXdvcmRfdXBcXFwiXFxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWtleXdvcmQ9XFxcInJlbW92ZV9rZXl3b3JkXFxcIlxcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1rZXl3b3JkPVxcXCJ1cGRhdGVfa2V5d29yZFxcXCJcXG4gICAgICAgICAgICAvPlxcbiAgICAgICAgPC91bD5cXG4gICAgPC9saT5cXG4gICAgPGxpIHYtZWxzZT5cXG4gICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICB0YWJpbmRleD1cXFwiLTFcXFwiXFxuICAgICAgICAgICAgdGl0bGU9XFxcIkFkZCBrZXl3b3Jkc1xcXCJcXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJhZGRfa2V5d29yZHNcXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgICAgQWRkIGtleXdvcmRzXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgPC9saT5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuXFxuaW1wb3J0IHthZGRfa2V5d29yZCxcXG4gICAgICAgIGFkZF9rZXl3b3JkcyxcXG4gICAgICAgIG1vdmVfa2V5d29yZF9kb3duLFxcbiAgICAgICAgbW92ZV9rZXl3b3JkX3VwLFxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXFxuICAgICAgICByZW1vdmVfa2V5d29yZHMsXFxuICAgICAgICB1cGRhdGVfa2V5d29yZH0gZnJvbSAnLi9LZXl3b3Jkc0VtaXR0ZXJzLmpzJztcXG5cXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xcbmltcG9ydCBLZXl3b3JkIGZyb20gJy4vS2V5d29yZC52dWUnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgbmFtZTogJ0tleXdvcmRzJyxcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgICAgSGVscFRleHQsXFxuICAgICAgICBLZXl3b3JkXFxuICAgIH0sXFxuICAgIHByb3BzOiB7XFxuICAgICAgICBrZXl3b3JkczogQXJyYXlcXG4gICAgfSxcXG4gICAgY29tcHV0ZWQ6IHtcXG4gICAgICAgIGhhc19rZXl3b3JkczogZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgna2V5d29yZHMnKSAmJlxcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy5rZXl3b3JkcyAhPT0gdW5kZWZpbmVkXFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIG1ldGhvZHM6IHtcXG4gICAgICAgIGFkZF9rZXl3b3JkLFxcbiAgICAgICAgYWRkX2tleXdvcmRzLFxcbiAgICAgICAgbW92ZV9rZXl3b3JkX2Rvd24sXFxuICAgICAgICBtb3ZlX2tleXdvcmRfdXAsXFxuICAgICAgICByZW1vdmVfa2V5d29yZCxcXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkcyxcXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkXFxuICAgIH1cXG59O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZT5cXG5cXG4gICAgLmJ1dHRvbi1zcGFjZXIge1xcbiAgICAgICAgbWluLXdpZHRoOiAxNnB4O1xcbiAgICB9XFxuXFxuICAgIC5hZGQtYnV0dG9uIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxuICAgICAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgICAgICBib3JkZXItY29sb3I6ICMyMjI7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgICAgICBmb250LXNpemU6IDEwMCU7XFxuICAgICAgICBwYWRkaW5nOiAycHggMTBweDtcXG4gICAgICAgIGNvbG9yOiAjMjIyO1xcbiAgICB9XFxuXFxuICAgIC5hZGQtYnV0dG9uOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxuICAgIH1cXG5cXG48L3N0eWxlPlxcblwiLFwiXFxuLmJ1dHRvbi1zcGFjZXIge1xcbiAgICBtaW4td2lkdGg6IDE2cHg7XFxufVxcbi5hZGQtYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci1jb2xvcjogIzIyMjtcXG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICBmb250LXNpemU6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDJweCAxMHB4O1xcbiAgICBjb2xvcjogIzIyMjtcXG59XFxuLmFkZC1idXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcbn1cXG5cXG5cIl19XSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(42);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"9546af9a\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZC52dWU/NmI3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUErUDtBQUNyUiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vS2V5d29yZC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiOTU0NmFmOWFcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vS2V5d29yZC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9LZXl3b3JkLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.move-up-button, .move-down-button, .remove-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n    margin-bottom: 10px;\\n}\\n.move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n    background-color: #ddd;\\n}\\n\\n", "",{"version":3,"sources":["src/Keyword.vue","Keyword.vue"],"names":[],"mappings":";AAiEA;IACA,eAAA;AC/DA;ADkEA;IACA,sBAAA;IACA,iBAAA;IACA,mBAAA;IACA,kBAAA;IACA,kBAAA;IACA,eAAA;IACA,iBAAA;IACA,WAAA;IACA,mBAAA;AChEA;ADmEA;IACA,sBAAA;ACjEA","file":"Keyword.vue","sourcesContent":["<template>\\n    <li>\\n        <button\\n            class=\\"remove-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Remove this keyword\\"\\n            v-on:click=\\"remove_keyword\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                -\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-up-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this keyword up\\"\\n            v-on:click=\\"move_keyword_up\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25B2;\\n            </div>\\n        </button>\\n\\n        <button\\n            class=\\"move-down-button\\"\\n            tabindex=\\"-1\\"\\n            title=\\"Move this keyword down\\"\\n            v-on:click=\\"move_keyword_down\\"\\n        >\\n            <div class=\\"button-spacer\\">\\n                &#x25BC;\\n            </div>\\n        </button>\\n\\n        <input\\n            v-bind:value=\\"keyword.text\\"\\n            v-on:input=\\"update_keyword($event)\\"\\n        >\\n    </li>\\n</template>\\n\\n<script>\\n\\nimport {move_keyword_down,\\n        move_keyword_up,\\n        remove_keyword,\\n        update_keyword} from \'./KeywordEmitters.js\';\\n\\nexport default {\\n    name: \'Keyword\',\\n    props: {\\n        keyword: Object\\n    },\\n    methods: {\\n        move_keyword_down,\\n        move_keyword_up,\\n        remove_keyword,\\n        update_keyword\\n    }\\n};\\n<\/script>\\n\\n<style>\\n\\n    .button-spacer {\\n        min-width: 16px;\\n    }\\n\\n    .move-up-button, .move-down-button, .remove-button {\\n        background-color: #ccc;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-color: #222;\\n        border-radius: 2px;\\n        font-size: 100%;\\n        padding: 2px 10px;\\n        color: #222;\\n        margin-bottom: 10px;\\n    }\\n\\n    .move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n        background-color: #ddd;\\n    }\\n\\n</style>\\n","\\n.button-spacer {\\n    min-width: 16px;\\n}\\n.move-up-button, .move-down-button, .remove-button {\\n    background-color: #ccc;\\n    border-width: 1px;\\n    border-style: solid;\\n    border-color: #222;\\n    border-radius: 2px;\\n    font-size: 100%;\\n    padding: 2px 10px;\\n    color: #222;\\n    margin-bottom: 10px;\\n}\\n.move-up-button:hover, .move-down-button:hover, .remove-button:hover {\\n    background-color: #ddd;\\n}\\n\\n"]}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZC52dWU/ZTJmYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxxQkFBcUIsc0JBQXNCLEdBQUcsc0RBQXNELDZCQUE2Qix3QkFBd0IsMEJBQTBCLHlCQUF5Qix5QkFBeUIsc0JBQXNCLHdCQUF3QixrQkFBa0IsMEJBQTBCLEdBQUcsd0VBQXdFLDZCQUE2QixHQUFHLFdBQVcsZ0ZBQWdGLE1BQU0sVUFBVSxNQUFNLE1BQU0sV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxVQUFVLFdBQVcsTUFBTSxNQUFNLFdBQVcsMGxCQUEwbEIsMlNBQTJTLGtOQUFrTiw4RkFBOEYsNkJBQTZCLG9CQUFvQixvQ0FBb0MsZ0NBQWdDLGlCQUFpQiw4R0FBOEcsSUFBSSw4Q0FBOEMsMEJBQTBCLE9BQU8sNERBQTRELGlDQUFpQyw0QkFBNEIsOEJBQThCLDZCQUE2Qiw2QkFBNkIsMEJBQTBCLDRCQUE0QixzQkFBc0IsOEJBQThCLE9BQU8sOEVBQThFLGlDQUFpQyxPQUFPLG1DQUFtQyxzQkFBc0IsR0FBRyxzREFBc0QsNkJBQTZCLHdCQUF3QiwwQkFBMEIseUJBQXlCLHlCQUF5QixzQkFBc0Isd0JBQXdCLGtCQUFrQiwwQkFBMEIsR0FBRyx3RUFBd0UsNkJBQTZCLEdBQUcsT0FBTyIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uYnV0dG9uLXNwYWNlciB7XFxuICAgIG1pbi13aWR0aDogMTZweDtcXG59XFxuLm1vdmUtdXAtYnV0dG9uLCAubW92ZS1kb3duLWJ1dHRvbiwgLnJlbW92ZS1idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4ubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInNyYy9LZXl3b3JkLnZ1ZVwiLFwiS2V5d29yZC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQWlFQTtJQUNBLGVBQUE7QUMvREE7QURrRUE7SUFDQSxzQkFBQTtJQUNBLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxrQkFBQTtJQUNBLGtCQUFBO0lBQ0EsZUFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtJQUNBLG1CQUFBO0FDaEVBO0FEbUVBO0lBQ0Esc0JBQUE7QUNqRUFcIixcImZpbGVcIjpcIktleXdvcmQudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXG4gICAgPGxpPlxcbiAgICAgICAgPGJ1dHRvblxcbiAgICAgICAgICAgIGNsYXNzPVxcXCJyZW1vdmUtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiUmVtb3ZlIHRoaXMga2V5d29yZFxcXCJcXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVxcXCJyZW1vdmVfa2V5d29yZFxcXCJcXG4gICAgICAgID5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidXR0b24tc3BhY2VyXFxcIj5cXG4gICAgICAgICAgICAgICAgLVxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1vdmUtdXAtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCItMVxcXCJcXG4gICAgICAgICAgICB0aXRsZT1cXFwiTW92ZSB0aGlzIGtleXdvcmQgdXBcXFwiXFxuICAgICAgICAgICAgdi1vbjpjbGljaz1cXFwibW92ZV9rZXl3b3JkX3VwXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1zcGFjZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAmI3gyNUIyO1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgY2xhc3M9XFxcIm1vdmUtZG93bi1idXR0b25cXFwiXFxuICAgICAgICAgICAgdGFiaW5kZXg9XFxcIi0xXFxcIlxcbiAgICAgICAgICAgIHRpdGxlPVxcXCJNb3ZlIHRoaXMga2V5d29yZCBkb3duXFxcIlxcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XFxcIm1vdmVfa2V5d29yZF9kb3duXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1zcGFjZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAmI3gyNUJDO1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICA8aW5wdXRcXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XFxcImtleXdvcmQudGV4dFxcXCJcXG4gICAgICAgICAgICB2LW9uOmlucHV0PVxcXCJ1cGRhdGVfa2V5d29yZCgkZXZlbnQpXFxcIlxcbiAgICAgICAgPlxcbiAgICA8L2xpPlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5cXG5pbXBvcnQge21vdmVfa2V5d29yZF9kb3duLFxcbiAgICAgICAgbW92ZV9rZXl3b3JkX3VwLFxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXFxuICAgICAgICB1cGRhdGVfa2V5d29yZH0gZnJvbSAnLi9LZXl3b3JkRW1pdHRlcnMuanMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgbmFtZTogJ0tleXdvcmQnLFxcbiAgICBwcm9wczoge1xcbiAgICAgICAga2V5d29yZDogT2JqZWN0XFxuICAgIH0sXFxuICAgIG1ldGhvZHM6IHtcXG4gICAgICAgIG1vdmVfa2V5d29yZF9kb3duLFxcbiAgICAgICAgbW92ZV9rZXl3b3JkX3VwLFxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXFxuICAgICAgICB1cGRhdGVfa2V5d29yZFxcbiAgICB9XFxufTtcXG48L3NjcmlwdD5cXG5cXG48c3R5bGU+XFxuXFxuICAgIC5idXR0b24tc3BhY2VyIHtcXG4gICAgICAgIG1pbi13aWR0aDogMTZweDtcXG4gICAgfVxcblxcbiAgICAubW92ZS11cC1idXR0b24sIC5tb3ZlLWRvd24tYnV0dG9uLCAucmVtb3ZlLWJ1dHRvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgICAgICAgZm9udC1zaXplOiAxMDAlO1xcbiAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgICAgICBjb2xvcjogIzIyMjtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgIH1cXG5cXG4gICAgLm1vdmUtdXAtYnV0dG9uOmhvdmVyLCAubW92ZS1kb3duLWJ1dHRvbjpob3ZlciwgLnJlbW92ZS1idXR0b246aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXG4gICAgfVxcblxcbjwvc3R5bGU+XFxuXCIsXCJcXG4uYnV0dG9uLXNwYWNlciB7XFxuICAgIG1pbi13aWR0aDogMTZweDtcXG59XFxuLm1vdmUtdXAtYnV0dG9uLCAubW92ZS1kb3duLWJ1dHRvbiwgLnJlbW92ZS1idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgcGFkZGluZzogMnB4IDEwcHg7XFxuICAgIGNvbG9yOiAjMjIyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4ubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcblwiXX1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(44);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"4bf3faa3\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTGljZW5zZS52dWU/MTViMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUF5UjtBQUMvUyw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1lMjA0Zjg1MFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0xpY2Vuc2UudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjRiZjNmYWEzXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTIwNGY4NTBcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaWNlbnNlLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTIwNGY4NTBcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaWNlbnNlLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"License.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTGljZW5zZS52dWU/MWI0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUywwS0FBMEssdUVBQXVFIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcIkxpY2Vuc2UudnVlXCJ9XSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(46);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"17bd960b\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUmVwb3NpdG9yeUNvZGUudnVlPzQ2MTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBc1E7QUFDNVIsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1JlcG9zaXRvcnlDb2RlLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxN2JkOTYwYlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9SZXBvc2l0b3J5Q29kZS52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9SZXBvc2l0b3J5Q29kZS52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"RepositoryCode.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUmVwb3NpdG9yeUNvZGUudnVlPzJkN2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsd0tBQXdLLDhFQUE4RSIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJmaWxlXCI6XCJSZXBvc2l0b3J5Q29kZS52dWVcIn1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(48);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"25bc4504\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmVyc2lvbi52dWU/YmExNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUF5UjtBQUMvUyw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTBEO0FBQzVFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi00Mzc0MGUyMlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1ZlcnNpb24udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjI1YmM0NTA0XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDM3NDBlMjJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9WZXJzaW9uLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDM3NDBlMjJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9WZXJzaW9uLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"Version.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmVyc2lvbi52dWU/M2Q2MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUFnRDtBQUNuRjtBQUNBLGNBQWMsUUFBUyxzSkFBc0osdUVBQXVFIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcImZpbGVcIjpcIlZlcnNpb24udnVlXCJ9XSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(50);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"5071a6b6\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGl0bGUudnVlPzE3MDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBdVI7QUFDN1MsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwRDtBQUM1RSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTFhYjkyMmZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9UaXRsZS52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNTA3MWE2YjZcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01MWFiOTIyZlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1RpdGxlLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTFhYjkyMmZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9UaXRsZS52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// Module\nexports.push([module.i, "\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "",{"version":3,"sources":[],"names":[],"mappings":"","file":"Title.vue"}]);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVGl0bGUudnVlPzczN2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsQ0FBZ0Q7QUFDbkY7QUFDQSxjQUFjLFFBQVMsZ0pBQWdKLHFFQUFxRSIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJmaWxlXCI6XCJUaXRsZS52dWVcIn1dKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js\nvar vue_esm = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/AbstractHandlers.js\nfunction add() {\n    this.abstract = \'\';\n}\n\nfunction remove() {\n    this.abstract = undefined;\n}\n\nfunction update(payload) {\n    this.abstract = payload.value;\n}\n// CONCATENATED MODULE: ./src/AffiliationHandlers.js\nfunction AffiliationHandlers_add(payload) {\n    let author = this.authors.find(function (author) {\n        return author.id == payload.id;\n    });\n    author.affiliation = \'\';\n}\n\nfunction AffiliationHandlers_remove(payload) {\n    let author = this.authors.find(function (author) {\n        return author.id == payload.id;\n    });\n    author.affiliation = undefined;\n}\n\nfunction AffiliationHandlers_update(payload) {\n    let author = this.authors.find(function (author) {\n        return author.id == payload.id;\n    });\n    author.affiliation = payload.value;\n}\n// CONCATENATED MODULE: ./src/NameParticleHandlers.js\nfunction NameParticleHandlers_add(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_particle = \'\';\n}\n\nfunction NameParticleHandlers_remove(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_particle = undefined;\n}\n\nfunction NameParticleHandlers_update(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_particle = payload.value;\n}\n// CONCATENATED MODULE: ./src/AuthorsHandlers.js\nfunction add_author() {\n    this.authors.push({\n        affiliation: undefined,\n        family_names: \'\',\n        given_names: \'\',\n        id: this.author_id += 1,\n        name_particle: undefined,\n        name_suffix: undefined,\n        orcid: undefined\n    });\n}\n\nfunction move_author_down(author_id) {\n    let position = this.authors.findIndex(function (author) {\n        return author.id == author_id;\n    });\n    if (position < this.authors.length - 1) {\n        this.authors = [].concat(this.authors.slice(0, position), this.authors.slice(position, position + 2).reverse(), this.authors.slice(position + 2));\n    }\n}\n\nfunction move_author_up(author_id) {\n    let position = this.authors.findIndex(function (author) {\n        return author.id == author_id;\n    });\n    if (position > 0) {\n        this.authors = [].concat(this.authors.slice(0, position - 1), this.authors.slice(position - 1, position + 1).reverse(), this.authors.slice(position + 1));\n    }\n}\n\nfunction remove_author(author_id) {\n    this.authors = this.authors.filter(function (author) {\n        return author.id !== author_id;\n    });\n}\n// CONCATENATED MODULE: ./src/IdentifierHandlers.js\nfunction add_identifier() {\n    this.identifiers.push({\n        id: this.identifier_id += 1,\n        type: \'\',\n        value: \'\'\n    });\n}\n\nfunction move_identifier_down(identifier_id) {\n    let position = this.identifiers.findIndex(function (identifier) {\n        return identifier.id == identifier_id;\n    });\n    if (position < this.identifiers.length - 1) {\n        this.identifiers = [].concat(this.identifiers.slice(0, position), this.identifiers.slice(position, position + 2).reverse(), this.identifiers.slice(position + 2));\n    }\n}\n\nfunction move_identifier_up(identifier_id) {\n    let position = this.identifiers.findIndex(function (identifier) {\n        return identifier.id == identifier_id;\n    });\n    if (position > 0) {\n        this.identifiers = [].concat(this.identifiers.slice(0, position - 1), this.identifiers.slice(position - 1, position + 1).reverse(), this.identifiers.slice(position + 1));\n    }\n}\n\nfunction remove_identifier(identifier_id) {\n    this.identifiers = this.identifiers.filter(function (identifier) {\n        return identifier.id !== identifier_id;\n    });\n}\n\nfunction update_identifier_type(payload) {\n    let identifier = this.identifiers.find(function (identifier) {\n        return identifier.id == payload.id;\n    });\n    identifier.type = payload.value;\n}\n\nfunction update_identifier_value(payload) {\n    let identifier = this.identifiers.find(function (identifier) {\n        return identifier.id == payload.id;\n    });\n    identifier.value = payload.value;\n}\n// CONCATENATED MODULE: ./src/IdentifiersHandlers.js\nfunction IdentifiersHandlers_add_identifier() {\n    this.identifiers.push({\n        type: \'\',\n        value: \'\'\n    });\n}\n\nfunction add_identifiers() {\n    this.identifiers = [];\n}\n\nfunction IdentifiersHandlers_move_identifier_down(identifier_id) {\n    let position = this.identifiers.findIndex(function (identifier) {\n        return identifier.id == identifier_id;\n    });\n    if (position < this.identifiers.length - 1) {\n        this.identifiers = [].concat(this.identifiers.slice(0, position), this.identifiers.slice(position, position + 2).reverse(), this.identifiers.slice(position + 2));\n    }\n}\n\nfunction IdentifiersHandlers_move_identifier_up(identifier_id) {\n    let position = this.identifiers.findIndex(function (identifier) {\n        return identifier.id == identifier_id;\n    });\n    if (position > 0) {\n        this.identifiers = [].concat(this.identifiers.slice(0, position - 1), this.identifiers.slice(position - 1, position + 1).reverse(), this.identifiers.slice(position + 1));\n    }\n}\n\nfunction IdentifiersHandlers_remove_identifier(identifier_id) {\n    this.identifiers = this.identifiers.filter(function (identifier) {\n        return identifier.id !== identifier_id;\n    });\n}\n\nfunction remove_identifiers() {\n    this.identifiers = undefined;\n}\n// CONCATENATED MODULE: ./src/KeywordHandlers.js\nfunction KeywordHandlers_add() {\n    this.keywords.push({\n        id: this.keyword_id += 1,\n        text: \'\'\n    });\n}\n\nfunction move_down(keyword_id) {\n    let position = this.keywords.findIndex(function (keyword) {\n        return keyword.id == keyword_id;\n    });\n    if (position < this.keywords.length - 1) {\n        this.keywords = [].concat(this.keywords.slice(0, position), this.keywords.slice(position, position + 2).reverse(), this.keywords.slice(position + 2));\n    }\n}\n\nfunction move_up(keyword_id) {\n    let position = this.keywords.findIndex(function (keyword) {\n        return keyword.id == keyword_id;\n    });\n    if (position > 0) {\n        this.keywords = [].concat(this.keywords.slice(0, position - 1), this.keywords.slice(position - 1, position + 1).reverse(), this.keywords.slice(position + 1));\n    }\n}\n\nfunction KeywordHandlers_remove(keyword_id) {\n    this.keywords = this.keywords.filter(function (keyword) {\n        return keyword.id !== keyword_id;\n    });\n}\n\nfunction KeywordHandlers_update(payload) {\n    let keyword = this.keywords.find(function (keyword) {\n        return keyword.id == payload.id;\n    });\n    keyword.text = payload.value;\n}\n// CONCATENATED MODULE: ./src/KeywordsHandlers.js\nfunction KeywordsHandlers_add() {\n    this.keywords = [];\n}\n\nfunction KeywordsHandlers_remove() {\n    this.keywords = undefined;\n}\n// CONCATENATED MODULE: ./src/DateReleasedHandlers.js\nfunction DateReleasedHandlers_add() {\n    this.date_released = "";\n}\n\nfunction DateReleasedHandlers_remove() {\n    this.date_released = undefined;\n}\n\nfunction DateReleasedHandlers_update(payload) {\n    this.date_released = payload.value;\n}\n// CONCATENATED MODULE: ./src/DoiHandlers.js\nfunction DoiHandlers_add() {\n    this.doi = "";\n}\n\nfunction DoiHandlers_remove() {\n    this.doi = undefined;\n}\n\nfunction DoiHandlers_update(payload) {\n    this.doi = payload.value;\n}\n// CONCATENATED MODULE: ./src/LicenseHandlers.js\nfunction LicenseHandlers_add() {\n    this.license = "";\n}\n\nfunction LicenseHandlers_remove() {\n    this.license = undefined;\n}\n\nfunction LicenseHandlers_update(payload) {\n    this.license = payload.value;\n}\n// CONCATENATED MODULE: ./src/RepositoryCodeHandlers.js\nfunction RepositoryCodeHandlers_add() {\n    this.repository_code = "";\n}\n\nfunction RepositoryCodeHandlers_remove() {\n    this.repository_code = undefined;\n}\n\nfunction RepositoryCodeHandlers_update(payload) {\n    this.repository_code = payload.value;\n}\n// CONCATENATED MODULE: ./src/compute_cff.js\nfunction add_quotes(s) {\n    function escape_quotes(s) {\n        return s.replace(/["]/g, \'\\\\"\');\n    }\n    let re = new RegExp(\'^[a-zA-Z0-9]{0,}$\');\n    if (re.test(s)) {\n        return s;\n    } else {\n        return \'"\' + escape_quotes(s) + \'"\';\n    }\n}\n\nfunction indent(s) {\n    return s.replace(/[\\n]/g, \'\\n    \');\n}\n\nfunction is_multiline(s) {\n    let re = new RegExp(\'[\\\\n|\\\\r]\');\n    return re.test(s);\n}\n\nfunction compute_cff() {\n    var lines = [];\n    lines.push(\'# YAML 1.2\');\n    lines.push(\'---\');\n    if (this.hasOwnProperty("abstract") && this.abstract !== undefined) {\n        if (is_multiline(this.abstract)) {\n            lines.push(\'abstract: |\\n    \' + indent(add_quotes(this.abstract)));\n        } else {\n            lines.push(\'abstract: \' + add_quotes(this.abstract));\n        }\n    }\n\n    lines.push(\'authors: \');\n    for (let author of this.authors) {\n        lines.push(\'  -\');\n\n        if (author.hasOwnProperty("affiliation") && author.affiliation !== undefined) {\n            lines.push(\'    affiliation: \' + add_quotes(author.affiliation));\n        }\n\n        lines.push(\'    family-names: \' + add_quotes(author.family_names));\n\n        lines.push(\'    given-names: \' + add_quotes(author.given_names));\n\n        if (author.hasOwnProperty("name_particle") && author.name_particle !== undefined) {\n            lines.push(\'    name-particle: \' + add_quotes(author.name_particle));\n        }\n\n        if (author.hasOwnProperty("name_suffix") && author.name_suffix !== undefined) {\n            lines.push(\'    name-suffix: \' + add_quotes(author.name_suffix));\n        }\n\n        if (author.hasOwnProperty("orcid") && author.orcid !== undefined) {\n            lines.push(\'    orcid: "https://orcid.org/\' + author.orcid + \'"\');\n        }\n    }\n    lines.push(\'cff-version: \' + add_quotes(this.cff_version));\n\n    if (this.date_released !== undefined) {\n        lines.push(\'date-released: \' + this.date_released);\n    }\n\n    if (this.doi !== undefined) {\n        lines.push(\'doi: \' + add_quotes(this.doi));\n    }\n\n    if (this.hasOwnProperty("identifiers") && this.identifiers !== undefined) {\n        lines.push(\'identifiers: \');\n        for (let identifier of this.identifiers) {\n            lines.push(\'  - \');\n            lines.push(\'    type: \' + add_quotes(identifier.type));\n            lines.push(\'    value: \' + add_quotes(identifier.value));\n        }\n    }\n\n    if (this.hasOwnProperty("keywords") && this.keywords !== undefined) {\n        lines.push(\'keywords: \');\n        for (let keyword of this.keywords) {\n            lines.push(\'  - \' + add_quotes(keyword.text));\n        }\n    }\n\n    if (this.license !== undefined) {\n        lines.push(\'license: \' + add_quotes(this.license));\n    }\n\n    if (is_multiline(this.message)) {\n        lines.push(\'message: |\\n    \' + indent(add_quotes(this.message)));\n    } else {\n        lines.push(\'message: \' + add_quotes(this.message));\n    }\n\n    if (this.repository_code !== undefined) {\n        lines.push(\'repository-code: \' + add_quotes(this.repository_code));\n    }\n\n    if (this.title !== undefined) {\n        lines.push(\'title: \' + add_quotes(this.title));\n    }\n\n    if (this.version !== undefined) {\n        lines.push(\'version: \' + add_quotes(this.version));\n    }\n\n    lines.push(\'...\');\n\n    return lines.join(\'\\n\');\n}\n// CONCATENATED MODULE: ./src/AuthorHandler.js\nfunction update_family_names(payload) {\n    let author = this.authors.find(function (author) {\n        return author.id == payload.id;\n    });\n    author.family_names = payload.value;\n}\n\nfunction update_given_names(payload) {\n    let author = this.authors.find(function (author) {\n        return author.id == payload.id;\n    });\n    author.given_names = payload.value;\n}\n// CONCATENATED MODULE: ./src/OrcidHandlers.js\nfunction OrcidHandlers_add(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.orcid = \'\';\n}\n\nfunction OrcidHandlers_remove(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.orcid = undefined;\n}\n\nfunction OrcidHandlers_update(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.orcid = payload.value;\n}\n// CONCATENATED MODULE: ./src/NameSuffixHandlers.js\nfunction NameSuffixHandlers_add(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_suffix = \'\';\n}\n\nfunction NameSuffixHandlers_remove(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_suffix = undefined;\n}\n\nfunction NameSuffixHandlers_update(payload) {\n    let author = this.authors.find(author => {\n        return author.id == payload.id;\n    });\n    author.name_suffix = payload.value;\n}\n// CONCATENATED MODULE: ./src/FormHandlers.js\nfunction update_cff_version(payload) {\n    this.cff_version = payload.value;\n}\n\nfunction update_date_released(payload) {\n    this.date_released = payload.value;\n}\n\nfunction update_doi(payload) {\n    this.doi = payload.value;\n}\n\nfunction update_message(payload) {\n    this.message = payload.value;\n}\n\nfunction update_license(payload) {\n    this.license = payload.value;\n}\n\nfunction update_repository_code(payload) {\n    this.repository_code = payload.value;\n}\n\nfunction update_title(payload) {\n    this.title = payload.value;\n}\n// CONCATENATED MODULE: ./src/download.js\n// based on https://thiscouldbebetter.wordpress.com/2012/12/18/loading-editing-and-saving-a-text-file-in-html5-using-javascrip/\nfunction save_text_as_file() {\n    var textToSave = document.getElementById(\'cfftext\').value;\n    var textToSaveAsBlob = new Blob([textToSave], { type: "text/plain" });\n    var textToSaveAsURL = window.URL.createObjectURL(textToSaveAsBlob);\n    var fileNameToSaveAs = \'CITATION.cff\';\n\n    var downloadLink = document.createElement("a");\n    downloadLink.download = fileNameToSaveAs;\n    downloadLink.innerHTML = "Download File";\n    downloadLink.href = textToSaveAsURL;\n    downloadLink.onclick = destroyClickedElement;\n    downloadLink.style.display = "none";\n    document.body.appendChild(downloadLink);\n\n    downloadLink.click();\n}\n\nfunction destroyClickedElement(event) {\n    document.body.removeChild(event.target);\n}\n// CONCATENATED MODULE: ./src/TitleHandlers.js\nfunction TitleHandlers_add() {\n    this.title = "";\n}\n\nfunction TitleHandlers_remove() {\n    this.title = undefined;\n}\n\nfunction TitleHandlers_update(payload) {\n    this.title = payload.value;\n}\n// CONCATENATED MODULE: ./src/VersionHandlers.js\nfunction VersionHandlers_add() {\n    this.version = "";\n}\n\nfunction VersionHandlers_remove() {\n    this.version = undefined;\n}\n\nfunction VersionHandlers_update(payload) {\n    this.version = payload.value;\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/CffText.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var CffText = ({\n    name: \'CffText\',\n    props: {\n        cff: String\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-7a33c047","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/CffText.vue\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("div", { staticClass: "cff" }, [\n    _c("textarea", {\n      directives: [\n        { name: "model", rawName: "v-model", value: _vm.cff, expression: "cff" }\n      ],\n      attrs: { id: "cfftext", readonly: "", tabindex: "-1" },\n      domProps: { value: _vm.cff },\n      on: {\n        input: function($event) {\n          if ($event.target.composing) {\n            return\n          }\n          _vm.cff = $event.target.value\n        }\n      }\n    })\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/component-normalizer.js\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === \'object\' || type === \'function\') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === \'function\'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== \'undefined\') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn\'t\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n// CONCATENATED MODULE: ./src/CffText.vue\nvar disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  __webpack_require__(9)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = normalizeComponent(\n  CffText,\n  render,\n  staticRenderFns,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = "src/CffText.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_CffText = (Component.exports);\n\n// CONCATENATED MODULE: ./src/CreativeWorkEmitters.js\nfunction add_abstract() {\n    this.$emit(\'add-abstract\');\n}\n\nfunction add_affiliation(payload) {\n    this.$emit(\'add-affiliation\', payload);\n}\n\nfunction CreativeWorkEmitters_add_author() {\n    this.$emit(\'add-author\');\n}\n\nfunction add_date_released() {\n    this.$emit(\'add-date-released\');\n}\n\nfunction add_doi() {\n    this.$emit(\'add-doi\');\n}\n\nfunction CreativeWorkEmitters_add_identifier() {\n    this.$emit(\'add-identifier\');\n}\n\nfunction CreativeWorkEmitters_add_identifiers() {\n    this.$emit(\'add-identifiers\');\n}\n\nfunction add_keyword() {\n    this.$emit(\'add-keyword\');\n}\n\nfunction add_keywords() {\n    this.$emit(\'add-keywords\');\n}\n\nfunction add_license() {\n    this.$emit(\'add-license\');\n}\n\nfunction add_name_particle(payload) {\n    this.$emit(\'add-name-particle\', payload);\n}\n\nfunction add_name_suffix(payload) {\n    this.$emit(\'add-name-suffix\', payload);\n}\n\nfunction add_orcid(payload) {\n    this.$emit(\'add-orcid\', payload);\n}\n\nfunction add_repository_code() {\n    this.$emit(\'add-repository-code\');\n}\n\nfunction add_title() {\n    this.$emit(\'add-title\');\n}\n\nfunction add_version() {\n    this.$emit(\'add-version\');\n}\n\nfunction CreativeWorkEmitters_move_author_down(author_id) {\n    this.$emit(\'move-author-down\', author_id);\n}\n\nfunction CreativeWorkEmitters_move_author_up(author_id) {\n    this.$emit(\'move-author-up\', author_id);\n}\n\nfunction CreativeWorkEmitters_move_identifier_down(identifier_id) {\n    this.$emit(\'move-identifier-down\', identifier_id);\n}\n\nfunction CreativeWorkEmitters_move_identifier_up(identifier_id) {\n    this.$emit(\'move-identifier-up\', identifier_id);\n}\n\nfunction move_keyword_down(keyword_id) {\n    this.$emit(\'move-keyword-down\', keyword_id);\n}\n\nfunction move_keyword_up(keyword_id) {\n    this.$emit(\'move-keyword-up\', keyword_id);\n}\n\nfunction remove_abstract() {\n    this.$emit(\'remove-abstract\');\n}\n\nfunction CreativeWorkEmitters_remove_author(author_id) {\n    this.$emit(\'remove-author\', author_id);\n}\n\nfunction remove_affiliation(payload) {\n    this.$emit(\'remove-affiliation\', payload);\n}\n\nfunction CreativeWorkEmitters_remove_identifier(identifier_id) {\n    this.$emit(\'remove-identifier\', identifier_id);\n}\n\nfunction CreativeWorkEmitters_remove_identifiers() {\n    this.$emit(\'remove-identifiers\');\n}\n\nfunction remove_keyword(keyword_id) {\n    this.$emit(\'remove-keyword\', keyword_id);\n}\n\nfunction remove_keywords() {\n    this.$emit(\'remove-keywords\');\n}\n\nfunction remove_date_released() {\n    this.$emit(\'remove-date-released\');\n}\n\nfunction remove_doi() {\n    this.$emit(\'remove-doi\');\n}\n\nfunction remove_license() {\n    this.$emit(\'remove-license\');\n}\n\nfunction remove_name_particle(payload) {\n    this.$emit(\'remove-name-particle\', payload);\n}\n\nfunction remove_name_suffix(payload) {\n    this.$emit(\'remove-name-suffix\', payload);\n}\n\nfunction remove_orcid(payload) {\n    this.$emit(\'remove-orcid\', payload);\n}\n\nfunction remove_repository_code() {\n    this.$emit(\'remove-repository-code\');\n}\n\nfunction remove_title() {\n    this.$emit(\'remove-title\');\n}\n\nfunction remove_version() {\n    this.$emit(\'remove-version\');\n}\n\nfunction update_abstract(payload) {\n    this.$emit(\'update-abstract\', payload);\n}\n\nfunction CreativeWorkEmitters_update_given_names(payload) {\n    this.$emit(\'update-given-names\', payload);\n}\n\nfunction update_name_particle(payload) {\n    this.$emit(\'update-name-particle\', payload);\n}\n\nfunction CreativeWorkEmitters_update_family_names(payload) {\n    this.$emit(\'update-family-names\', payload);\n}\n\nfunction update_name_suffix(payload) {\n    this.$emit(\'update-name-suffix\', payload);\n}\n\nfunction update_orcid(payload) {\n    this.$emit(\'update-orcid\', payload);\n}\n\nfunction update_affiliation(payload) {\n    this.$emit(\'update-affiliation\', payload);\n}\n\nfunction CreativeWorkEmitters_update_date_released(payload) {\n    this.$emit(\'update-date-released\', payload);\n}\n\nfunction CreativeWorkEmitters_update_doi(payload) {\n    this.$emit(\'update-doi\', payload);\n}\n\nfunction CreativeWorkEmitters_update_identifier_type(payload) {\n    this.$emit(\'update-identifier-type\', payload);\n}\n\nfunction CreativeWorkEmitters_update_identifier_value(payload) {\n    this.$emit(\'update-identifier-value\', payload);\n}\n\nfunction update_keyword(payload) {\n    this.$emit(\'update-keyword\', payload);\n}\n\nfunction CreativeWorkEmitters_update_license(payload) {\n    this.$emit(\'update-license\', payload);\n}\n\nfunction CreativeWorkEmitters_update_repository_code(payload) {\n    this.$emit(\'update-repository-code\', payload);\n}\n\nfunction CreativeWorkEmitters_update_title(payload) {\n    this.$emit(\'update-title\', payload);\n}\n\nfunction update_version(payload) {\n    this.$emit(\'update-version\', payload);\n}\n// CONCATENATED MODULE: ./src/AuthorsEmitters.js\nfunction AuthorsEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction AuthorsEmitters_add_affiliation(payload) {\n    this.$emit(\'add-affiliation\', payload);\n}\n\nfunction AuthorsEmitters_add_name_particle(payload) {\n    this.$emit(\'add-name-particle\', payload);\n}\n\nfunction AuthorsEmitters_add_name_suffix(payload) {\n    this.$emit(\'add-name-suffix\', payload);\n}\n\nfunction AuthorsEmitters_add_orcid(payload) {\n    this.$emit(\'add-orcid\', payload);\n}\n\nfunction AuthorsEmitters_move_down(author_id) {\n    this.$emit(\'move-down\', author_id);\n}\n\nfunction AuthorsEmitters_move_up(author_id) {\n    this.$emit(\'move-up\', author_id);\n}\n\nfunction AuthorsEmitters_remove(author_id) {\n    this.$emit(\'remove\', author_id);\n}\n\nfunction AuthorsEmitters_remove_affiliation(payload) {\n    this.$emit(\'remove-affiliation\', payload);\n}\n\nfunction AuthorsEmitters_remove_name_particle(payload) {\n    this.$emit(\'remove-name-particle\', payload);\n}\n\nfunction AuthorsEmitters_remove_name_suffix(payload) {\n    this.$emit(\'remove-name-suffix\', payload);\n}\n\nfunction AuthorsEmitters_remove_orcid(payload) {\n    this.$emit(\'remove-orcid\', payload);\n}\n\nfunction AuthorsEmitters_update_affiliation(payload) {\n    this.$emit(\'update-affiliation\', payload);\n}\n\nfunction AuthorsEmitters_update_family_names(payload) {\n    this.$emit(\'update-family-names\', payload);\n}\n\nfunction AuthorsEmitters_update_given_names(payload) {\n    this.$emit(\'update-given-names\', payload);\n}\n\nfunction AuthorsEmitters_update_name_particle(payload) {\n    this.$emit(\'update-name-particle\', payload);\n}\n\nfunction AuthorsEmitters_update_name_suffix(payload) {\n    this.$emit(\'update-name-suffix\', payload);\n}\n\nfunction AuthorsEmitters_update_orcid(payload) {\n    this.$emit(\'update-orcid\', payload);\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/HelpText.vue\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var HelpText = ({\n    name: \'HelpText\',\n    components: {},\n    props: {\n        text: String,\n        url: String\n    },\n    computed: {},\n    methods: {}\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-f2e153f2","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/HelpText.vue\nvar HelpText_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("p", { staticClass: "help-text" }, [\n    _vm._v("\\n    " + _vm._s(_vm.text) + "\\n    "),\n    _c(\n      "a",\n      { staticClass: "spec-link", attrs: { target: "docs", href: _vm.url } },\n      [_vm._v("(spec)")]\n    )\n  ])\n}\nvar HelpText_staticRenderFns = []\nHelpText_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/HelpText.vue\nvar HelpText_disposed = false\nfunction HelpText_injectStyle (context) {\n  if (HelpText_disposed) return\n  __webpack_require__(21)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar HelpText_vue_template_functional_ = false\n/* styles */\nvar HelpText_vue_styles_ = HelpText_injectStyle\n/* scopeId */\nvar HelpText_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar HelpText_vue_module_identifier_ = null\n\nvar HelpText_Component = normalizeComponent(\n  HelpText,\n  HelpText_render,\n  HelpText_staticRenderFns,\n  HelpText_vue_template_functional_,\n  HelpText_vue_styles_,\n  HelpText_vue_scopeId_,\n  HelpText_vue_module_identifier_\n)\nHelpText_Component.options.__file = "src/HelpText.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_HelpText = (HelpText_Component.exports);\n\n// CONCATENATED MODULE: ./src/AffiliationEmitters.js\nfunction AffiliationEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction AffiliationEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction AffiliationEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/AffiliationValidators.js\nfunction validate() {\n    return {\n        error: this.affiliation == \'\',\n        msg: "Please enter a valid string or remove the property entirely."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Affiliation.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var Affiliation = ({\n    name: \'Affiliation\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        affiliation: String\n    },\n    computed: {\n        has_affiliation: function () {\n            return this.$props.hasOwnProperty(\'affiliation\') && this.$props.affiliation !== undefined;\n        },\n        validation: validate\n    },\n    methods: {\n        add: AffiliationEmitters_add,\n        remove: AffiliationEmitters_remove,\n        update: AffiliationEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-1b30bb87","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Affiliation.vue\nvar Affiliation_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_affiliation\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        affiliation\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove affiliation" },\n                on: { click: _vm.remove }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text:\n                "To specify the affiliation of a person, e.g., a university, research centre, etc.",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2"\n            }\n          }),\n          _vm._v(" "),\n          _c("input", {\n            class: { error: _vm.validation.error },\n            attrs: { type: "text" },\n            domProps: { value: _vm.affiliation },\n            on: {\n              input: function($event) {\n                _vm.update($event)\n              }\n            }\n          }),\n          _vm._v(" "),\n          _vm.validation.error\n            ? _c("p", { staticClass: "message" }, [\n                _vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add affiliation" },\n            on: { click: _vm.add }\n          },\n          [_vm._v("\\n        Add affiliation\\n    ")]\n        )\n      ])\n}\nvar Affiliation_staticRenderFns = []\nAffiliation_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Affiliation.vue\nvar Affiliation_disposed = false\nfunction Affiliation_injectStyle (context) {\n  if (Affiliation_disposed) return\n  __webpack_require__(19)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Affiliation_vue_template_functional_ = false\n/* styles */\nvar Affiliation_vue_styles_ = Affiliation_injectStyle\n/* scopeId */\nvar Affiliation_vue_scopeId_ = "data-v-1b30bb87"\n/* moduleIdentifier (server only) */\nvar Affiliation_vue_module_identifier_ = null\n\nvar Affiliation_Component = normalizeComponent(\n  Affiliation,\n  Affiliation_render,\n  Affiliation_staticRenderFns,\n  Affiliation_vue_template_functional_,\n  Affiliation_vue_styles_,\n  Affiliation_vue_scopeId_,\n  Affiliation_vue_module_identifier_\n)\nAffiliation_Component.options.__file = "src/Affiliation.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Affiliation = (Affiliation_Component.exports);\n\n// CONCATENATED MODULE: ./src/OrcidEmitters.js\nfunction OrcidEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction OrcidEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction OrcidEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/OrcidValidators.js\nfunction OrcidValidators_validate() {\n    let re = new RegExp(\'^[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[0-9X]$\');\n    return {\n        error: !re.test(this.orcid),\n        msg: "Should have the format 0000-0000-0000-0000"\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Orcid.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var Orcid = ({\n    name: \'Orcid\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        orcid: String\n    },\n    computed: {\n        has_orcid: function () {\n            return this.$props.hasOwnProperty(\'orcid\') && this.$props.orcid !== undefined;\n        },\n        validation: OrcidValidators_validate\n    },\n    methods: {\n        add: OrcidEmitters_add,\n        remove: OrcidEmitters_remove,\n        update: OrcidEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-ea6d2b5c","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Orcid.vue\nvar Orcid_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_orcid\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        orcid\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove orcid" },\n                on: { click: _vm.remove }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text: "The person\'s ORCID iD.",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-1"\n            }\n          }),\n          _vm._v(" "),\n          _c("input", {\n            class: { error: _vm.validation.error },\n            domProps: { value: _vm.orcid },\n            on: {\n              input: function($event) {\n                _vm.update($event)\n              }\n            }\n          }),\n          _vm._v(" "),\n          _vm.validation.error\n            ? _c("p", { staticClass: "message" }, [\n                _vm._v("\\n            " + _vm._s(_vm.validation.msg) + "\\n    ")\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add orcid" },\n            on: { click: _vm.add }\n          },\n          [_vm._v("\\n        Add orcid\\n    ")]\n        )\n      ])\n}\nvar Orcid_staticRenderFns = []\nOrcid_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Orcid.vue\nvar Orcid_disposed = false\nfunction Orcid_injectStyle (context) {\n  if (Orcid_disposed) return\n  __webpack_require__(23)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Orcid_vue_template_functional_ = false\n/* styles */\nvar Orcid_vue_styles_ = Orcid_injectStyle\n/* scopeId */\nvar Orcid_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Orcid_vue_module_identifier_ = null\n\nvar Orcid_Component = normalizeComponent(\n  Orcid,\n  Orcid_render,\n  Orcid_staticRenderFns,\n  Orcid_vue_template_functional_,\n  Orcid_vue_styles_,\n  Orcid_vue_scopeId_,\n  Orcid_vue_module_identifier_\n)\nOrcid_Component.options.__file = "src/Orcid.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Orcid = (Orcid_Component.exports);\n\n// CONCATENATED MODULE: ./src/NameParticleEmitters.js\nfunction NameParticleEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction NameParticleEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction NameParticleEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/NameParticleValidators.js\nfunction NameParticleValidators_validate() {\n    return {\n        error: this.name_particle == \'\',\n        msg: "Please enter a valid string or remove the property entirely."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/NameParticle.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var NameParticle = ({\n    name: \'NameParticle\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        name_particle: String\n    },\n    computed: {\n        has_name_particle: function () {\n            return this.$props.hasOwnProperty(\'name_particle\') && this.$props.name_particle !== undefined;\n        },\n        validation: NameParticleValidators_validate\n    },\n    methods: {\n        add: NameParticleEmitters_add,\n        remove: NameParticleEmitters_remove,\n        update: NameParticleEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-9fedf3ac","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/NameParticle.vue\nvar NameParticle_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_name_particle\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        name-particle\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove name-particle" },\n                on: { click: _vm.remove }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text:\n                "Specify nobiliary particles and prepositions, such as in Ludwig van Beethoven or Rafael van der Vaart.",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2"\n            }\n          }),\n          _vm._v(" "),\n          _c("input", {\n            class: { error: _vm.validation.error },\n            attrs: { type: "text" },\n            domProps: { value: _vm.name_particle },\n            on: {\n              input: function($event) {\n                _vm.update($event)\n              }\n            }\n          }),\n          _vm._v(" "),\n          _vm.validation.error\n            ? _c("p", { staticClass: "message" }, [\n                _vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add name-particle" },\n            on: { click: _vm.add }\n          },\n          [_vm._v("\\n        Add name-particle\\n    ")]\n        )\n      ])\n}\nvar NameParticle_staticRenderFns = []\nNameParticle_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/NameParticle.vue\nvar NameParticle_disposed = false\nfunction NameParticle_injectStyle (context) {\n  if (NameParticle_disposed) return\n  __webpack_require__(25)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar NameParticle_vue_template_functional_ = false\n/* styles */\nvar NameParticle_vue_styles_ = NameParticle_injectStyle\n/* scopeId */\nvar NameParticle_vue_scopeId_ = "data-v-9fedf3ac"\n/* moduleIdentifier (server only) */\nvar NameParticle_vue_module_identifier_ = null\n\nvar NameParticle_Component = normalizeComponent(\n  NameParticle,\n  NameParticle_render,\n  NameParticle_staticRenderFns,\n  NameParticle_vue_template_functional_,\n  NameParticle_vue_styles_,\n  NameParticle_vue_scopeId_,\n  NameParticle_vue_module_identifier_\n)\nNameParticle_Component.options.__file = "src/NameParticle.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_NameParticle = (NameParticle_Component.exports);\n\n// CONCATENATED MODULE: ./src/NameSuffixEmitters.js\nfunction NameSuffixEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction NameSuffixEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction NameSuffixEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/NameSuffixValidators.js\nfunction NameSuffixValidators_validate() {\n    return {\n        error: this.name_suffix == \'\',\n        msg: "Please enter a valid string or remove the property entirely."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/NameSuffix.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var NameSuffix = ({\n    name: \'NameSuffix\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        name_suffix: String\n    },\n    computed: {\n        has_name_suffix: function () {\n            return this.$props.hasOwnProperty(\'name_suffix\') && this.$props.name_suffix !== undefined;\n        },\n        validation: NameSuffixValidators_validate\n    },\n    methods: {\n        add: NameSuffixEmitters_add,\n        remove: NameSuffixEmitters_remove,\n        update: NameSuffixEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-555c7716","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/NameSuffix.vue\nvar NameSuffix_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_name_suffix\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        name-suffix\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove name-suffix" },\n                on: { click: _vm.remove }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text: "Specify suffixes such as Jr. or III.",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2"\n            }\n          }),\n          _vm._v(" "),\n          _c("input", {\n            class: { error: _vm.validation.error },\n            attrs: { type: "text" },\n            domProps: { value: _vm.name_suffix },\n            on: {\n              input: function($event) {\n                _vm.update($event)\n              }\n            }\n          }),\n          _vm._v(" "),\n          _vm.validation.error\n            ? _c("p", { staticClass: "message" }, [\n                _vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add name-suffix" },\n            on: { click: _vm.add }\n          },\n          [_vm._v("\\n        Add name-suffix\\n    ")]\n        )\n      ])\n}\nvar NameSuffix_staticRenderFns = []\nNameSuffix_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/NameSuffix.vue\nvar NameSuffix_disposed = false\nfunction NameSuffix_injectStyle (context) {\n  if (NameSuffix_disposed) return\n  __webpack_require__(27)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar NameSuffix_vue_template_functional_ = false\n/* styles */\nvar NameSuffix_vue_styles_ = NameSuffix_injectStyle\n/* scopeId */\nvar NameSuffix_vue_scopeId_ = "data-v-555c7716"\n/* moduleIdentifier (server only) */\nvar NameSuffix_vue_module_identifier_ = null\n\nvar NameSuffix_Component = normalizeComponent(\n  NameSuffix,\n  NameSuffix_render,\n  NameSuffix_staticRenderFns,\n  NameSuffix_vue_template_functional_,\n  NameSuffix_vue_styles_,\n  NameSuffix_vue_scopeId_,\n  NameSuffix_vue_module_identifier_\n)\nNameSuffix_Component.options.__file = "src/NameSuffix.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_NameSuffix = (NameSuffix_Component.exports);\n\n// CONCATENATED MODULE: ./src/AuthorEmitters.js\nfunction AuthorEmitters_add_affiliation() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'add-affiliation\', payload);\n}\n\nfunction AuthorEmitters_add_orcid() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'add-orcid\', payload);\n}\n\nfunction AuthorEmitters_add_name_particle() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'add-name-particle\', payload);\n}\n\nfunction AuthorEmitters_add_name_suffix() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'add-name-suffix\', payload);\n}\n\nfunction AuthorEmitters_remove() {\n    this.$emit(\'remove\', this.author.id);\n}\n\nfunction AuthorEmitters_remove_affiliation() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'remove-affiliation\', payload);\n}\n\nfunction AuthorEmitters_remove_orcid() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'remove-orcid\', payload);\n}\n\nfunction AuthorEmitters_remove_name_particle() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'remove-name-particle\', payload);\n}\n\nfunction AuthorEmitters_remove_name_suffix() {\n    let payload = { "id": this.author.id };\n    this.$emit(\'remove-name-suffix\', payload);\n}\n\nfunction AuthorEmitters_move_down() {\n    this.$emit(\'move-down\', this.author.id);\n}\n\nfunction AuthorEmitters_move_up() {\n    this.$emit(\'move-up\', this.author.id);\n}\n\nfunction AuthorEmitters_update_affiliation(old_payload) {\n    let new_payload = Object.assign(old_payload, { "id": this.author.id });\n    this.$emit(\'update-affiliation\', new_payload);\n}\n\nfunction AuthorEmitters_update_family_names(event) {\n    let payload = {\n        id: this.author.id,\n        value: event.target.value\n    };\n    this.$emit(\'update-family-names\', payload);\n}\n\nfunction AuthorEmitters_update_given_names(event) {\n    let payload = {\n        id: this.author.id,\n        value: event.target.value\n    };\n    this.$emit(\'update-given-names\', payload);\n}\n\nfunction AuthorEmitters_update_name_particle(old_payload) {\n    let new_payload = Object.assign(old_payload, { id: this.author.id });\n    this.$emit(\'update-name-particle\', new_payload);\n}\n\nfunction AuthorEmitters_update_name_suffix(old_payload) {\n    let new_payload = Object.assign(old_payload, { id: this.author.id });\n    this.$emit(\'update-name-suffix\', new_payload);\n}\n\nfunction AuthorEmitters_update_orcid(old_payload) {\n    let new_payload = Object.assign(old_payload, { "id": this.author.id });\n    this.$emit(\'update-orcid\', new_payload);\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Author.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var Author = ({\n    name: \'Author\',\n    components: {\n        Affiliation: src_Affiliation,\n        AuthorOrcid: src_Orcid,\n        HelpText: src_HelpText,\n        NameParticle: src_NameParticle,\n        NameSuffix: src_NameSuffix\n    },\n    props: {\n        author: Object\n    },\n    computed: {\n        fullname: function () {\n            let name_parts = [];\n            if (this.author.hasOwnProperty(\'given_names\') && this.author.given_names !== \'\') {\n                name_parts.push(this.author.given_names);\n            }\n            if (this.author.hasOwnProperty(\'name_particle\') && this.author.name_particle !== \'\') {\n                name_parts.push(this.author.name_particle);\n            }\n            if (this.author.hasOwnProperty(\'family_names\') && this.author.family_names !== \'\') {\n                name_parts.push(this.author.family_names);\n            }\n            if (this.author.hasOwnProperty(\'name_suffix\') && this.author.name_suffix !== \'\') {\n                name_parts.push(this.author.name_suffix);\n            }\n            return name_parts.join(\' \');\n        }\n    },\n    methods: {\n        add_affiliation: AuthorEmitters_add_affiliation,\n        add_orcid: AuthorEmitters_add_orcid,\n        add_name_particle: AuthorEmitters_add_name_particle,\n        add_name_suffix: AuthorEmitters_add_name_suffix,\n        remove: AuthorEmitters_remove,\n        remove_affiliation: AuthorEmitters_remove_affiliation,\n        remove_orcid: AuthorEmitters_remove_orcid,\n        remove_name_particle: AuthorEmitters_remove_name_particle,\n        remove_name_suffix: AuthorEmitters_remove_name_suffix,\n        move_down: AuthorEmitters_move_down,\n        move_up: AuthorEmitters_move_up,\n        update_affiliation: AuthorEmitters_update_affiliation,\n        update_family_names: AuthorEmitters_update_family_names,\n        update_given_names: AuthorEmitters_update_given_names,\n        update_name_particle: AuthorEmitters_update_name_particle,\n        update_name_suffix: AuthorEmitters_update_name_suffix,\n        update_orcid: AuthorEmitters_update_orcid\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-12c4d578","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Author.vue\nvar Author_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("li", [\n    _c(\n      "button",\n      {\n        staticClass: "remove-button",\n        attrs: { tabindex: "-1", title: "Remove this author" },\n        on: { click: _vm.remove }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n        -\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c(\n      "button",\n      {\n        staticClass: "move-up-button",\n        attrs: { tabindex: "-1", title: "Move this author up" },\n        on: { click: _vm.move_up }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n            ▲\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c(\n      "button",\n      {\n        staticClass: "move-down-button",\n        attrs: { tabindex: "-1", title: "Move this author down" },\n        on: { click: _vm.move_down }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n            ▼\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c("p", [_vm._v("\\n        " + _vm._s(_vm.fullname) + "\\n    ")]),\n    _vm._v(" "),\n    _c(\n      "ul",\n      [\n        _c("Affiliation", {\n          attrs: { affiliation: _vm.author.affiliation },\n          on: {\n            add: _vm.add_affiliation,\n            remove: _vm.remove_affiliation,\n            update: _vm.update_affiliation\n          }\n        }),\n        _vm._v(" "),\n        _c(\n          "li",\n          [\n            _c("p", { staticClass: "caption" }, [\n              _vm._v("\\n                given-names\\n            ")\n            ]),\n            _vm._v(" "),\n            _c("HelpText", {\n              attrs: {\n                text: "Specify given and any other names.",\n                url:\n                  "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2"\n              }\n            }),\n            _vm._v(" "),\n            _c("input", {\n              domProps: { value: _vm.author.given_names },\n              on: {\n                input: function($event) {\n                  _vm.update_given_names($event)\n                }\n              }\n            })\n          ],\n          1\n        ),\n        _vm._v(" "),\n        _c("NameParticle", {\n          attrs: { name_particle: _vm.author.name_particle },\n          on: {\n            add: _vm.add_name_particle,\n            remove: _vm.remove_name_particle,\n            update: _vm.update_name_particle\n          }\n        }),\n        _vm._v(" "),\n        _c(\n          "li",\n          [\n            _c("p", { staticClass: "caption" }, [\n              _vm._v("\\n                family-names\\n            ")\n            ]),\n            _vm._v(" "),\n            _c("HelpText", {\n              attrs: {\n                text:\n                  "Specify family names, including combinations of given and patronymic forms.",\n                url:\n                  "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#exemplary-uses-2"\n              }\n            }),\n            _vm._v(" "),\n            _c("input", {\n              domProps: { value: _vm.author.family_names },\n              on: {\n                input: function($event) {\n                  _vm.update_family_names($event)\n                }\n              }\n            })\n          ],\n          1\n        ),\n        _vm._v(" "),\n        _c("NameSuffix", {\n          attrs: { name_suffix: _vm.author.name_suffix },\n          on: {\n            add: _vm.add_name_suffix,\n            remove: _vm.remove_name_suffix,\n            update: _vm.update_name_suffix\n          }\n        }),\n        _vm._v(" "),\n        _c("AuthorOrcid", {\n          attrs: { orcid: _vm.author.orcid },\n          on: {\n            add: _vm.add_orcid,\n            remove: _vm.remove_orcid,\n            update: _vm.update_orcid\n          }\n        })\n      ],\n      1\n    )\n  ])\n}\nvar Author_staticRenderFns = []\nAuthor_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Author.vue\nvar Author_disposed = false\nfunction Author_injectStyle (context) {\n  if (Author_disposed) return\n  __webpack_require__(17)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Author_vue_template_functional_ = false\n/* styles */\nvar Author_vue_styles_ = Author_injectStyle\n/* scopeId */\nvar Author_vue_scopeId_ = "data-v-12c4d578"\n/* moduleIdentifier (server only) */\nvar Author_vue_module_identifier_ = null\n\nvar Author_Component = normalizeComponent(\n  Author,\n  Author_render,\n  Author_staticRenderFns,\n  Author_vue_template_functional_,\n  Author_vue_styles_,\n  Author_vue_scopeId_,\n  Author_vue_module_identifier_\n)\nAuthor_Component.options.__file = "src/Author.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Author = (Author_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Authors.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var Authors = ({\n    name: \'Authors\',\n    components: {\n        Author: src_Author,\n        HelpText: src_HelpText\n    },\n    props: {\n        authors: Array\n    },\n    methods: {\n        add: AuthorsEmitters_add,\n        add_affiliation: AuthorsEmitters_add_affiliation,\n        add_name_particle: AuthorsEmitters_add_name_particle,\n        add_name_suffix: AuthorsEmitters_add_name_suffix,\n        add_orcid: AuthorsEmitters_add_orcid,\n        move_down: AuthorsEmitters_move_down,\n        move_up: AuthorsEmitters_move_up,\n        remove: AuthorsEmitters_remove,\n        remove_affiliation: AuthorsEmitters_remove_affiliation,\n        remove_name_particle: AuthorsEmitters_remove_name_particle,\n        remove_name_suffix: AuthorsEmitters_remove_name_suffix,\n        remove_orcid: AuthorsEmitters_remove_orcid,\n        update_affiliation: AuthorsEmitters_update_affiliation,\n        update_family_names: AuthorsEmitters_update_family_names,\n        update_given_names: AuthorsEmitters_update_given_names,\n        update_name_particle: AuthorsEmitters_update_name_particle,\n        update_name_suffix: AuthorsEmitters_update_name_suffix,\n        update_orcid: AuthorsEmitters_update_orcid\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-3e7e9742","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Authors.vue\nvar Authors_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c("p", { staticClass: "caption" }, [\n        _vm._v("\\n        authors\\n        "),\n        _c(\n          "button",\n          {\n            staticClass: "add-button",\n            attrs: { tabindex: "-1", title: "Add author" },\n            on: { click: _vm.add }\n          },\n          [\n            _c("div", { staticClass: "button-spacer" }, [\n              _vm._v("\\n                +\\n            ")\n            ])\n          ]\n        )\n      ]),\n      _vm._v(" "),\n      _c("HelpText", {\n        attrs: {\n          text: "The author(s) of the software",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "ul",\n        { staticClass: "authors" },\n        _vm._l(_vm.authors, function(author) {\n          return _c("Author", {\n            key: author.id,\n            attrs: { author: author },\n            on: {\n              "add-affiliation": _vm.add_affiliation,\n              "add-name-particle": _vm.add_name_particle,\n              "add-name-suffix": _vm.add_name_suffix,\n              "add-orcid": _vm.add_orcid,\n              "move-down": _vm.move_down,\n              "move-up": _vm.move_up,\n              remove: _vm.remove,\n              "remove-affiliation": _vm.remove_affiliation,\n              "remove-name-particle": _vm.remove_name_particle,\n              "remove-name-suffix": _vm.remove_name_suffix,\n              "remove-orcid": _vm.remove_orcid,\n              "update-affiliation": _vm.update_affiliation,\n              "update-family-names": _vm.update_family_names,\n              "update-given-names": _vm.update_given_names,\n              "update-name-particle": _vm.update_name_particle,\n              "update-name-suffix": _vm.update_name_suffix,\n              "update-orcid": _vm.update_orcid\n            }\n          })\n        })\n      )\n    ],\n    1\n  )\n}\nvar Authors_staticRenderFns = []\nAuthors_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Authors.vue\nvar Authors_disposed = false\nfunction Authors_injectStyle (context) {\n  if (Authors_disposed) return\n  __webpack_require__(15)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Authors_vue_template_functional_ = false\n/* styles */\nvar Authors_vue_styles_ = Authors_injectStyle\n/* scopeId */\nvar Authors_vue_scopeId_ = "data-v-3e7e9742"\n/* moduleIdentifier (server only) */\nvar Authors_vue_module_identifier_ = null\n\nvar Authors_Component = normalizeComponent(\n  Authors,\n  Authors_render,\n  Authors_staticRenderFns,\n  Authors_vue_template_functional_,\n  Authors_vue_styles_,\n  Authors_vue_scopeId_,\n  Authors_vue_module_identifier_\n)\nAuthors_Component.options.__file = "src/Authors.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Authors = (Authors_Component.exports);\n\n// CONCATENATED MODULE: ./src/AbstractEmitters.js\nfunction AbstractEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction AbstractEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction AbstractEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/AbstractValidators.js\nfunction AbstractValidators_validate() {\n    return {\n        error: this.abstract == \'\',\n        msg: "Please enter a valid string or remove the property entirely."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Abstract.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var Abstract = ({\n    name: \'Abstract\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        abstract: String\n    },\n    computed: {\n        has_abstract: function () {\n            return this.$props.hasOwnProperty(\'abstract\') && this.$props.abstract !== undefined;\n        },\n        validation: AbstractValidators_validate\n    },\n    methods: {\n        add: AbstractEmitters_add,\n        remove: AbstractEmitters_remove,\n        update: AbstractEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-73e3c7ca","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Abstract.vue\nvar Abstract_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_abstract\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        abstract\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove abstract" },\n                on: { click: _vm.remove }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text: "A description of the software (version)",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n            }\n          }),\n          _vm._v(" "),\n          _c("textarea", {\n            class: { error: _vm.validation.error },\n            domProps: { value: _vm.abstract },\n            on: {\n              input: function($event) {\n                _vm.update($event)\n              }\n            }\n          }),\n          _vm._v(" "),\n          _vm.validation.error\n            ? _c("p", { staticClass: "message" }, [\n                _vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")\n              ])\n            : _vm._e()\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add abstract" },\n            on: { click: _vm.add }\n          },\n          [_vm._v("\\n        Add abstract\\n    ")]\n        )\n      ])\n}\nvar Abstract_staticRenderFns = []\nAbstract_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Abstract.vue\nvar Abstract_disposed = false\nfunction Abstract_injectStyle (context) {\n  if (Abstract_disposed) return\n  __webpack_require__(29)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Abstract_vue_template_functional_ = false\n/* styles */\nvar Abstract_vue_styles_ = Abstract_injectStyle\n/* scopeId */\nvar Abstract_vue_scopeId_ = "data-v-73e3c7ca"\n/* moduleIdentifier (server only) */\nvar Abstract_vue_module_identifier_ = null\n\nvar Abstract_Component = normalizeComponent(\n  Abstract,\n  Abstract_render,\n  Abstract_staticRenderFns,\n  Abstract_vue_template_functional_,\n  Abstract_vue_styles_,\n  Abstract_vue_scopeId_,\n  Abstract_vue_module_identifier_\n)\nAbstract_Component.options.__file = "src/Abstract.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Abstract = (Abstract_Component.exports);\n\n// CONCATENATED MODULE: ./src/DateReleasedEmitters.js\nfunction DateReleasedEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction DateReleasedEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction DateReleasedEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/DateReleasedValidators.js\nfunction DateReleasedValidators_validate() {\n    let yyyy = \'[0-9]{4}\';\n    let mm = \'(0[1-9]|1[0-2])\';\n    let dd = \'(0[1-9]|1[0-9]|2[0-9]|3[0-1])\';\n    let re = new RegExp(\'^\' + yyyy + \'-\' + mm + \'-\' + dd + \'$\');\n    return {\n        error: !re.test(this.date_released),\n        msg: "Use the yyyy-mm-dd format."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/DateReleased.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var DateReleased = ({\n    name: \'DateReleased\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        date_released: String\n    },\n    computed: {\n        has_date_released: function () {\n            return this.$props.hasOwnProperty(\'date_released\') && this.$props.date_released !== undefined;\n        },\n        validation: DateReleasedValidators_validate\n    },\n    methods: {\n        add: DateReleasedEmitters_add,\n        remove: DateReleasedEmitters_remove,\n        update: DateReleasedEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-09fc1604","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/DateReleased.vue\nvar DateReleased_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_date_released,\n              expression: "has_date_released"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        date-released\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_date_released,\n                  expression: "has_date_released"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove date-released" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("\\n            remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_date_released,\n            expression: "has_date_released"\n          }\n        ],\n        attrs: {\n          text: "The release date of the software version.",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_date_released,\n              expression: "!has_date_released"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add date-released" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add date-released\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_date_released,\n            expression: "has_date_released"\n          }\n        ],\n        class: { error: _vm.validation.error },\n        attrs: { type: "text" },\n        domProps: { value: _vm.date_released },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.validation.error\n        ? _c(\n            "p",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_date_released,\n                  expression: "has_date_released"\n                }\n              ],\n              staticClass: "message"\n            },\n            [_vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")]\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar DateReleased_staticRenderFns = []\nDateReleased_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/DateReleased.vue\nvar DateReleased_disposed = false\nfunction DateReleased_injectStyle (context) {\n  if (DateReleased_disposed) return\n  __webpack_require__(31)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar DateReleased_vue_template_functional_ = false\n/* styles */\nvar DateReleased_vue_styles_ = DateReleased_injectStyle\n/* scopeId */\nvar DateReleased_vue_scopeId_ = "data-v-09fc1604"\n/* moduleIdentifier (server only) */\nvar DateReleased_vue_module_identifier_ = null\n\nvar DateReleased_Component = normalizeComponent(\n  DateReleased,\n  DateReleased_render,\n  DateReleased_staticRenderFns,\n  DateReleased_vue_template_functional_,\n  DateReleased_vue_styles_,\n  DateReleased_vue_scopeId_,\n  DateReleased_vue_module_identifier_\n)\nDateReleased_Component.options.__file = "src/DateReleased.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_DateReleased = (DateReleased_Component.exports);\n\n// CONCATENATED MODULE: ./src/DoiEmitters.js\nfunction DoiEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction DoiEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction DoiEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/DoiValidators.js\nfunction DoiValidators_validate() {\n    // from: https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n    //\n    //    /^10.\\d{4,9}/[-._;()/:A-Z0-9]+$/i\n    //    /^10.1002/[^\\s]+$/i\n    //    /^10.\\d{4}/\\d+-\\d+X?(\\d+)\\d+<[\\d\\w]+:[\\d\\w]*>\\d+.\\d+.\\w+;\\d$/i\n    //    /^10.1021/\\w\\w\\d++$/i\n    //    /^10.1207/[\\w\\d]+\\&\\d+_\\d+$/i\n    //\n    // I added escape to the first dot in each regexp\n    // I added escapes to all backslashes\n    let regexps = [new RegExp(\'^10\\\\.\\\\d{4,9}/[-._;()/:a-zA-Z0-9]+$\'), new RegExp(\'^10\\\\.1002/[^\\\\s]+$\'), new RegExp(\'^10\\\\.\\\\d{4}/\\\\d+-\\\\d+X?(\\\\d+)\\\\d+<[\\\\d\\\\w]+:[\\\\d\\\\w]*>\\\\d+.\\\\d+.\\\\w+;\\\\d$\'), new RegExp(\'^10\\\\.1021/\\\\w\\\\w\\\\d+\\\\+$\'), new RegExp(\'^10\\\\.1207/[\\\\w\\\\d]+\\\\&\\\\d+_\\\\d+$\')];\n    // store a copy of doi, because this.doi won\'t be accessible within the map\n    // function below:\n    let doi = this.doi;\n    let matches = regexps.map(function (regexp) {\n        return regexp.test(doi);\n    });\n    let at_least_one_matches = matches.includes(true);\n    return {\n        error: !at_least_one_matches,\n        msg: "Please enter a valid DOI string."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Doi.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var Doi = ({\n    name: \'Doi\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        doi: String\n    },\n    computed: {\n        validation: DoiValidators_validate,\n        has_doi: function () {\n            return this.$props.hasOwnProperty(\'doi\') && this.$props.doi !== undefined;\n        }\n    },\n    methods: {\n        add: DoiEmitters_add,\n        remove: DoiEmitters_remove,\n        update: DoiEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-5ec855d5","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Doi.vue\nvar Doi_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_doi,\n              expression: "has_doi"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        doi\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_doi,\n                  expression: "has_doi"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove doi" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("\\n            remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_doi,\n            expression: "has_doi"\n          }\n        ],\n        attrs: {\n          text:\n            "The DOI of the work (not the resolver URL, i.e., 10.5281/zenodo.1003150, not http://doi.org/10.5281/zenodo.1003150)",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_doi,\n              expression: "!has_doi"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add doi" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add doi\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_doi,\n            expression: "has_doi"\n          }\n        ],\n        class: { error: _vm.validation.error },\n        attrs: { placeholder: "doi-only, e.g. 10.0000/FIXME", type: "text" },\n        domProps: { value: _vm.doi },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.validation.error\n        ? _c(\n            "p",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_doi,\n                  expression: "has_doi"\n                }\n              ],\n              staticClass: "message"\n            },\n            [_vm._v("\\n        " + _vm._s(_vm.validation.msg) + "\\n    ")]\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar Doi_staticRenderFns = []\nDoi_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Doi.vue\nvar Doi_disposed = false\nfunction Doi_injectStyle (context) {\n  if (Doi_disposed) return\n  __webpack_require__(33)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Doi_vue_template_functional_ = false\n/* styles */\nvar Doi_vue_styles_ = Doi_injectStyle\n/* scopeId */\nvar Doi_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Doi_vue_module_identifier_ = null\n\nvar Doi_Component = normalizeComponent(\n  Doi,\n  Doi_render,\n  Doi_staticRenderFns,\n  Doi_vue_template_functional_,\n  Doi_vue_styles_,\n  Doi_vue_scopeId_,\n  Doi_vue_module_identifier_\n)\nDoi_Component.options.__file = "src/Doi.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Doi = (Doi_Component.exports);\n\n// CONCATENATED MODULE: ./src/IdentifiersEmitters.js\nfunction IdentifiersEmitters_add_identifier() {\n    this.$emit(\'add-identifier\');\n}\n\nfunction IdentifiersEmitters_add_identifiers() {\n    this.$emit(\'add-identifiers\');\n}\n\nfunction IdentifiersEmitters_move_identifier_down(payload) {\n    this.$emit(\'move-identifier-down\', payload);\n}\n\nfunction IdentifiersEmitters_move_identifier_up(payload) {\n    this.$emit(\'move-identifier-up\', payload);\n}\n\nfunction IdentifiersEmitters_remove_identifier(payload) {\n    this.$emit(\'remove-identifier\', payload);\n}\n\nfunction IdentifiersEmitters_remove_identifiers() {\n    this.$emit(\'remove-identifiers\');\n}\n\nfunction IdentifiersEmitters_update_identifier_type(payload) {\n    this.$emit(\'update-identifier-type\', payload);\n}\n\nfunction IdentifiersEmitters_update_identifier_value(payload) {\n    this.$emit(\'update-identifier-value\', payload);\n}\n// CONCATENATED MODULE: ./src/IdentifierEmitters.js\nfunction IdentifierEmitters_add_identifier() {\n    this.$emit(\'add-identifier\');\n}\n\nfunction IdentifierEmitters_move_identifier_down() {\n    this.$emit(\'move-identifier-down\', this.identifier.id);\n}\n\nfunction IdentifierEmitters_move_identifier_up() {\n    this.$emit(\'move-identifier-up\', this.identifier.id);\n}\n\nfunction IdentifierEmitters_remove_identifier() {\n    this.$emit(\'remove-identifier\', this.identifier.id);\n}\n\nfunction IdentifierEmitters_update_identifier_type(event) {\n    let payload = {\n        id: this.identifier.id,\n        value: event.target.value\n    };\n    this.$emit(\'update-identifier-type\', payload);\n}\n\nfunction IdentifierEmitters_update_identifier_value(event) {\n    let payload = {\n        id: this.identifier.id,\n        value: event.target.value\n    };\n    this.$emit(\'update-identifier-value\', payload);\n}\n// CONCATENATED MODULE: ./src/IdentifierValidators.js\nfunction validate_type() {\n    let authorized_set = new Set(["doi", "url", "swh", "other"]);\n    return {\n        error: !authorized_set.has(this.identifier.type),\n        msg: "Use one of the authorized identifiers."\n    };\n}\n\nfunction validate_value() {\n    if (this.identifier.value == \'\') {\n        return {\n            error: this.identifier.value == \'\',\n            msg: "You must define value, or remove the identifier altogether."\n        };\n    } else {\n        if (this.identifier.type == \'doi\') {\n            // from: https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n            //\n            //    /^10.\\d{4,9}/[-._;()/:A-Z0-9]+$/i\n            //    /^10.1002/[^\\s]+$/i\n            //    /^10.\\d{4}/\\d+-\\d+X?(\\d+)\\d+<[\\d\\w]+:[\\d\\w]*>\\d+.\\d+.\\w+;\\d$/i\n            //    /^10.1021/\\w\\w\\d++$/i\n            //    /^10.1207/[\\w\\d]+\\&\\d+_\\d+$/i\n            //\n            // I added escape to the first dot in each regexp\n            // I added escapes to all backslashes\n            let regexps = [new RegExp(\'^10\\\\.\\\\d{4,9}/[-._;()/:a-zA-Z0-9]+$\'), new RegExp(\'^10\\\\.1002/[^\\\\s]+$\'), new RegExp(\'^10\\\\.\\\\d{4}/\\\\d+-\\\\d+X?(\\\\d+)\\\\d+<[\\\\d\\\\w]+:[\\\\d\\\\w]*>\\\\d+.\\\\d+.\\\\w+;\\\\d$\'), new RegExp(\'^10\\\\.1021/\\\\w\\\\w\\\\d+\\\\+$\'), new RegExp(\'^10\\\\.1207/[\\\\w\\\\d]+\\\\&\\\\d+_\\\\d+$\')];\n            let doi = this.identifier.value;\n            let matches = regexps.map(function (regexp) {\n                return regexp.test(doi);\n            });\n            let at_least_one_matches = matches.includes(true);\n            return {\n                error: !at_least_one_matches,\n                msg: "Please enter a valid DOI string."\n            };\n        } else if (this.identifier.type == \'url\') {\n            return {\n                error: false,\n                msg: "Valid url value."\n            };\n        } else if (this.identifier.type == \'swh\') {\n            return {\n                error: false,\n                msg: "Valid swh value."\n            };\n        } else if (this.identifier.type == \'other\') {\n            return {\n                error: false,\n                msg: "Valid other value."\n            };\n        } else {\n            return {\n                error: true,\n                msg: "Use one of the authorized identifiers."\n            };\n        }\n    }\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Identifier.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var Identifier = ({\n    name: \'Identifier\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        identifier: Object\n    },\n    computed: {\n        validation_type: validate_type,\n        validation_value: validate_value\n    },\n    methods: {\n        move_identifier_down: IdentifierEmitters_move_identifier_down,\n        move_identifier_up: IdentifierEmitters_move_identifier_up,\n        remove_identifier: IdentifierEmitters_remove_identifier,\n        update_identifier_type: IdentifierEmitters_update_identifier_type,\n        update_identifier_value: IdentifierEmitters_update_identifier_value\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-57d028e2","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Identifier.vue\nvar Identifier_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "button",\n        {\n          staticClass: "remove-button",\n          attrs: { tabindex: "-1", title: "Remove this identifier" },\n          on: { click: _vm.remove_identifier }\n        },\n        [\n          _c("div", { staticClass: "button-spacer" }, [\n            _vm._v("\\n            -\\n        ")\n          ])\n        ]\n      ),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          staticClass: "move-up-button",\n          attrs: { tabindex: "-1", title: "Move this identifier up" },\n          on: { click: _vm.move_identifier_up }\n        },\n        [\n          _c("div", { staticClass: "button-spacer" }, [\n            _vm._v("\\n            ▲\\n        ")\n          ])\n        ]\n      ),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          staticClass: "move-down-button",\n          attrs: { tabindex: "-1", title: "Move this identifier down" },\n          on: { click: _vm.move_identifier_down }\n        },\n        [\n          _c("div", { staticClass: "button-spacer" }, [\n            _vm._v("\\n            ▼\\n        ")\n          ])\n        ]\n      ),\n      _vm._v(" "),\n      _c("p", { staticClass: "caption" }, [_vm._v("\\n        type\\n    ")]),\n      _vm._v(" "),\n      _c("HelpText", {\n        attrs: {\n          text: "The type of the identifier.",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#identifier-type-strings"\n        }\n      }),\n      _vm._v(" "),\n      _c("input", {\n        class: { error: _vm.validation_type.error },\n        attrs: { placeholder: "doi | swh | url | other" },\n        domProps: { value: _vm.identifier.type },\n        on: {\n          input: function($event) {\n            _vm.update_identifier_type($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.validation_type.error\n        ? _c("p", { staticClass: "message" }, [\n            _vm._v(\n              "\\n            " + _vm._s(_vm.validation_type.msg) + "\\n    "\n            )\n          ])\n        : _vm._e(),\n      _vm._v(" "),\n      _c("p", { staticClass: "caption" }, [_vm._v("\\n        value\\n    ")]),\n      _vm._v(" "),\n      _c("input", {\n        class: { error: _vm.validation_value.error },\n        domProps: { value: _vm.identifier.value },\n        on: {\n          input: function($event) {\n            _vm.update_identifier_value($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.validation_value.error\n        ? _c("p", { staticClass: "message" }, [\n            _vm._v(\n              "\\n            " + _vm._s(_vm.validation_value.msg) + "\\n    "\n            )\n          ])\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar Identifier_staticRenderFns = []\nIdentifier_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Identifier.vue\nvar Identifier_disposed = false\nfunction Identifier_injectStyle (context) {\n  if (Identifier_disposed) return\n  __webpack_require__(37)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Identifier_vue_template_functional_ = false\n/* styles */\nvar Identifier_vue_styles_ = Identifier_injectStyle\n/* scopeId */\nvar Identifier_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Identifier_vue_module_identifier_ = null\n\nvar Identifier_Component = normalizeComponent(\n  Identifier,\n  Identifier_render,\n  Identifier_staticRenderFns,\n  Identifier_vue_template_functional_,\n  Identifier_vue_styles_,\n  Identifier_vue_scopeId_,\n  Identifier_vue_module_identifier_\n)\nIdentifier_Component.options.__file = "src/Identifier.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Identifier = (Identifier_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Identifiers.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var Identifiers = ({\n    name: \'Identifiers\',\n    components: {\n        HelpText: src_HelpText,\n        Identifier: src_Identifier\n    },\n    props: {\n        identifiers: Array\n    },\n    computed: {\n        has_identifiers: function () {\n            return this.$props.hasOwnProperty(\'identifiers\') && this.$props.identifiers !== undefined;\n        }\n    },\n    methods: {\n        add_identifier: IdentifiersEmitters_add_identifier,\n        add_identifiers: IdentifiersEmitters_add_identifiers,\n        move_identifier_down: IdentifiersEmitters_move_identifier_down,\n        move_identifier_up: IdentifiersEmitters_move_identifier_up,\n        remove_identifier: IdentifiersEmitters_remove_identifier,\n        remove_identifiers: IdentifiersEmitters_remove_identifiers,\n        update_identifier_type: IdentifiersEmitters_update_identifier_type,\n        update_identifier_value: IdentifiersEmitters_update_identifier_value\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-b43ed6fe","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Identifiers.vue\nvar Identifiers_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_identifiers\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        identifiers\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove identifiers" },\n                on: { click: _vm.remove_identifiers }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            ),\n            _vm._v(" "),\n            _c(\n              "button",\n              {\n                staticClass: "add-button",\n                attrs: { tabindex: "-1", title: "Add identifier" },\n                on: { click: _vm.add_identifier }\n              },\n              [\n                _c("div", { staticClass: "button-spacer" }, [\n                  _vm._v("\\n                +\\n            ")\n                ])\n              ]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text: "Persistent identifiers for the software.",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#identifier-objects"\n            }\n          }),\n          _vm._v(" "),\n          _c(\n            "ul",\n            _vm._l(_vm.identifiers, function(identifier) {\n              return _c("Identifier", {\n                key: identifier.id,\n                attrs: { identifier: identifier },\n                on: {\n                  "move-identifier-down": _vm.move_identifier_down,\n                  "move-identifier-up": _vm.move_identifier_up,\n                  "remove-identifier": _vm.remove_identifier,\n                  "update-identifier-type": _vm.update_identifier_type,\n                  "update-identifier-value": _vm.update_identifier_value\n                }\n              })\n            })\n          )\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add identifiers" },\n            on: { click: _vm.add_identifiers }\n          },\n          [_vm._v("\\n        Add identifiers\\n    ")]\n        )\n      ])\n}\nvar Identifiers_staticRenderFns = []\nIdentifiers_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Identifiers.vue\nvar Identifiers_disposed = false\nfunction Identifiers_injectStyle (context) {\n  if (Identifiers_disposed) return\n  __webpack_require__(35)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Identifiers_vue_template_functional_ = false\n/* styles */\nvar Identifiers_vue_styles_ = Identifiers_injectStyle\n/* scopeId */\nvar Identifiers_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Identifiers_vue_module_identifier_ = null\n\nvar Identifiers_Component = normalizeComponent(\n  Identifiers,\n  Identifiers_render,\n  Identifiers_staticRenderFns,\n  Identifiers_vue_template_functional_,\n  Identifiers_vue_styles_,\n  Identifiers_vue_scopeId_,\n  Identifiers_vue_module_identifier_\n)\nIdentifiers_Component.options.__file = "src/Identifiers.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Identifiers = (Identifiers_Component.exports);\n\n// CONCATENATED MODULE: ./src/KeywordsEmitters.js\nfunction KeywordsEmitters_add_keyword() {\n    this.$emit(\'add-keyword\');\n}\n\nfunction KeywordsEmitters_add_keywords() {\n    this.$emit(\'add-keywords\');\n}\n\nfunction KeywordsEmitters_move_keyword_down(payload) {\n    this.$emit(\'move-keyword-down\', payload);\n}\n\nfunction KeywordsEmitters_move_keyword_up(payload) {\n    this.$emit(\'move-keyword-up\', payload);\n}\n\nfunction KeywordsEmitters_remove_keyword(payload) {\n    this.$emit(\'remove-keyword\', payload);\n}\n\nfunction KeywordsEmitters_remove_keywords() {\n    this.$emit(\'remove-keywords\');\n}\n\nfunction KeywordsEmitters_update_keyword(payload) {\n    this.$emit(\'update-keyword\', payload);\n}\n// CONCATENATED MODULE: ./src/KeywordEmitters.js\nfunction KeywordEmitters_add_keyword() {\n    this.$emit(\'add-keyword\');\n}\n\nfunction KeywordEmitters_move_keyword_down() {\n    this.$emit(\'move-keyword-down\', this.keyword.id);\n}\n\nfunction KeywordEmitters_move_keyword_up() {\n    this.$emit(\'move-keyword-up\', this.keyword.id);\n}\n\nfunction KeywordEmitters_remove_keyword() {\n    this.$emit(\'remove-keyword\', this.keyword.id);\n}\n\nfunction KeywordEmitters_update_keyword(event) {\n    let payload = {\n        id: this.keyword.id,\n        value: event.target.value\n    };\n    this.$emit(\'update-keyword\', payload);\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Keyword.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var Keyword = ({\n    name: \'Keyword\',\n    props: {\n        keyword: Object\n    },\n    methods: {\n        move_keyword_down: KeywordEmitters_move_keyword_down,\n        move_keyword_up: KeywordEmitters_move_keyword_up,\n        remove_keyword: KeywordEmitters_remove_keyword,\n        update_keyword: KeywordEmitters_update_keyword\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-67cd0980","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Keyword.vue\nvar Keyword_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("li", [\n    _c(\n      "button",\n      {\n        staticClass: "remove-button",\n        attrs: { tabindex: "-1", title: "Remove this keyword" },\n        on: { click: _vm.remove_keyword }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n            -\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c(\n      "button",\n      {\n        staticClass: "move-up-button",\n        attrs: { tabindex: "-1", title: "Move this keyword up" },\n        on: { click: _vm.move_keyword_up }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n            ▲\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c(\n      "button",\n      {\n        staticClass: "move-down-button",\n        attrs: { tabindex: "-1", title: "Move this keyword down" },\n        on: { click: _vm.move_keyword_down }\n      },\n      [\n        _c("div", { staticClass: "button-spacer" }, [\n          _vm._v("\\n            ▼\\n        ")\n        ])\n      ]\n    ),\n    _vm._v(" "),\n    _c("input", {\n      domProps: { value: _vm.keyword.text },\n      on: {\n        input: function($event) {\n          _vm.update_keyword($event)\n        }\n      }\n    })\n  ])\n}\nvar Keyword_staticRenderFns = []\nKeyword_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Keyword.vue\nvar Keyword_disposed = false\nfunction Keyword_injectStyle (context) {\n  if (Keyword_disposed) return\n  __webpack_require__(41)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Keyword_vue_template_functional_ = false\n/* styles */\nvar Keyword_vue_styles_ = Keyword_injectStyle\n/* scopeId */\nvar Keyword_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Keyword_vue_module_identifier_ = null\n\nvar Keyword_Component = normalizeComponent(\n  Keyword,\n  Keyword_render,\n  Keyword_staticRenderFns,\n  Keyword_vue_template_functional_,\n  Keyword_vue_styles_,\n  Keyword_vue_scopeId_,\n  Keyword_vue_module_identifier_\n)\nKeyword_Component.options.__file = "src/Keyword.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Keyword = (Keyword_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Keywords.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var Keywords = ({\n    name: \'Keywords\',\n    components: {\n        HelpText: src_HelpText,\n        Keyword: src_Keyword\n    },\n    props: {\n        keywords: Array\n    },\n    computed: {\n        has_keywords: function () {\n            return this.$props.hasOwnProperty(\'keywords\') && this.$props.keywords !== undefined;\n        }\n    },\n    methods: {\n        add_keyword: KeywordsEmitters_add_keyword,\n        add_keywords: KeywordsEmitters_add_keywords,\n        move_keyword_down: KeywordsEmitters_move_keyword_down,\n        move_keyword_up: KeywordsEmitters_move_keyword_up,\n        remove_keyword: KeywordsEmitters_remove_keyword,\n        remove_keywords: KeywordsEmitters_remove_keywords,\n        update_keyword: KeywordsEmitters_update_keyword\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-d50070ba","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Keywords.vue\nvar Keywords_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.has_keywords\n    ? _c(\n        "li",\n        [\n          _c("p", { staticClass: "caption" }, [\n            _vm._v("\\n        keywords\\n        "),\n            _c(\n              "button",\n              {\n                attrs: { tabindex: "-1", title: "Remove keywords" },\n                on: { click: _vm.remove_keywords }\n              },\n              [_vm._v("\\n            remove\\n        ")]\n            ),\n            _vm._v(" "),\n            _c(\n              "button",\n              {\n                staticClass: "add-button",\n                attrs: { tabindex: "-1", title: "Add keyword" },\n                on: { click: _vm.add_keyword }\n              },\n              [\n                _c("div", { staticClass: "button-spacer" }, [\n                  _vm._v("\\n                +\\n            ")\n                ])\n              ]\n            )\n          ]),\n          _vm._v(" "),\n          _c("HelpText", {\n            attrs: {\n              text: "Keywords pertaining to the software version",\n              url:\n                "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n            }\n          }),\n          _vm._v(" "),\n          _c(\n            "ul",\n            _vm._l(_vm.keywords, function(keyword) {\n              return _c("Keyword", {\n                key: keyword.id,\n                attrs: { keyword: keyword },\n                on: {\n                  "move-keyword-down": _vm.move_keyword_down,\n                  "move-keyword-up": _vm.move_keyword_up,\n                  "remove-keyword": _vm.remove_keyword,\n                  "update-keyword": _vm.update_keyword\n                }\n              })\n            })\n          )\n        ],\n        1\n      )\n    : _c("li", [\n        _c(\n          "button",\n          {\n            attrs: { tabindex: "-1", title: "Add keywords" },\n            on: { click: _vm.add_keywords }\n          },\n          [_vm._v("\\n        Add keywords\\n    ")]\n        )\n      ])\n}\nvar Keywords_staticRenderFns = []\nKeywords_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Keywords.vue\nvar Keywords_disposed = false\nfunction Keywords_injectStyle (context) {\n  if (Keywords_disposed) return\n  __webpack_require__(39)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Keywords_vue_template_functional_ = false\n/* styles */\nvar Keywords_vue_styles_ = Keywords_injectStyle\n/* scopeId */\nvar Keywords_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Keywords_vue_module_identifier_ = null\n\nvar Keywords_Component = normalizeComponent(\n  Keywords,\n  Keywords_render,\n  Keywords_staticRenderFns,\n  Keywords_vue_template_functional_,\n  Keywords_vue_styles_,\n  Keywords_vue_scopeId_,\n  Keywords_vue_module_identifier_\n)\nKeywords_Component.options.__file = "src/Keywords.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Keywords = (Keywords_Component.exports);\n\n// CONCATENATED MODULE: ./src/LicenseEmitters.js\nfunction LicenseEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction LicenseEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction LicenseEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/LicenseValidators.js\nfunction validate_license() {\n    let authorized_set = new Set(["0BSD", "AAL", "Abstyles", "Adobe-2006", "Adobe-Glyph", "ADSL", "AFL-1.1", "AFL-1.2", "AFL-2.0", "AFL-2.1", "AFL-3.0", "Afmparse", "AGPL-1.0-only", "AGPL-1.0-or-later", "AGPL-1.0", "AGPL-3.0-only", "AGPL-3.0-or-later", "AGPL-3.0", "Aladdin", "AMDPLPA", "AML", "AMPAS", "ANTLR-PD", "Apache-1.0", "Apache-1.1", "Apache-2.0", "APAFML", "APL-1.0", "APSL-1.0", "APSL-1.1", "APSL-1.2", "APSL-2.0", "Artistic-1.0-cl8", "Artistic-1.0-Perl", "Artistic-1.0", "Artistic-2.0", "Bahyph", "Barr", "Beerware", "BitTorrent-1.0", "BitTorrent-1.1", "blessing", "BlueOak-1.0.0", "Borceux", "BSD-1-Clause", "BSD-2-Clause-FreeBSD", "BSD-2-Clause-NetBSD", "BSD-2-Clause-Patent", "BSD-2-Clause", "BSD-3-Clause-Attribution", "BSD-3-Clause-Clear", "BSD-3-Clause-LBNL", "BSD-3-Clause-No-Nuclear-License-2014", "BSD-3-Clause-No-Nuclear-License", "BSD-3-Clause-No-Nuclear-Warranty", "BSD-3-Clause-Open-MPI", "BSD-3-Clause", "BSD-4-Clause-UC", "BSD-4-Clause", "BSD-Protection", "BSD-Source-Code", "BSL-1.0", "bzip2-1.0.5", "bzip2-1.0.6", "Caldera", "CATOSL-1.1", "CC-BY-1.0", "CC-BY-2.0", "CC-BY-2.5", "CC-BY-3.0", "CC-BY-4.0", "CC-BY-NC-1.0", "CC-BY-NC-2.0", "CC-BY-NC-2.5", "CC-BY-NC-3.0", "CC-BY-NC-4.0", "CC-BY-NC-ND-1.0", "CC-BY-NC-ND-2.0", "CC-BY-NC-ND-2.5", "CC-BY-NC-ND-3.0", "CC-BY-NC-ND-4.0", "CC-BY-NC-SA-1.0", "CC-BY-NC-SA-2.0", "CC-BY-NC-SA-2.5", "CC-BY-NC-SA-3.0", "CC-BY-NC-SA-4.0", "CC-BY-ND-1.0", "CC-BY-ND-2.0", "CC-BY-ND-2.5", "CC-BY-ND-3.0", "CC-BY-ND-4.0", "CC-BY-SA-1.0", "CC-BY-SA-2.0", "CC-BY-SA-2.5", "CC-BY-SA-3.0", "CC-BY-SA-4.0", "CC-PDDC", "CC0-1.0", "CDDL-1.0", "CDDL-1.1", "CDLA-Permissive-1.0", "CDLA-Sharing-1.0", "CECILL-1.0", "CECILL-1.1", "CECILL-2.0", "CECILL-2.1", "CECILL-B", "CECILL-C", "CERN-OHL-1.1", "CERN-OHL-1.2", "ClArtistic", "CNRI-Jython", "CNRI-Python-GPL-Compatible", "CNRI-Python", "Condor-1.1", "copyleft-next-0.3.0", "copyleft-next-0.3.1", "CPAL-1.0", "CPL-1.0", "CPOL-1.02", "Crossword", "CrystalStacker", "CUA-OPL-1.0", "Cube", "curl", "D-FSL-1.0", "diffmark", "DOC", "Dotseqn", "DSDP", "dvipdfm", "ECL-1.0", "ECL-2.0", "eCos-2.0", "EFL-1.0", "EFL-2.0", "eGenix", "Entessa", "EPL-1.0", "EPL-2.0", "ErlPL-1.1", "etalab-2.0", "EUDatagrid", "EUPL-1.0", "EUPL-1.1", "EUPL-1.2", "Eurosym", "Fair", "Frameworx-1.0", "FreeImage", "FSFAP", "FSFUL", "FSFULLR", "FTL", "GFDL-1.1-only", "GFDL-1.1-or-later", "GFDL-1.1", "GFDL-1.2-only", "GFDL-1.2-or-later", "GFDL-1.2", "GFDL-1.3-only", "GFDL-1.3-or-later", "GFDL-1.3", "Giftware", "GL2PS", "Glide", "Glulxe", "gnuplot", "GPL-1.0-only", "GPL-1.0-or-later", "GPL-1.0", "GPL-1.0+", "GPL-2.0-only", "GPL-2.0-or-later", "GPL-2.0-with-autoconf-exception", "GPL-2.0-with-bison-exception", "GPL-2.0-with-classpath-exception", "GPL-2.0-with-font-exception", "GPL-2.0-with-GCC-exception", "GPL-2.0", "GPL-2.0+", "GPL-3.0-only", "GPL-3.0-or-later", "GPL-3.0-with-autoconf-exception", "GPL-3.0-with-GCC-exception", "GPL-3.0", "GPL-3.0+", "gSOAP-1.3b", "HaskellReport", "HPND-sell-variant", "HPND", "IBM-pibs", "ICU", "IJG", "ImageMagick", "iMatix", "Imlib2", "Info-ZIP", "Intel-ACPI", "Intel", "Interbase-1.0", "IPA", "IPL-1.0", "ISC", "JasPer-2.0", "JPNIC", "JSON", "LAL-1.2", "LAL-1.3", "Latex2e", "Leptonica", "LGPL-2.0-only", "LGPL-2.0-or-later", "LGPL-2.0", "LGPL-2.0+", "LGPL-2.1-only", "LGPL-2.1-or-later", "LGPL-2.1", "LGPL-2.1+", "LGPL-3.0-only", "LGPL-3.0-or-later", "LGPL-3.0", "LGPL-3.0+", "LGPLLR", "libpng-2.0", "Libpng", "libtiff", "LiLiQ-P-1.1", "LiLiQ-R-1.1", "LiLiQ-Rplus-1.1", "Linux-OpenIB", "LPL-1.0", "LPL-1.02", "LPPL-1.0", "LPPL-1.1", "LPPL-1.2", "LPPL-1.3a", "LPPL-1.3c", "MakeIndex", "MirOS", "MIT-0", "MIT-advertising", "MIT-CMU", "MIT-enna", "MIT-feh", "MIT", "MITNFA", "Motosoto", "mpich2", "MPL-1.0", "MPL-1.1", "MPL-2.0-no-copyleft-exception", "MPL-2.0", "MS-PL", "MS-RL", "MTLL", "MulanPSL-1.0", "Multics", "Mup", "NASA-1.3", "Naumen", "NBPL-1.0", "NCSA", "Net-SNMP", "NetCDF", "Newsletr", "NGPL", "NLOD-1.0", "NLPL", "Nokia", "NOSL", "Noweb", "NPL-1.0", "NPL-1.1", "NPOSL-3.0", "NRL", "NTP", "Nunit", "OCCT-PL", "OCLC-2.0", "ODbL-1.0", "ODC-By-1.0", "OFL-1.0", "OFL-1.1", "OGL-Canada-2.0", "OGL-UK-1.0", "OGL-UK-2.0", "OGL-UK-3.0", "OGTSL", "OLDAP-1.1", "OLDAP-1.2", "OLDAP-1.3", "OLDAP-1.4", "OLDAP-2.0.1", "OLDAP-2.0", "OLDAP-2.1", "OLDAP-2.2.1", "OLDAP-2.2.2", "OLDAP-2.2", "OLDAP-2.3", "OLDAP-2.4", "OLDAP-2.5", "OLDAP-2.6", "OLDAP-2.7", "OLDAP-2.8", "OML", "OpenSSL", "OPL-1.0", "OSET-PL-2.1", "OSL-1.0", "OSL-1.1", "OSL-2.0", "OSL-2.1", "OSL-3.0", "Parity-6.0.0", "PDDL-1.0", "PHP-3.0", "PHP-3.01", "Plexus", "PostgreSQL", "psfrag", "psutils", "Python-2.0", "Qhull", "QPL-1.0", "Rdisc", "RHeCos-1.1", "RPL-1.1", "RPL-1.5", "RPSL-1.0", "RSA-MD", "RSCPL", "Ruby", "SAX-PD", "Saxpath", "SCEA", "Sendmail-8.23", "Sendmail", "SGI-B-1.0", "SGI-B-1.1", "SGI-B-2.0", "SHL-0.5", "SHL-0.51", "SimPL-2.0", "SISSL-1.2", "SISSL", "Sleepycat", "SMLNJ", "SMPPL", "SNIA", "Spencer-86", "Spencer-94", "Spencer-99", "SPL-1.0", "SSH-OpenSSH", "SSH-short", "SSPL-1.0", "StandardML-NJ", "SugarCRM-1.1.3", "SWL", "TAPR-OHL-1.0", "TCL", "TCP-wrappers", "TMate", "TORQUE-1.1", "TOSL", "TU-Berlin-1.0", "TU-Berlin-2.0", "UCL-1.0", "Unicode-DFS-2015", "Unicode-DFS-2016", "Unicode-TOU", "Unlicense", "UPL-1.0", "Vim", "VOSTROM", "VSL-1.0", "W3C-19980720", "W3C-20150513", "W3C", "Watcom-1.0", "Wsuipa", "WTFPL", "wxWindows", "X11", "Xerox", "XFree86-1.1", "xinetd", "Xnet", "xpp", "XSkat", "YPL-1.0", "YPL-1.1", "Zed", "Zend-2.0", "Zimbra-1.3", "Zimbra-1.4", "zlib-acknowledgement", "Zlib", "ZPL-1.1", "ZPL-2.0", "ZPL-2.1"]);\n    return {\n        error: !authorized_set.has(this.license),\n        msg: "Use one of the authorized license abbriviations."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/License.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var License = ({\n    name: \'License\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        license: String\n    },\n    computed: {\n        has_license: function () {\n            return this.$props.hasOwnProperty(\'license\') && this.$props.license !== undefined;\n        },\n        license_validation: validate_license\n    },\n    methods: {\n        add: LicenseEmitters_add,\n        remove: LicenseEmitters_remove,\n        update: LicenseEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-e204f850","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/License.vue\nvar License_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_license,\n              expression: "has_license"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        license:\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_license,\n                  expression: "has_license"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove license" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("\\n            remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_license,\n            expression: "has_license"\n          }\n        ],\n        attrs: {\n          text: "The license the software version is licensed under.",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_license,\n              expression: "!has_license"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add license" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add license\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_license,\n            expression: "has_license"\n          }\n        ],\n        class: { error: _vm.license_validation.error },\n        attrs: { placeholder: "e.g. Apache-2.0, MIT", type: "text" },\n        domProps: { value: _vm.license },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.license_validation.error\n        ? _c(\n            "p",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_license,\n                  expression: "has_license"\n                }\n              ],\n              staticClass: "message"\n            },\n            [\n              _vm._v(\n                "\\n        " + _vm._s(_vm.license_validation.msg) + " (See the "\n              ),\n              _c(\n                "a",\n                {\n                  attrs: {\n                    href:\n                      "https://github.com/spdx/license-list-data/blob/6b77c7a2840009663ee0b083523fc0ad25376b57/json/licenses.json"\n                  }\n                },\n                [_vm._v("complete list")]\n              ),\n              _vm._v(")\\n    ")\n            ]\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar License_staticRenderFns = []\nLicense_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/License.vue\nvar License_disposed = false\nfunction License_injectStyle (context) {\n  if (License_disposed) return\n  __webpack_require__(43)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar License_vue_template_functional_ = false\n/* styles */\nvar License_vue_styles_ = License_injectStyle\n/* scopeId */\nvar License_vue_scopeId_ = "data-v-e204f850"\n/* moduleIdentifier (server only) */\nvar License_vue_module_identifier_ = null\n\nvar License_Component = normalizeComponent(\n  License,\n  License_render,\n  License_staticRenderFns,\n  License_vue_template_functional_,\n  License_vue_styles_,\n  License_vue_scopeId_,\n  License_vue_module_identifier_\n)\nLicense_Component.options.__file = "src/License.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_License = (License_Component.exports);\n\n// CONCATENATED MODULE: ./src/RepositoryCodeEmitters.js\nfunction RepositoryCodeEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction RepositoryCodeEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction RepositoryCodeEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./src/RepositoryCodeValidators.js\nfunction RepositoryCodeValidators_validate() {\n    let re = new RegExp(\'^(https?|ftp)://((?:[^\\\\s./$#?]{1,}\\\\.){1,})([^\\\\s./$#?]{2,})([/$#?]{1}[^\\\\s]{0,})?$\');\n    return {\n        error: !re.test(this.repository_code),\n        msg: "Use a valid URL."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/RepositoryCode.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n/* harmony default export */ var RepositoryCode = ({\n    name: \'RepositoryCode\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        repository_code: String\n    },\n    computed: {\n        has_repository_code: function () {\n            return this.$props.hasOwnProperty(\'repository_code\') && this.$props.repository_code !== undefined;\n        },\n        validate: RepositoryCodeValidators_validate\n    },\n    methods: {\n        add: RepositoryCodeEmitters_add,\n        remove: RepositoryCodeEmitters_remove,\n        update: RepositoryCodeEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-302f75e0","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/RepositoryCode.vue\nvar RepositoryCode_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_repository_code,\n              expression: "has_repository_code"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        repository-code\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_repository_code,\n                  expression: "has_repository_code"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove repository-code" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("\\n            remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_repository_code,\n            expression: "has_repository_code"\n          }\n        ],\n        attrs: {\n          text: "The URL to the software version in a source code repository.",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_repository_code,\n              expression: "!has_repository_code"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add repository-code" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add repository-code\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_repository_code,\n            expression: "has_repository_code"\n          }\n        ],\n        class: { error: _vm.validate.error },\n        attrs: { type: "text" },\n        domProps: { value: _vm.repository_code },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _vm.validate.error\n        ? _c(\n            "p",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_repository_code,\n                  expression: "has_repository_code"\n                }\n              ],\n              staticClass: "message"\n            },\n            [_vm._v("\\n        " + _vm._s(_vm.validate.msg) + "\\n    ")]\n          )\n        : _vm._e()\n    ],\n    1\n  )\n}\nvar RepositoryCode_staticRenderFns = []\nRepositoryCode_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/RepositoryCode.vue\nvar RepositoryCode_disposed = false\nfunction RepositoryCode_injectStyle (context) {\n  if (RepositoryCode_disposed) return\n  __webpack_require__(45)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar RepositoryCode_vue_template_functional_ = false\n/* styles */\nvar RepositoryCode_vue_styles_ = RepositoryCode_injectStyle\n/* scopeId */\nvar RepositoryCode_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar RepositoryCode_vue_module_identifier_ = null\n\nvar RepositoryCode_Component = normalizeComponent(\n  RepositoryCode,\n  RepositoryCode_render,\n  RepositoryCode_staticRenderFns,\n  RepositoryCode_vue_template_functional_,\n  RepositoryCode_vue_styles_,\n  RepositoryCode_vue_scopeId_,\n  RepositoryCode_vue_module_identifier_\n)\nRepositoryCode_Component.options.__file = "src/RepositoryCode.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_RepositoryCode = (RepositoryCode_Component.exports);\n\n// CONCATENATED MODULE: ./src/VersionEmitters.js\nfunction VersionEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction VersionEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction VersionEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Version.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var Version = ({\n    name: \'Version\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        version: String\n    },\n    computed: {\n        has_version: function () {\n            return this.$props.hasOwnProperty(\'version\') && this.$props.version !== undefined;\n        }\n    },\n    methods: {\n        add: VersionEmitters_add,\n        remove: VersionEmitters_remove,\n        update: VersionEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-43740e22","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Version.vue\nvar Version_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_version,\n              expression: "has_version"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        version\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_version,\n                  expression: "has_version"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove version" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("\\n            remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_version,\n            expression: "has_version"\n          }\n        ],\n        attrs: {\n          text: "The version of the software.",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_version,\n              expression: "!has_version"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add version" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add version\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_version,\n            expression: "has_version"\n          }\n        ],\n        attrs: { type: "text" },\n        domProps: { value: _vm.version },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      }),\n      _vm._v(" "),\n      _c("p", { staticClass: "message" })\n    ],\n    1\n  )\n}\nvar Version_staticRenderFns = []\nVersion_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Version.vue\nvar Version_disposed = false\nfunction Version_injectStyle (context) {\n  if (Version_disposed) return\n  __webpack_require__(47)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Version_vue_template_functional_ = false\n/* styles */\nvar Version_vue_styles_ = Version_injectStyle\n/* scopeId */\nvar Version_vue_scopeId_ = "data-v-43740e22"\n/* moduleIdentifier (server only) */\nvar Version_vue_module_identifier_ = null\n\nvar Version_Component = normalizeComponent(\n  Version,\n  Version_render,\n  Version_staticRenderFns,\n  Version_vue_template_functional_,\n  Version_vue_styles_,\n  Version_vue_scopeId_,\n  Version_vue_module_identifier_\n)\nVersion_Component.options.__file = "src/Version.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Version = (Version_Component.exports);\n\n// CONCATENATED MODULE: ./src/TitleEmitters.js\nfunction TitleEmitters_add() {\n    this.$emit(\'add\');\n}\n\nfunction TitleEmitters_remove() {\n    this.$emit(\'remove\');\n}\n\nfunction TitleEmitters_update(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update\', payload);\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Title.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var Title = ({\n    name: \'Title\',\n    components: {\n        HelpText: src_HelpText\n    },\n    props: {\n        title: String\n    },\n    computed: {\n        has_title: function () {\n            return this.$props.hasOwnProperty(\'title\') && this.$props.title !== undefined;\n        }\n    },\n    methods: {\n        add: TitleEmitters_add,\n        remove: TitleEmitters_remove,\n        update: TitleEmitters_update\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-51ab922f","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Title.vue\nvar Title_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "li",\n    [\n      _c(\n        "p",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: _vm.has_title,\n              expression: "has_title"\n            }\n          ],\n          staticClass: "caption"\n        },\n        [\n          _vm._v("\\n        title\\n        "),\n          _c(\n            "button",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.has_title,\n                  expression: "has_title"\n                }\n              ],\n              attrs: { tabindex: "-1", title: "Remove title" },\n              on: { click: _vm.remove }\n            },\n            [_vm._v("remove\\n        ")]\n          )\n        ]\n      ),\n      _vm._v(" "),\n      _c("HelpText", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_title,\n            expression: "has_title"\n          }\n        ],\n        attrs: {\n          text:\n            "The name of the software (may include a specific name for the software version)",\n          url:\n            "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#software-citation-metadata-required"\n        }\n      }),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "show",\n              rawName: "v-show",\n              value: !_vm.has_title,\n              expression: "!has_title"\n            }\n          ],\n          attrs: { tabindex: "-1", title: "Add title" },\n          on: { click: _vm.add }\n        },\n        [_vm._v("\\n        Add title\\n    ")]\n      ),\n      _vm._v(" "),\n      _c("input", {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.has_title,\n            expression: "has_title"\n          }\n        ],\n        attrs: { type: "text" },\n        domProps: { value: _vm.title },\n        on: {\n          input: function($event) {\n            _vm.update($event)\n          }\n        }\n      })\n    ],\n    1\n  )\n}\nvar Title_staticRenderFns = []\nTitle_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Title.vue\nvar Title_disposed = false\nfunction Title_injectStyle (context) {\n  if (Title_disposed) return\n  __webpack_require__(49)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Title_vue_template_functional_ = false\n/* styles */\nvar Title_vue_styles_ = Title_injectStyle\n/* scopeId */\nvar Title_vue_scopeId_ = "data-v-51ab922f"\n/* moduleIdentifier (server only) */\nvar Title_vue_module_identifier_ = null\n\nvar Title_Component = normalizeComponent(\n  Title,\n  Title_render,\n  Title_staticRenderFns,\n  Title_vue_template_functional_,\n  Title_vue_styles_,\n  Title_vue_scopeId_,\n  Title_vue_module_identifier_\n)\nTitle_Component.options.__file = "src/Title.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Title = (Title_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/CreativeWork.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var CreativeWork = ({\n    name: \'CreativeWork\',\n    components: {\n        Abstract: src_Abstract,\n        Authors: src_Authors,\n        DateReleased: src_DateReleased,\n        Doi: src_Doi,\n        Identifiers: src_Identifiers,\n        Keywords: src_Keywords,\n        License: src_License,\n        RepositoryCode: src_RepositoryCode,\n        Title: src_Title,\n        Version: src_Version\n    },\n    props: {\n        abstract: String,\n        author_id: Number,\n        authors: Array,\n        date_released: String,\n        doi: String,\n        identifier_id: Number,\n        identifiers: Array,\n        keyword_id: Number,\n        keywords: Array,\n        license: String,\n        repository_code: String,\n        title: String,\n        version: String\n    },\n    computed: {},\n    methods: {\n        add_abstract: add_abstract,\n        add_affiliation: add_affiliation,\n        add_author: CreativeWorkEmitters_add_author,\n        add_date_released: add_date_released,\n        add_doi: add_doi,\n        add_identifier: CreativeWorkEmitters_add_identifier,\n        add_identifiers: CreativeWorkEmitters_add_identifiers,\n        add_keyword: add_keyword,\n        add_keywords: add_keywords,\n        add_name_particle: add_name_particle,\n        add_name_suffix: add_name_suffix,\n        add_orcid: add_orcid,\n        add_license: add_license,\n        add_repository_code: add_repository_code,\n        add_title: add_title,\n        add_version: add_version,\n        move_author_down: CreativeWorkEmitters_move_author_down,\n        move_author_up: CreativeWorkEmitters_move_author_up,\n        move_identifier_down: CreativeWorkEmitters_move_identifier_down,\n        move_identifier_up: CreativeWorkEmitters_move_identifier_up,\n        move_keyword_down: move_keyword_down,\n        move_keyword_up: move_keyword_up,\n        remove_abstract: remove_abstract,\n        remove_affiliation: remove_affiliation,\n        remove_author: CreativeWorkEmitters_remove_author,\n        remove_date_released: remove_date_released,\n        remove_doi: remove_doi,\n        remove_identifier: CreativeWorkEmitters_remove_identifier,\n        remove_identifiers: CreativeWorkEmitters_remove_identifiers,\n        remove_keyword: remove_keyword,\n        remove_keywords: remove_keywords,\n        remove_license: remove_license,\n        remove_name_particle: remove_name_particle,\n        remove_name_suffix: remove_name_suffix,\n        remove_orcid: remove_orcid,\n        remove_repository_code: remove_repository_code,\n        remove_title: remove_title,\n        remove_version: remove_version,\n        update_abstract: update_abstract,\n        update_affiliation: update_affiliation,\n        update_date_released: CreativeWorkEmitters_update_date_released,\n        update_doi: CreativeWorkEmitters_update_doi,\n        update_family_names: CreativeWorkEmitters_update_family_names,\n        update_given_names: CreativeWorkEmitters_update_given_names,\n        update_identifier_type: CreativeWorkEmitters_update_identifier_type,\n        update_identifier_value: CreativeWorkEmitters_update_identifier_value,\n        update_keyword: update_keyword,\n        update_license: CreativeWorkEmitters_update_license,\n        update_name_particle: update_name_particle,\n        update_name_suffix: update_name_suffix,\n        update_orcid: update_orcid,\n        update_repository_code: CreativeWorkEmitters_update_repository_code,\n        update_title: CreativeWorkEmitters_update_title,\n        update_version: update_version\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-42277fd9","hasScoped":true,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/CreativeWork.vue\nvar CreativeWork_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "ul",\n    { staticClass: "creative_work" },\n    [\n      _c("Abstract", {\n        attrs: { abstract: _vm.abstract },\n        on: {\n          add: _vm.add_abstract,\n          remove: _vm.remove_abstract,\n          update: _vm.update_abstract\n        }\n      }),\n      _vm._v(" "),\n      _c("Authors", {\n        attrs: { authors: _vm.authors },\n        on: {\n          add: _vm.add_author,\n          "add-affiliation": _vm.add_affiliation,\n          "add-orcid": _vm.add_orcid,\n          "add-name-particle": _vm.add_name_particle,\n          "add-name-suffix": _vm.add_name_suffix,\n          "move-down": _vm.move_author_down,\n          "move-up": _vm.move_author_up,\n          remove: _vm.remove_author,\n          "remove-affiliation": _vm.remove_affiliation,\n          "remove-orcid": _vm.remove_orcid,\n          "remove-name-particle": _vm.remove_name_particle,\n          "remove-name-suffix": _vm.remove_name_suffix,\n          "update-affiliation": _vm.update_affiliation,\n          "update-family-names": _vm.update_family_names,\n          "update-given-names": _vm.update_given_names,\n          "update-name-particle": _vm.update_name_particle,\n          "update-name-suffix": _vm.update_name_suffix,\n          "update-orcid": _vm.update_orcid\n        }\n      }),\n      _vm._v(" "),\n      _c("DateReleased", {\n        attrs: { date_released: _vm.date_released },\n        on: {\n          add: _vm.add_date_released,\n          remove: _vm.remove_date_released,\n          update: _vm.update_date_released\n        }\n      }),\n      _vm._v(" "),\n      _c("Doi", {\n        attrs: { doi: _vm.doi },\n        on: { add: _vm.add_doi, remove: _vm.remove_doi, update: _vm.update_doi }\n      }),\n      _vm._v(" "),\n      _c("Identifiers", {\n        attrs: { identifiers: _vm.identifiers },\n        on: {\n          "add-identifier": _vm.add_identifier,\n          "add-identifiers": _vm.add_identifiers,\n          "move-identifier-down": _vm.move_identifier_down,\n          "move-identifier-up": _vm.move_identifier_up,\n          "remove-identifier": _vm.remove_identifier,\n          "remove-identifiers": _vm.remove_identifiers,\n          "update-identifier-type": _vm.update_identifier_type,\n          "update-identifier-value": _vm.update_identifier_value\n        }\n      }),\n      _vm._v(" "),\n      _c("Keywords", {\n        attrs: { keywords: _vm.keywords },\n        on: {\n          "add-keyword": _vm.add_keyword,\n          "add-keywords": _vm.add_keywords,\n          "move-keyword-down": _vm.move_keyword_down,\n          "move-keyword-up": _vm.move_keyword_up,\n          "remove-keyword": _vm.remove_keyword,\n          "remove-keywords": _vm.remove_keywords,\n          "update-keyword": _vm.update_keyword\n        }\n      }),\n      _vm._v(" "),\n      _c("License", {\n        attrs: { license: _vm.license },\n        on: {\n          add: _vm.add_license,\n          remove: _vm.remove_license,\n          update: _vm.update_license\n        }\n      }),\n      _vm._v(" "),\n      _c("RepositoryCode", {\n        attrs: { repository_code: _vm.repository_code },\n        on: {\n          add: _vm.add_repository_code,\n          remove: _vm.remove_repository_code,\n          update: _vm.update_repository_code\n        }\n      }),\n      _vm._v(" "),\n      _c("Title", {\n        attrs: { title: _vm.title },\n        on: {\n          add: _vm.add_title,\n          remove: _vm.remove_title,\n          update: _vm.update_title\n        }\n      }),\n      _vm._v(" "),\n      _c("Version", {\n        attrs: { version: _vm.version },\n        on: {\n          add: _vm.add_version,\n          remove: _vm.remove_version,\n          update: _vm.update_version\n        }\n      })\n    ],\n    1\n  )\n}\nvar CreativeWork_staticRenderFns = []\nCreativeWork_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/CreativeWork.vue\nvar CreativeWork_disposed = false\nfunction CreativeWork_injectStyle (context) {\n  if (CreativeWork_disposed) return\n  __webpack_require__(13)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar CreativeWork_vue_template_functional_ = false\n/* styles */\nvar CreativeWork_vue_styles_ = CreativeWork_injectStyle\n/* scopeId */\nvar CreativeWork_vue_scopeId_ = "data-v-42277fd9"\n/* moduleIdentifier (server only) */\nvar CreativeWork_vue_module_identifier_ = null\n\nvar CreativeWork_Component = normalizeComponent(\n  CreativeWork,\n  CreativeWork_render,\n  CreativeWork_staticRenderFns,\n  CreativeWork_vue_template_functional_,\n  CreativeWork_vue_styles_,\n  CreativeWork_vue_scopeId_,\n  CreativeWork_vue_module_identifier_\n)\nCreativeWork_Component.options.__file = "src/CreativeWork.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_CreativeWork = (CreativeWork_Component.exports);\n\n// CONCATENATED MODULE: ./src/FormEmitters.js\nfunction FormEmitters_add_abstract() {\n    this.$emit(\'add-abstract\');\n}\n\nfunction FormEmitters_add_affiliation(payload) {\n    this.$emit(\'add-affiliation\', payload);\n}\n\nfunction FormEmitters_add_author() {\n    this.$emit(\'add-author\');\n}\n\nfunction FormEmitters_add_date_released() {\n    this.$emit(\'add-date-released\');\n}\n\nfunction FormEmitters_add_doi() {\n    this.$emit(\'add-doi\');\n}\n\nfunction FormEmitters_add_identifier() {\n    this.$emit(\'add-identifier\');\n}\n\nfunction FormEmitters_add_identifiers() {\n    this.$emit(\'add-identifiers\');\n}\n\nfunction FormEmitters_add_keyword() {\n    this.$emit(\'add-keyword\');\n}\n\nfunction FormEmitters_add_keywords() {\n    this.$emit(\'add-keywords\');\n}\n\nfunction FormEmitters_add_license() {\n    this.$emit(\'add-license\');\n}\n\nfunction FormEmitters_add_name_particle(payload) {\n    this.$emit(\'add-name-particle\', payload);\n}\n\nfunction FormEmitters_add_name_suffix(payload) {\n    this.$emit(\'add-name-suffix\', payload);\n}\n\nfunction FormEmitters_add_orcid(payload) {\n    this.$emit(\'add-orcid\', payload);\n}\n\nfunction FormEmitters_add_repository_code() {\n    this.$emit(\'add-repository-code\');\n}\n\nfunction FormEmitters_add_title() {\n    this.$emit(\'add-title\');\n}\n\nfunction FormEmitters_add_version() {\n    this.$emit(\'add-version\');\n}\n\nfunction FormEmitters_move_author_down(author_id) {\n    this.$emit(\'move-author-down\', author_id);\n}\n\nfunction FormEmitters_move_author_up(author_id) {\n    this.$emit(\'move-author-up\', author_id);\n}\n\nfunction FormEmitters_move_identifier_down(identifier_id) {\n    this.$emit(\'move-identifier-down\', identifier_id);\n}\n\nfunction FormEmitters_move_identifier_up(identifier_id) {\n    this.$emit(\'move-identifier-up\', identifier_id);\n}\n\nfunction FormEmitters_move_keyword_down(keyword_id) {\n    this.$emit(\'move-keyword-down\', keyword_id);\n}\n\nfunction FormEmitters_move_keyword_up(keyword_id) {\n    this.$emit(\'move-keyword-up\', keyword_id);\n}\n\nfunction FormEmitters_remove_abstract() {\n    this.$emit(\'remove-abstract\');\n}\n\nfunction FormEmitters_remove_affiliation(payload) {\n    this.$emit(\'remove-affiliation\', payload);\n}\n\nfunction FormEmitters_remove_author(author_id) {\n    this.$emit(\'remove-author\', author_id);\n}\n\nfunction FormEmitters_remove_date_released() {\n    this.$emit(\'remove-date-released\');\n}\n\nfunction FormEmitters_remove_doi() {\n    this.$emit(\'remove-doi\');\n}\n\nfunction FormEmitters_remove_identifier(identifier_id) {\n    this.$emit(\'remove-identifier\', identifier_id);\n}\n\nfunction FormEmitters_remove_identifiers() {\n    this.$emit(\'remove-identifiers\');\n}\n\nfunction FormEmitters_remove_keyword(keyword_id) {\n    this.$emit(\'remove-keyword\', keyword_id);\n}\n\nfunction FormEmitters_remove_keywords() {\n    this.$emit(\'remove-keywords\');\n}\n\nfunction FormEmitters_remove_license() {\n    this.$emit(\'remove-license\');\n}\n\nfunction FormEmitters_remove_name_particle(payload) {\n    this.$emit(\'remove-name-particle\', payload);\n}\n\nfunction FormEmitters_remove_name_suffix(payload) {\n    this.$emit(\'remove-name-suffix\', payload);\n}\n\nfunction FormEmitters_remove_orcid(payload) {\n    this.$emit(\'remove-orcid\', payload);\n}\n\nfunction FormEmitters_remove_repository_code() {\n    this.$emit(\'remove-repository-code\');\n}\n\nfunction FormEmitters_remove_title() {\n    this.$emit(\'remove-title\');\n}\n\nfunction FormEmitters_remove_version() {\n    this.$emit(\'remove-version\');\n}\n\nfunction FormEmitters_update_abstract(payload) {\n    this.$emit(\'update-abstract\', payload);\n}\n\nfunction FormEmitters_update_given_names(payload) {\n    this.$emit(\'update-given-names\', payload);\n}\n\nfunction FormEmitters_update_identifier_type(payload) {\n    this.$emit(\'update-identifier-type\', payload);\n}\n\nfunction FormEmitters_update_identifier_value(payload) {\n    this.$emit(\'update-identifier-value\', payload);\n}\n\nfunction FormEmitters_update_name_particle(payload) {\n    this.$emit(\'update-name-particle\', payload);\n}\n\nfunction FormEmitters_update_family_names(payload) {\n    this.$emit(\'update-family-names\', payload);\n}\n\nfunction FormEmitters_update_name_suffix(payload) {\n    this.$emit(\'update-name-suffix\', payload);\n}\n\nfunction FormEmitters_update_orcid(payload) {\n    this.$emit(\'update-orcid\', payload);\n}\n\nfunction FormEmitters_update_affiliation(payload) {\n    this.$emit(\'update-affiliation\', payload);\n}\n\nfunction FormEmitters_update_cff_version(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update-cff-version\', payload);\n}\n\nfunction FormEmitters_update_date_released(payload) {\n    this.$emit(\'update-date-released\', payload);\n}\n\nfunction FormEmitters_update_doi(payload) {\n    this.$emit(\'update-doi\', payload);\n}\n\nfunction FormEmitters_update_keyword(payload) {\n    this.$emit(\'update-keyword\', payload);\n}\n\nfunction FormEmitters_update_license(payload) {\n    this.$emit(\'update-license\', payload);\n}\n\nfunction FormEmitters_update_repository_code(payload) {\n    this.$emit(\'update-repository-code\', payload);\n}\n\nfunction FormEmitters_update_title(payload) {\n    this.$emit(\'update-title\', payload);\n}\n\nfunction FormEmitters_update_message(event) {\n    let payload = {\n        value: event.target.value\n    };\n    this.$emit(\'update-message\', payload);\n}\n\nfunction FormEmitters_update_version(payload) {\n    this.$emit(\'update-version\', payload);\n}\n// CONCATENATED MODULE: ./src/FormValidators.js\nfunction validate_cff_version() {\n    return {\n        error: this.cff_version !== \'1.1.0\',\n        msg: "Only CFF version 1.1.0 is supported at the moment."\n    };\n}\n\nfunction validate_message() {\n    let min_length = 30;\n    return {\n        error: this.message.length < min_length,\n        msg: "You must include a sufficiently long message."\n    };\n}\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Form.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var Form = ({\n    name: \'Form\',\n    components: {\n        CreativeWork: src_CreativeWork,\n        HelpText: src_HelpText\n    },\n    props: {\n        abstract: String,\n        author_id: Number,\n        authors: Array,\n        cff_version: String,\n        date_released: String,\n        doi: String,\n        identifier_id: Number,\n        identifiers: Array,\n        keyword_id: Number,\n        keywords: Array,\n        license: String,\n        message: String,\n        repository_code: String,\n        title: String,\n        version: undefined\n    },\n    computed: {\n        message_validation: validate_message,\n        cff_version_validation: validate_cff_version\n    },\n    methods: {\n        add_abstract: FormEmitters_add_abstract,\n        add_affiliation: FormEmitters_add_affiliation,\n        add_author: FormEmitters_add_author,\n        add_date_released: FormEmitters_add_date_released,\n        add_doi: FormEmitters_add_doi,\n        add_identifier: FormEmitters_add_identifier,\n        add_identifiers: FormEmitters_add_identifiers,\n        add_keyword: FormEmitters_add_keyword,\n        add_keywords: FormEmitters_add_keywords,\n        add_license: FormEmitters_add_license,\n        add_name_particle: FormEmitters_add_name_particle,\n        add_name_suffix: FormEmitters_add_name_suffix,\n        add_orcid: FormEmitters_add_orcid,\n        add_repository_code: FormEmitters_add_repository_code,\n        add_title: FormEmitters_add_title,\n        add_version: FormEmitters_add_version,\n        move_author_down: FormEmitters_move_author_down,\n        move_author_up: FormEmitters_move_author_up,\n        move_identifier_down: FormEmitters_move_identifier_down,\n        move_identifier_up: FormEmitters_move_identifier_up,\n        move_keyword_down: FormEmitters_move_keyword_down,\n        move_keyword_up: FormEmitters_move_keyword_up,\n        remove_abstract: FormEmitters_remove_abstract,\n        remove_affiliation: FormEmitters_remove_affiliation,\n        remove_author: FormEmitters_remove_author,\n        remove_date_released: FormEmitters_remove_date_released,\n        remove_doi: FormEmitters_remove_doi,\n        remove_identifier: FormEmitters_remove_identifier,\n        remove_identifiers: FormEmitters_remove_identifiers,\n        remove_keyword: FormEmitters_remove_keyword,\n        remove_keywords: FormEmitters_remove_keywords,\n        remove_license: FormEmitters_remove_license,\n        remove_name_particle: FormEmitters_remove_name_particle,\n        remove_name_suffix: FormEmitters_remove_name_suffix,\n        remove_orcid: FormEmitters_remove_orcid,\n        remove_repository_code: FormEmitters_remove_repository_code,\n        remove_title: FormEmitters_remove_title,\n        remove_version: FormEmitters_remove_version,\n        update_abstract: FormEmitters_update_abstract,\n        update_affiliation: FormEmitters_update_affiliation,\n        update_cff_version: FormEmitters_update_cff_version,\n        update_date_released: FormEmitters_update_date_released,\n        update_doi: FormEmitters_update_doi,\n        update_family_names: FormEmitters_update_family_names,\n        update_given_names: FormEmitters_update_given_names,\n        update_identifier_type: FormEmitters_update_identifier_type,\n        update_identifier_value: FormEmitters_update_identifier_value,\n        update_keyword: FormEmitters_update_keyword,\n        update_license: FormEmitters_update_license,\n        update_message: FormEmitters_update_message,\n        update_name_particle: FormEmitters_update_name_particle,\n        update_name_suffix: FormEmitters_update_name_suffix,\n        update_orcid: FormEmitters_update_orcid,\n        update_repository_code: FormEmitters_update_repository_code,\n        update_title: FormEmitters_update_title,\n        update_version: FormEmitters_update_version\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-5cb7703d","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Form.vue\nvar Form_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("div", { staticClass: "form" }, [\n    _c(\n      "ul",\n      [\n        _c(\n          "li",\n          [\n            _c("p", { staticClass: "caption" }, [\n              _vm._v("\\n                    cff-version\\n                ")\n            ]),\n            _vm._v(" "),\n            _c("HelpText", {\n              attrs: {\n                text:\n                  "The exact version of the Citation File Format that is used for the file.",\n                url:\n                  "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#cff-version-required"\n              }\n            }),\n            _vm._v(" "),\n            _c("input", {\n              class: { error: _vm.cff_version_validation.error },\n              attrs: { placeholder: "1.0.3", type: "text" },\n              domProps: { value: _vm.cff_version },\n              on: {\n                input: function($event) {\n                  _vm.update_cff_version($event)\n                }\n              }\n            }),\n            _vm._v(" "),\n            _vm.cff_version_validation.error\n              ? _c("p", { staticClass: "message" }, [\n                  _vm._v(\n                    "\\n                    " +\n                      _vm._s(_vm.cff_version_validation.msg) +\n                      "\\n                "\n                  )\n                ])\n              : _vm._e()\n          ],\n          1\n        ),\n        _vm._v(" "),\n        _c(\n          "li",\n          [\n            _c("p", { staticClass: "caption" }, [\n              _vm._v("\\n                    message\\n                ")\n            ]),\n            _vm._v(" "),\n            _c("HelpText", {\n              attrs: {\n                text:\n                  "Specify instructions to users on how to cite the software the CITATION.cff file is associated with.",\n                url:\n                  "https://github.com/citation-file-format/citation-file-format/blob/1.1.0/README.md#message-required"\n              }\n            }),\n            _vm._v(" "),\n            _c("textarea", {\n              staticClass: "msg",\n              class: { error: _vm.message_validation.error },\n              domProps: { value: _vm.message },\n              on: {\n                input: function($event) {\n                  _vm.update_message($event)\n                }\n              }\n            }),\n            _vm._v(" "),\n            _vm.message_validation.error\n              ? _c("p", { staticClass: "message" }, [\n                  _vm._v(\n                    "\\n                    " +\n                      _vm._s(_vm.message_validation.msg) +\n                      "\\n                "\n                  )\n                ])\n              : _vm._e()\n          ],\n          1\n        ),\n        _vm._v(" "),\n        _c("CreativeWork", {\n          attrs: {\n            abstract: _vm.abstract,\n            author_id: _vm.author_id,\n            authors: _vm.authors,\n            date_released: _vm.date_released,\n            doi: _vm.doi,\n            identifier_id: _vm.identifier_id,\n            identifiers: _vm.identifiers,\n            keyword_id: _vm.keyword_id,\n            keywords: _vm.keywords,\n            license: _vm.license,\n            repository_code: _vm.repository_code,\n            title: _vm.title,\n            version: _vm.version\n          },\n          on: {\n            "add-abstract": _vm.add_abstract,\n            "add-affiliation": _vm.add_affiliation,\n            "add-author": _vm.add_author,\n            "add-date-released": _vm.add_date_released,\n            "add-doi": _vm.add_doi,\n            "add-identifier": _vm.add_identifier,\n            "add-identifiers": _vm.add_identifiers,\n            "add-keyword": _vm.add_keyword,\n            "add-keywords": _vm.add_keywords,\n            "add-license": _vm.add_license,\n            "add-name-particle": _vm.add_name_particle,\n            "add-name-suffix": _vm.add_name_suffix,\n            "add-orcid": _vm.add_orcid,\n            "add-repository-code": _vm.add_repository_code,\n            "add-title": _vm.add_title,\n            "add-version": _vm.add_version,\n            "move-author-down": _vm.move_author_down,\n            "move-author-up": _vm.move_author_up,\n            "move-identifier-down": _vm.move_identifier_down,\n            "move-identifier-up": _vm.move_identifier_up,\n            "move-keyword-down": _vm.move_keyword_down,\n            "move-keyword-up": _vm.move_keyword_up,\n            "remove-abstract": _vm.remove_abstract,\n            "remove-affiliation": _vm.remove_affiliation,\n            "remove-author": _vm.remove_author,\n            "remove-date-released": _vm.remove_date_released,\n            "remove-doi": _vm.remove_doi,\n            "remove-identifier": _vm.remove_identifier,\n            "remove-identifiers": _vm.remove_identifiers,\n            "remove-keyword": _vm.remove_keyword,\n            "remove-keywords": _vm.remove_keywords,\n            "remove-license": _vm.remove_license,\n            "remove-name-particle": _vm.remove_name_particle,\n            "remove-name-suffix": _vm.remove_name_suffix,\n            "remove-orcid": _vm.remove_orcid,\n            "remove-repository-code": _vm.remove_repository_code,\n            "remove-title": _vm.remove_title,\n            "remove-version": _vm.remove_version,\n            "update-abstract": _vm.update_abstract,\n            "update-affiliation": _vm.update_affiliation,\n            "update-date-released": _vm.update_date_released,\n            "update-doi": _vm.update_doi,\n            "update-family-names": _vm.update_family_names,\n            "update-given-names": _vm.update_given_names,\n            "update-identifier-type": _vm.update_identifier_type,\n            "update-identifier-value": _vm.update_identifier_value,\n            "update-keyword": _vm.update_keyword,\n            "update-license": _vm.update_license,\n            "update-name-particle": _vm.update_name_particle,\n            "update-name-suffix": _vm.update_name_suffix,\n            "update-orcid": _vm.update_orcid,\n            "update-repository-code": _vm.update_repository_code,\n            "update-title": _vm.update_title,\n            "update-version": _vm.update_version\n          }\n        })\n      ],\n      1\n    )\n  ])\n}\nvar Form_staticRenderFns = []\nForm_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/Form.vue\nvar Form_disposed = false\nfunction Form_injectStyle (context) {\n  if (Form_disposed) return\n  __webpack_require__(11)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar Form_vue_template_functional_ = false\n/* styles */\nvar Form_vue_styles_ = Form_injectStyle\n/* scopeId */\nvar Form_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar Form_vue_module_identifier_ = null\n\nvar Form_Component = normalizeComponent(\n  Form,\n  Form_render,\n  Form_staticRenderFns,\n  Form_vue_template_functional_,\n  Form_vue_styles_,\n  Form_vue_scopeId_,\n  Form_vue_module_identifier_\n)\nForm_Component.options.__file = "src/Form.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_Form = (Form_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/App.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var App = ({\n        name: \'App\',\n        components: {\n                CffText: src_CffText,\n                Form: src_Form\n        },\n        data: function () {\n                return {\n                        abstract: undefined,\n                        author_id: -1,\n                        authors: [],\n                        cff_version: \'1.1.0\',\n                        date_released: undefined,\n                        doi: undefined,\n                        identifier_id: -1,\n                        identifiers: undefined,\n                        keyword_id: -1,\n                        keywords: undefined,\n                        license: undefined,\n                        message: \'If you use this software, please cite it using these metadata.\',\n                        repository_code: undefined,\n                        title: undefined,\n                        version: undefined\n                };\n        },\n        computed: {\n                cff: compute_cff\n        },\n        methods: {\n                add_abstract: add,\n                add_affiliation: AffiliationHandlers_add,\n                add_author: add_author,\n                add_date_released: DateReleasedHandlers_add,\n                add_doi: DoiHandlers_add,\n                add_identifier: add_identifier,\n                add_identifiers: add_identifiers,\n                add_keyword: KeywordHandlers_add,\n                add_keywords: KeywordsHandlers_add,\n                add_name_particle: NameParticleHandlers_add,\n                add_name_suffix: NameSuffixHandlers_add,\n                add_license: LicenseHandlers_add,\n                add_orcid: OrcidHandlers_add,\n                add_repository_code: RepositoryCodeHandlers_add,\n                add_title: TitleHandlers_add,\n                add_version: VersionHandlers_add,\n                move_author_down: move_author_down,\n                move_author_up: move_author_up,\n                move_identifier_down: move_identifier_down,\n                move_identifier_up: move_identifier_up,\n                move_keyword_down: move_down,\n                move_keyword_up: move_up,\n                remove_abstract: remove,\n                remove_affiliation: AffiliationHandlers_remove,\n                remove_author: remove_author,\n                remove_date_released: DateReleasedHandlers_remove,\n                remove_doi: DoiHandlers_remove,\n                remove_identifier: remove_identifier,\n                remove_identifiers: remove_identifiers,\n                remove_keyword: KeywordHandlers_remove,\n                remove_keywords: KeywordsHandlers_remove,\n                remove_license: LicenseHandlers_remove,\n                remove_name_particle: NameParticleHandlers_remove,\n                remove_name_suffix: NameSuffixHandlers_remove,\n                remove_orcid: OrcidHandlers_remove,\n                remove_repository_code: RepositoryCodeHandlers_remove,\n                remove_title: TitleHandlers_remove,\n                remove_version: VersionHandlers_remove,\n                save_text_as_file: save_text_as_file,\n                update_abstract: update,\n                update_affiliation: AffiliationHandlers_update,\n                update_family_names: update_family_names,\n                update_given_names: update_given_names,\n                update_identifier_type: update_identifier_type,\n                update_identifier_value: update_identifier_value,\n                update_name_particle: NameParticleHandlers_update,\n                update_name_suffix: NameSuffixHandlers_update,\n                update_orcid: OrcidHandlers_update,\n                update_cff_version: update_cff_version,\n                update_date_released: DateReleasedHandlers_update,\n                update_doi: DoiHandlers_update,\n                update_keyword: KeywordHandlers_update,\n                update_license: LicenseHandlers_update,\n                update_message: update_message,\n                update_repository_code: RepositoryCodeHandlers_update,\n                update_title: TitleHandlers_update,\n                update_version: VersionHandlers_update\n        }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{"id":"data-v-7ba5bd90","hasScoped":false,"optionsId":"0","buble":{"transforms":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\nvar App_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("div", { attrs: { id: "app" } }, [\n    _vm._m(0),\n    _vm._v(" "),\n    _c(\n      "div",\n      { staticClass: "container" },\n      [\n        _c("Form", {\n          attrs: {\n            abstract: _vm.abstract,\n            author_id: _vm.author_id,\n            authors: _vm.authors,\n            cff_version: _vm.cff_version,\n            date_released: _vm.date_released,\n            doi: _vm.doi,\n            identifier_id: _vm.identifier_id,\n            identifiers: _vm.identifiers,\n            keyword_id: _vm.keyword_id,\n            keywords: _vm.keywords,\n            license: _vm.license,\n            message: _vm.message,\n            repository_code: _vm.repository_code,\n            title: _vm.title,\n            version: _vm.version\n          },\n          on: {\n            "add-abstract": _vm.add_abstract,\n            "add-affiliation": _vm.add_affiliation,\n            "add-author": _vm.add_author,\n            "add-date-released": _vm.add_date_released,\n            "add-doi": _vm.add_doi,\n            "add-identifier": _vm.add_identifier,\n            "add-identifiers": _vm.add_identifiers,\n            "add-keyword": _vm.add_keyword,\n            "add-keywords": _vm.add_keywords,\n            "add-license": _vm.add_license,\n            "add-name-particle": _vm.add_name_particle,\n            "add-name-suffix": _vm.add_name_suffix,\n            "add-orcid": _vm.add_orcid,\n            "add-repository-code": _vm.add_repository_code,\n            "add-title": _vm.add_title,\n            "add-version": _vm.add_version,\n            "move-author-down": _vm.move_author_down,\n            "move-author-up": _vm.move_author_up,\n            "move-identifier-down": _vm.move_identifier_down,\n            "move-identifier-up": _vm.move_identifier_up,\n            "move-keyword-down": _vm.move_keyword_down,\n            "move-keyword-up": _vm.move_keyword_up,\n            "remove-abstract": _vm.remove_abstract,\n            "remove-affiliation": _vm.remove_affiliation,\n            "remove-author": _vm.remove_author,\n            "remove-date-released": _vm.remove_date_released,\n            "remove-doi": _vm.remove_doi,\n            "remove-identifier": _vm.remove_identifier,\n            "remove-identifiers": _vm.remove_identifiers,\n            "remove-keyword": _vm.remove_keyword,\n            "remove-keywords": _vm.remove_keywords,\n            "remove-license": _vm.remove_license,\n            "remove-name-particle": _vm.remove_name_particle,\n            "remove-name-suffix": _vm.remove_name_suffix,\n            "remove-orcid": _vm.remove_orcid,\n            "remove-repository-code": _vm.remove_repository_code,\n            "remove-title": _vm.remove_title,\n            "remove-version": _vm.remove_version,\n            "update-abstract": _vm.update_abstract,\n            "update-affiliation": _vm.update_affiliation,\n            "update-cff-version": _vm.update_cff_version,\n            "update-date-released": _vm.update_date_released,\n            "update-doi": _vm.update_doi,\n            "update-family-names": _vm.update_family_names,\n            "update-given-names": _vm.update_given_names,\n            "update-identifier-type": _vm.update_identifier_type,\n            "update-identifier-value": _vm.update_identifier_value,\n            "update-keyword": _vm.update_keyword,\n            "update-license": _vm.update_license,\n            "update-message": _vm.update_message,\n            "update-name-particle": _vm.update_name_particle,\n            "update-name-suffix": _vm.update_name_suffix,\n            "update-orcid": _vm.update_orcid,\n            "update-repository-code": _vm.update_repository_code,\n            "update-title": _vm.update_title,\n            "update-version": _vm.update_version\n          }\n        }),\n        _vm._v(" "),\n        _c("CffText", { attrs: { cff: _vm.cff } })\n      ],\n      1\n    ),\n    _vm._v(" "),\n    _c("div", { staticClass: "container" }, [\n      _c(\n        "button",\n        {\n          staticClass: "download-button",\n          on: { click: _vm.save_text_as_file }\n        },\n        [_vm._v("\\n            Save Text to File\\n        ")]\n      )\n    ]),\n    _vm._v(" "),\n    _vm._m(1)\n  ])\n}\nvar App_staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c("div", { staticClass: "header" }, [\n      _c("h1", [_vm._v("cffinit")]),\n      _vm._v(" "),\n      _c("h2", [_vm._v("Initialize your CITATION.cff files")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c("div", { staticClass: "github" }, [\n      _c(\n        "a",\n        {\n          attrs: {\n            href:\n              "https://github.com/citation-file-format/cff-initializer-javascript"\n          }\n        },\n        [\n          _c("img", {\n            attrs: {\n              src: "img/github-mark-light-64px.png",\n              width: "50px",\n              height: "50px"\n            }\n          })\n        ]\n      )\n    ])\n  }\n]\nApp_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/App.vue\nvar App_disposed = false\nfunction App_injectStyle (context) {\n  if (App_disposed) return\n  __webpack_require__(7)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar App_vue_template_functional_ = false\n/* styles */\nvar App_vue_styles_ = App_injectStyle\n/* scopeId */\nvar App_vue_scopeId_ = null\n/* moduleIdentifier (server only) */\nvar App_vue_module_identifier_ = null\n\nvar App_Component = normalizeComponent(\n  App,\n  App_render,\n  App_staticRenderFns,\n  App_vue_template_functional_,\n  App_vue_styles_,\n  App_vue_scopeId_,\n  App_vue_module_identifier_\n)\nApp_Component.options.__file = "src/App.vue"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_App = (App_Component.exports);\n\n// CONCATENATED MODULE: ./src/main.js\n\n\n\nnew vue_esm["a" /* default */]({\n    el: \'#app\',\n    render: h => h(src_App)\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQWJzdHJhY3RIYW5kbGVycy5qcz81MzY3Iiwid2VicGFjazovLy8uL3NyYy9BZmZpbGlhdGlvbkhhbmRsZXJzLmpzP2UxZDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL05hbWVQYXJ0aWNsZUhhbmRsZXJzLmpzPzhkNGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0F1dGhvcnNIYW5kbGVycy5qcz9iMGFhIiwid2VicGFjazovLy8uL3NyYy9JZGVudGlmaWVySGFuZGxlcnMuanM/M2NhZCIsIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllcnNIYW5kbGVycy5qcz8wMGIzIiwid2VicGFjazovLy8uL3NyYy9LZXl3b3JkSGFuZGxlcnMuanM/MDI1OSIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZHNIYW5kbGVycy5qcz9hYTYxIiwid2VicGFjazovLy8uL3NyYy9EYXRlUmVsZWFzZWRIYW5kbGVycy5qcz81YmJmIiwid2VicGFjazovLy8uL3NyYy9Eb2lIYW5kbGVycy5qcz9hMDAzIiwid2VicGFjazovLy8uL3NyYy9MaWNlbnNlSGFuZGxlcnMuanM/YzcxMyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVwb3NpdG9yeUNvZGVIYW5kbGVycy5qcz9hY2YyIiwid2VicGFjazovLy8uL3NyYy9jb21wdXRlX2NmZi5qcz9jZjlkIiwid2VicGFjazovLy8uL3NyYy9BdXRob3JIYW5kbGVyLmpzPzU3NGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL09yY2lkSGFuZGxlcnMuanM/ZDM5NCIsIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVN1ZmZpeEhhbmRsZXJzLmpzPzJhYTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zvcm1IYW5kbGVycy5qcz9lMzA5Iiwid2VicGFjazovLy8uL3NyYy9kb3dubG9hZC5qcz84MTc2Iiwid2VicGFjazovLy8uL3NyYy9UaXRsZUhhbmRsZXJzLmpzPzhmOGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL1ZlcnNpb25IYW5kbGVycy5qcz9jYTNlIiwid2VicGFjazovLy9zcmMvQ2ZmVGV4dC52dWU/NjY2MSIsIndlYnBhY2s6Ly8vLi9zcmMvQ2ZmVGV4dC52dWU/YzliNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplci5qcz8yNDU1Iiwid2VicGFjazovLy8uL3NyYy9DZmZUZXh0LnZ1ZT83NTc4Iiwid2VicGFjazovLy8uL3NyYy9DcmVhdGl2ZVdvcmtFbWl0dGVycy5qcz80ZTY1Iiwid2VicGFjazovLy8uL3NyYy9BdXRob3JzRW1pdHRlcnMuanM/Y2IxZCIsIndlYnBhY2s6Ly8vc3JjL0hlbHBUZXh0LnZ1ZT8wY2U2Iiwid2VicGFjazovLy8uL3NyYy9IZWxwVGV4dC52dWU/OGM2MyIsIndlYnBhY2s6Ly8vLi9zcmMvSGVscFRleHQudnVlPzcxYzQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FmZmlsaWF0aW9uRW1pdHRlcnMuanM/NDQyNSIsIndlYnBhY2s6Ly8vLi9zcmMvQWZmaWxpYXRpb25WYWxpZGF0b3JzLmpzPzI2MDYiLCJ3ZWJwYWNrOi8vL3NyYy9BZmZpbGlhdGlvbi52dWU/MTRlMyIsIndlYnBhY2s6Ly8vLi9zcmMvQWZmaWxpYXRpb24udnVlPzhlNzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FmZmlsaWF0aW9uLnZ1ZT84ODQ3Iiwid2VicGFjazovLy8uL3NyYy9PcmNpZEVtaXR0ZXJzLmpzPzA5NDYiLCJ3ZWJwYWNrOi8vLy4vc3JjL09yY2lkVmFsaWRhdG9ycy5qcz9hOGIxIiwid2VicGFjazovLy9zcmMvT3JjaWQudnVlPzhiMTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL09yY2lkLnZ1ZT80MTlmIiwid2VicGFjazovLy8uL3NyYy9PcmNpZC52dWU/NGM0OCIsIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVBhcnRpY2xlRW1pdHRlcnMuanM/NWVhYiIsIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVBhcnRpY2xlVmFsaWRhdG9ycy5qcz82MWUxIiwid2VicGFjazovLy9zcmMvTmFtZVBhcnRpY2xlLnZ1ZT9lMWUxIiwid2VicGFjazovLy8uL3NyYy9OYW1lUGFydGljbGUudnVlPzQ5ZDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL05hbWVQYXJ0aWNsZS52dWU/YjFlNiIsIndlYnBhY2s6Ly8vLi9zcmMvTmFtZVN1ZmZpeEVtaXR0ZXJzLmpzP2IxNmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL05hbWVTdWZmaXhWYWxpZGF0b3JzLmpzP2FmZmMiLCJ3ZWJwYWNrOi8vL3NyYy9OYW1lU3VmZml4LnZ1ZT82M2YwIiwid2VicGFjazovLy8uL3NyYy9OYW1lU3VmZml4LnZ1ZT9lYjQ0Iiwid2VicGFjazovLy8uL3NyYy9OYW1lU3VmZml4LnZ1ZT9iZTg3Iiwid2VicGFjazovLy8uL3NyYy9BdXRob3JFbWl0dGVycy5qcz8wNjBhIiwid2VicGFjazovLy9zcmMvQXV0aG9yLnZ1ZT9hZWYzIiwid2VicGFjazovLy8uL3NyYy9BdXRob3IudnVlP2Y4OTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0F1dGhvci52dWU/MWY0MiIsIndlYnBhY2s6Ly8vc3JjL0F1dGhvcnMudnVlPzZjMjYiLCJ3ZWJwYWNrOi8vLy4vc3JjL0F1dGhvcnMudnVlP2RlNDciLCJ3ZWJwYWNrOi8vLy4vc3JjL0F1dGhvcnMudnVlP2I3NjQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fic3RyYWN0RW1pdHRlcnMuanM/MmYzYyIsIndlYnBhY2s6Ly8vLi9zcmMvQWJzdHJhY3RWYWxpZGF0b3JzLmpzPzU4OGEiLCJ3ZWJwYWNrOi8vL3NyYy9BYnN0cmFjdC52dWU/NWU3NSIsIndlYnBhY2s6Ly8vLi9zcmMvQWJzdHJhY3QudnVlPzNjOGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fic3RyYWN0LnZ1ZT9iNDcyIiwid2VicGFjazovLy8uL3NyYy9EYXRlUmVsZWFzZWRFbWl0dGVycy5qcz83ZTFkIiwid2VicGFjazovLy8uL3NyYy9EYXRlUmVsZWFzZWRWYWxpZGF0b3JzLmpzP2E5OTciLCJ3ZWJwYWNrOi8vL3NyYy9EYXRlUmVsZWFzZWQudnVlPzM1YzciLCJ3ZWJwYWNrOi8vLy4vc3JjL0RhdGVSZWxlYXNlZC52dWU/ZDZlNCIsIndlYnBhY2s6Ly8vLi9zcmMvRGF0ZVJlbGVhc2VkLnZ1ZT9iMmJkIiwid2VicGFjazovLy8uL3NyYy9Eb2lFbWl0dGVycy5qcz8zNzJlIiwid2VicGFjazovLy8uL3NyYy9Eb2lWYWxpZGF0b3JzLmpzPzJmNWQiLCJ3ZWJwYWNrOi8vL3NyYy9Eb2kudnVlP2YwMGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RvaS52dWU/MjI1YSIsIndlYnBhY2s6Ly8vLi9zcmMvRG9pLnZ1ZT82MGU4Iiwid2VicGFjazovLy8uL3NyYy9JZGVudGlmaWVyc0VtaXR0ZXJzLmpzPzVhNDEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lkZW50aWZpZXJFbWl0dGVycy5qcz9hYzZkIiwid2VicGFjazovLy8uL3NyYy9JZGVudGlmaWVyVmFsaWRhdG9ycy5qcz9hZTJhIiwid2VicGFjazovLy9zcmMvSWRlbnRpZmllci52dWU/MDI3OSIsIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllci52dWU/ZTNkMyIsIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllci52dWU/MjlkOSIsIndlYnBhY2s6Ly8vc3JjL0lkZW50aWZpZXJzLnZ1ZT85YTkyIiwid2VicGFjazovLy8uL3NyYy9JZGVudGlmaWVycy52dWU/MjNmMSIsIndlYnBhY2s6Ly8vLi9zcmMvSWRlbnRpZmllcnMudnVlPzU4YmIiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleXdvcmRzRW1pdHRlcnMuanM/ODU2OCIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5d29yZEVtaXR0ZXJzLmpzP2Y1YzciLCJ3ZWJwYWNrOi8vL3NyYy9LZXl3b3JkLnZ1ZT83NDYxIiwid2VicGFjazovLy8uL3NyYy9LZXl3b3JkLnZ1ZT9lNDI4Iiwid2VicGFjazovLy8uL3NyYy9LZXl3b3JkLnZ1ZT84NDkyIiwid2VicGFjazovLy9zcmMvS2V5d29yZHMudnVlPzFmYTgiLCJ3ZWJwYWNrOi8vLy4vc3JjL0tleXdvcmRzLnZ1ZT9jYmMxIiwid2VicGFjazovLy8uL3NyYy9LZXl3b3Jkcy52dWU/YTdiMyIsIndlYnBhY2s6Ly8vLi9zcmMvTGljZW5zZUVtaXR0ZXJzLmpzPzg3ZTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0xpY2Vuc2VWYWxpZGF0b3JzLmpzPzM2N2QiLCJ3ZWJwYWNrOi8vL3NyYy9MaWNlbnNlLnZ1ZT81MGExIiwid2VicGFjazovLy8uL3NyYy9MaWNlbnNlLnZ1ZT85ODJjIiwid2VicGFjazovLy8uL3NyYy9MaWNlbnNlLnZ1ZT80MDIzIiwid2VicGFjazovLy8uL3NyYy9SZXBvc2l0b3J5Q29kZUVtaXR0ZXJzLmpzPzg0YTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlcG9zaXRvcnlDb2RlVmFsaWRhdG9ycy5qcz8xYWFiIiwid2VicGFjazovLy9zcmMvUmVwb3NpdG9yeUNvZGUudnVlPzA1YjciLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlcG9zaXRvcnlDb2RlLnZ1ZT9jNjdmIiwid2VicGFjazovLy8uL3NyYy9SZXBvc2l0b3J5Q29kZS52dWU/ZWExNCIsIndlYnBhY2s6Ly8vLi9zcmMvVmVyc2lvbkVtaXR0ZXJzLmpzPzg3ZjEiLCJ3ZWJwYWNrOi8vL3NyYy9WZXJzaW9uLnZ1ZT81MzEwIiwid2VicGFjazovLy8uL3NyYy9WZXJzaW9uLnZ1ZT8yNjE5Iiwid2VicGFjazovLy8uL3NyYy9WZXJzaW9uLnZ1ZT9mNTk3Iiwid2VicGFjazovLy8uL3NyYy9UaXRsZUVtaXR0ZXJzLmpzPzNiOTYiLCJ3ZWJwYWNrOi8vL3NyYy9UaXRsZS52dWU/YTUyNCIsIndlYnBhY2s6Ly8vLi9zcmMvVGl0bGUudnVlP2FmNzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RpdGxlLnZ1ZT85MzhhIiwid2VicGFjazovLy9zcmMvQ3JlYXRpdmVXb3JrLnZ1ZT9mMmEwIiwid2VicGFjazovLy8uL3NyYy9DcmVhdGl2ZVdvcmsudnVlPzcwY2YiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NyZWF0aXZlV29yay52dWU/NDYxNiIsIndlYnBhY2s6Ly8vLi9zcmMvRm9ybUVtaXR0ZXJzLmpzPzUyZjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zvcm1WYWxpZGF0b3JzLmpzPzZkNWQiLCJ3ZWJwYWNrOi8vL3NyYy9Gb3JtLnZ1ZT9mNmY2Iiwid2VicGFjazovLy8uL3NyYy9Gb3JtLnZ1ZT80YzA3Iiwid2VicGFjazovLy8uL3NyYy9Gb3JtLnZ1ZT80MjI3Iiwid2VicGFjazovLy9zcmMvQXBwLnZ1ZT9jNjVkIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlPzA3YWIiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/YmJiYiIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbImFkZCIsImFic3RyYWN0IiwicmVtb3ZlIiwidW5kZWZpbmVkIiwidXBkYXRlIiwicGF5bG9hZCIsInZhbHVlIiwiYXV0aG9yIiwiYXV0aG9ycyIsImZpbmQiLCJpZCIsImFmZmlsaWF0aW9uIiwibmFtZV9wYXJ0aWNsZSIsImFkZF9hdXRob3IiLCJwdXNoIiwiZmFtaWx5X25hbWVzIiwiZ2l2ZW5fbmFtZXMiLCJhdXRob3JfaWQiLCJuYW1lX3N1ZmZpeCIsIm9yY2lkIiwibW92ZV9hdXRob3JfZG93biIsInBvc2l0aW9uIiwiZmluZEluZGV4IiwibGVuZ3RoIiwiY29uY2F0Iiwic2xpY2UiLCJyZXZlcnNlIiwibW92ZV9hdXRob3JfdXAiLCJyZW1vdmVfYXV0aG9yIiwiZmlsdGVyIiwiYWRkX2lkZW50aWZpZXIiLCJpZGVudGlmaWVycyIsImlkZW50aWZpZXJfaWQiLCJ0eXBlIiwibW92ZV9pZGVudGlmaWVyX2Rvd24iLCJpZGVudGlmaWVyIiwibW92ZV9pZGVudGlmaWVyX3VwIiwicmVtb3ZlX2lkZW50aWZpZXIiLCJ1cGRhdGVfaWRlbnRpZmllcl90eXBlIiwidXBkYXRlX2lkZW50aWZpZXJfdmFsdWUiLCJhZGRfaWRlbnRpZmllcnMiLCJyZW1vdmVfaWRlbnRpZmllcnMiLCJrZXl3b3JkcyIsImtleXdvcmRfaWQiLCJ0ZXh0IiwibW92ZV9kb3duIiwia2V5d29yZCIsIm1vdmVfdXAiLCJkYXRlX3JlbGVhc2VkIiwiZG9pIiwibGljZW5zZSIsInJlcG9zaXRvcnlfY29kZSIsImFkZF9xdW90ZXMiLCJzIiwiZXNjYXBlX3F1b3RlcyIsInJlcGxhY2UiLCJyZSIsIlJlZ0V4cCIsInRlc3QiLCJpbmRlbnQiLCJpc19tdWx0aWxpbmUiLCJjb21wdXRlX2NmZiIsImxpbmVzIiwiaGFzT3duUHJvcGVydHkiLCJjZmZfdmVyc2lvbiIsIm1lc3NhZ2UiLCJ0aXRsZSIsInZlcnNpb24iLCJqb2luIiwidXBkYXRlX2ZhbWlseV9uYW1lcyIsInVwZGF0ZV9naXZlbl9uYW1lcyIsInVwZGF0ZV9jZmZfdmVyc2lvbiIsInVwZGF0ZV9kYXRlX3JlbGVhc2VkIiwidXBkYXRlX2RvaSIsInVwZGF0ZV9tZXNzYWdlIiwidXBkYXRlX2xpY2Vuc2UiLCJ1cGRhdGVfcmVwb3NpdG9yeV9jb2RlIiwidXBkYXRlX3RpdGxlIiwic2F2ZV90ZXh0X2FzX2ZpbGUiLCJ0ZXh0VG9TYXZlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRleHRUb1NhdmVBc0Jsb2IiLCJCbG9iIiwidGV4dFRvU2F2ZUFzVVJMIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZmlsZU5hbWVUb1NhdmVBcyIsImRvd25sb2FkTGluayIsImNyZWF0ZUVsZW1lbnQiLCJkb3dubG9hZCIsImlubmVySFRNTCIsImhyZWYiLCJvbmNsaWNrIiwiZGVzdHJveUNsaWNrZWRFbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJldmVudCIsInJlbW92ZUNoaWxkIiwidGFyZ2V0IiwiYWRkX2Fic3RyYWN0IiwiJGVtaXQiLCJhZGRfYWZmaWxpYXRpb24iLCJhZGRfZGF0ZV9yZWxlYXNlZCIsImFkZF9kb2kiLCJhZGRfa2V5d29yZCIsImFkZF9rZXl3b3JkcyIsImFkZF9saWNlbnNlIiwiYWRkX25hbWVfcGFydGljbGUiLCJhZGRfbmFtZV9zdWZmaXgiLCJhZGRfb3JjaWQiLCJhZGRfcmVwb3NpdG9yeV9jb2RlIiwiYWRkX3RpdGxlIiwiYWRkX3ZlcnNpb24iLCJtb3ZlX2tleXdvcmRfZG93biIsIm1vdmVfa2V5d29yZF91cCIsInJlbW92ZV9hYnN0cmFjdCIsInJlbW92ZV9hZmZpbGlhdGlvbiIsInJlbW92ZV9rZXl3b3JkIiwicmVtb3ZlX2tleXdvcmRzIiwicmVtb3ZlX2RhdGVfcmVsZWFzZWQiLCJyZW1vdmVfZG9pIiwicmVtb3ZlX2xpY2Vuc2UiLCJyZW1vdmVfbmFtZV9wYXJ0aWNsZSIsInJlbW92ZV9uYW1lX3N1ZmZpeCIsInJlbW92ZV9vcmNpZCIsInJlbW92ZV9yZXBvc2l0b3J5X2NvZGUiLCJyZW1vdmVfdGl0bGUiLCJyZW1vdmVfdmVyc2lvbiIsInVwZGF0ZV9hYnN0cmFjdCIsInVwZGF0ZV9uYW1lX3BhcnRpY2xlIiwidXBkYXRlX25hbWVfc3VmZml4IiwidXBkYXRlX29yY2lkIiwidXBkYXRlX2FmZmlsaWF0aW9uIiwidXBkYXRlX2tleXdvcmQiLCJ1cGRhdGVfdmVyc2lvbiIsInZhbGlkYXRlIiwiZXJyb3IiLCJtc2ciLCJvbGRfcGF5bG9hZCIsIm5ld19wYXlsb2FkIiwiT2JqZWN0IiwiYXNzaWduIiwieXl5eSIsIm1tIiwiZGQiLCJyZWdleHBzIiwibWF0Y2hlcyIsIm1hcCIsInJlZ2V4cCIsImF0X2xlYXN0X29uZV9tYXRjaGVzIiwiaW5jbHVkZXMiLCJ2YWxpZGF0ZV90eXBlIiwiYXV0aG9yaXplZF9zZXQiLCJTZXQiLCJoYXMiLCJ2YWxpZGF0ZV92YWx1ZSIsInZhbGlkYXRlX2xpY2Vuc2UiLCJ2YWxpZGF0ZV9jZmZfdmVyc2lvbiIsInZhbGlkYXRlX21lc3NhZ2UiLCJtaW5fbGVuZ3RoIiwiVnVlIiwiZWwiLCJyZW5kZXIiLCJoIiwiQXBwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSxHQUFULEdBQWdCO0FBQ25CLFNBQUtDLFFBQUwsR0FBZ0IsRUFBaEI7QUFDSDs7QUFFTSxTQUFTQyxNQUFULEdBQW1CO0FBQ3RCLFNBQUtELFFBQUwsR0FBZ0JFLFNBQWhCO0FBQ0g7O0FB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QztBQUNBLElBQUksZ0JBQWU7QUFDbkI7QUFDQSxJQUFJLDBCQUF5QjtBQUNnRTtBQUM3RixJQUFJLGFBQVMsR0FBRyxrQkFBa0I7QUFDbEMsRUFBRSxHQUFjO0FBQ2hCLEVBQUUsVUFBYztBQUNoQixFQUFFLG1CQUF5QjtBQUMzQixFQUFFLDRCQUEyQjtBQUM3QixFQUFFLGVBQWM7QUFDaEIsRUFBRSxnQkFBZTtBQUNqQixFQUFFLDBCQUF5QjtBQUMzQjtBQUNBLGFBQVM7O0FBRVQ7QUFDQSxJQUFJLEtBQVUsRUFBRSxFQWFYOztBQUVVLHlEQUFTLFFBQVE7OztBQzlDaEM7QUFDQTs7QUFFQSxJQUFJdUIsMEJBQUosQ0FBUTtBQUNKQyxRQUFJLE1BREE7QUFFSkMsWUFBUUMsS0FBS0EsRUFBRUMsT0FBRjtBQUZULENBQVIiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYWRkICgpIHtcbiAgICB0aGlzLmFic3RyYWN0ID0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIHRoaXMuYWJzdHJhY3QgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLmFic3RyYWN0ID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKHBheWxvYWQpIHtcbiAgICBsZXQgYXV0aG9yID0gdGhpcy5hdXRob3JzLmZpbmQoZnVuY3Rpb24gKGF1dGhvcikge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IHBheWxvYWQuaWQ7XG4gICAgfSk7XG4gICAgYXV0aG9yLmFmZmlsaWF0aW9uID0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKHBheWxvYWQpIHtcbiAgICBsZXQgYXV0aG9yID0gdGhpcy5hdXRob3JzLmZpbmQoZnVuY3Rpb24gKGF1dGhvcikge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IHBheWxvYWQuaWQ7XG4gICAgfSk7XG4gICAgYXV0aG9yLmFmZmlsaWF0aW9uID0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlIChwYXlsb2FkKSB7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuYXV0aG9ycy5maW5kKGZ1bmN0aW9uIChhdXRob3IpIHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCA9PSBwYXlsb2FkLmlkO1xuICAgIH0pO1xuICAgIGF1dGhvci5hZmZpbGlhdGlvbiA9IHBheWxvYWQudmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkKHBheWxvYWQpIHtcbiAgICBsZXQgYXV0aG9yID0gdGhpcy5hdXRob3JzLmZpbmQoKGF1dGhvcikgPT4ge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IHBheWxvYWQuaWRcbiAgICB9KVxuICAgIGF1dGhvci5uYW1lX3BhcnRpY2xlID0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUocGF5bG9hZCkge1xuICAgIGxldCBhdXRob3IgPSB0aGlzLmF1dGhvcnMuZmluZCgoYXV0aG9yKSA9PiB7XG4gICAgICAgIHJldHVybiBhdXRob3IuaWQgPT0gcGF5bG9hZC5pZFxuICAgIH0pXG4gICAgYXV0aG9yLm5hbWVfcGFydGljbGUgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocGF5bG9hZCkge1xuICAgIGxldCBhdXRob3IgPSB0aGlzLmF1dGhvcnMuZmluZCgoYXV0aG9yKSA9PiB7XG4gICAgICAgIHJldHVybiBhdXRob3IuaWQgPT0gcGF5bG9hZC5pZFxuICAgIH0pXG4gICAgYXV0aG9yLm5hbWVfcGFydGljbGUgPSBwYXlsb2FkLnZhbHVlO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZF9hdXRob3IgKCkge1xuICAgIHRoaXMuYXV0aG9ycy5wdXNoKHtcbiAgICAgICAgYWZmaWxpYXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZmFtaWx5X25hbWVzOiAnJyxcbiAgICAgICAgZ2l2ZW5fbmFtZXM6ICcnLFxuICAgICAgICBpZDogdGhpcy5hdXRob3JfaWQgKz0gMSxcbiAgICAgICAgbmFtZV9wYXJ0aWNsZTogdW5kZWZpbmVkLFxuICAgICAgICBuYW1lX3N1ZmZpeDogdW5kZWZpbmVkLFxuICAgICAgICBvcmNpZDogdW5kZWZpbmVkXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfYXV0aG9yX2Rvd24gKGF1dGhvcl9pZCkge1xuICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuYXV0aG9ycy5maW5kSW5kZXgoZnVuY3Rpb24gKGF1dGhvcikge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IGF1dGhvcl9pZDtcbiAgICB9KTtcbiAgICBpZiAocG9zaXRpb24gPCB0aGlzLmF1dGhvcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmF1dGhvcnMgPSBbXS5jb25jYXQodGhpcy5hdXRob3JzLnNsaWNlKDAsIHBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aG9ycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhvcnMuc2xpY2UocG9zaXRpb24gKyAyKSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2F1dGhvcl91cCAoYXV0aG9yX2lkKSB7XG4gICAgbGV0IHBvc2l0aW9uID0gdGhpcy5hdXRob3JzLmZpbmRJbmRleChmdW5jdGlvbiAoYXV0aG9yKSB7XG4gICAgICAgIHJldHVybiBhdXRob3IuaWQgPT0gYXV0aG9yX2lkO1xuICAgIH0pO1xuICAgIGlmIChwb3NpdGlvbiA+IDApIHtcbiAgICAgICAgdGhpcy5hdXRob3JzID0gW10uY29uY2F0KHRoaXMuYXV0aG9ycy5zbGljZSgwLCBwb3NpdGlvbiAtIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRob3JzLnNsaWNlKHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gKyAxKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhvcnMuc2xpY2UocG9zaXRpb24gKyAxKSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfYXV0aG9yIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLmF1dGhvcnMgPSB0aGlzLmF1dGhvcnMuZmlsdGVyKGZ1bmN0aW9uIChhdXRob3IpIHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCAhPT0gYXV0aG9yX2lkO1xuICAgIH0pXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkX2lkZW50aWZpZXIoKSB7XG4gICAgdGhpcy5pZGVudGlmaWVycy5wdXNoKHtcbiAgICAgICAgaWQ6IHRoaXMuaWRlbnRpZmllcl9pZCArPSAxLFxuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfaWRlbnRpZmllcl9kb3duKGlkZW50aWZpZXJfaWQpIHtcbiAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmlkZW50aWZpZXJzLmZpbmRJbmRleChmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gaWRlbnRpZmllci5pZCA9PSBpZGVudGlmaWVyX2lkO1xuICAgIH0pO1xuICAgIGlmIChwb3NpdGlvbiA8IHRoaXMuaWRlbnRpZmllcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmlkZW50aWZpZXJzID0gW10uY29uY2F0KHRoaXMuaWRlbnRpZmllcnMuc2xpY2UoMCwgcG9zaXRpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnMuc2xpY2UocG9zaXRpb24gKyAyKSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfdXAoaWRlbnRpZmllcl9pZCkge1xuICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuaWRlbnRpZmllcnMuZmluZEluZGV4KGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBpZGVudGlmaWVyLmlkID09IGlkZW50aWZpZXJfaWQ7XG4gICAgfSk7XG4gICAgaWYgKHBvc2l0aW9uID4gMCkge1xuICAgICAgICB0aGlzLmlkZW50aWZpZXJzID0gW10uY29uY2F0KHRoaXMuaWRlbnRpZmllcnMuc2xpY2UoMCwgcG9zaXRpb24gLSAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXJzLnNsaWNlKHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gKyAxKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pZGVudGlmaWVycy5zbGljZShwb3NpdGlvbiArIDEpKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9pZGVudGlmaWVyKGlkZW50aWZpZXJfaWQpIHtcbiAgICB0aGlzLmlkZW50aWZpZXJzID0gdGhpcy5pZGVudGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aWZpZXIuaWQgIT09IGlkZW50aWZpZXJfaWQ7XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUocGF5bG9hZCkge1xuICAgIGxldCBpZGVudGlmaWVyID0gdGhpcy5pZGVudGlmaWVycy5maW5kKGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBpZGVudGlmaWVyLmlkID09IHBheWxvYWQuaWQ7XG4gICAgfSk7XG4gICAgaWRlbnRpZmllci50eXBlID0gcGF5bG9hZC52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlKHBheWxvYWQpIHtcbiAgICBsZXQgaWRlbnRpZmllciA9IHRoaXMuaWRlbnRpZmllcnMuZmluZChmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gaWRlbnRpZmllci5pZCA9PSBwYXlsb2FkLmlkO1xuICAgIH0pO1xuICAgIGlkZW50aWZpZXIudmFsdWUgPSBwYXlsb2FkLnZhbHVlO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZF9pZGVudGlmaWVyICgpIHtcbiAgICB0aGlzLmlkZW50aWZpZXJzLnB1c2goe1xuICAgICAgICB0eXBlOiAnJyxcbiAgICAgICAgdmFsdWU6ICcnXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9pZGVudGlmaWVycygpIHtcbiAgICB0aGlzLmlkZW50aWZpZXJzID0gW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfZG93biAoaWRlbnRpZmllcl9pZCkge1xuICAgIGxldCBwb3NpdGlvbiA9IHRoaXMuaWRlbnRpZmllcnMuZmluZEluZGV4KGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBpZGVudGlmaWVyLmlkID09IGlkZW50aWZpZXJfaWQ7XG4gICAgfSk7XG4gICAgaWYgKHBvc2l0aW9uIDwgdGhpcy5pZGVudGlmaWVycy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllcnMgPSBbXS5jb25jYXQodGhpcy5pZGVudGlmaWVycy5zbGljZSgwLCBwb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXJzLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnMuc2xpY2UocG9zaXRpb24gKyAyKSlcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfdXAgKGlkZW50aWZpZXJfaWQpIHtcbiAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmlkZW50aWZpZXJzLmZpbmRJbmRleChmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gaWRlbnRpZmllci5pZCA9PSBpZGVudGlmaWVyX2lkO1xuICAgIH0pO1xuICAgIGlmIChwb3NpdGlvbiA+IDApIHtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVycyA9IFtdLmNvbmNhdCh0aGlzLmlkZW50aWZpZXJzLnNsaWNlKDAsIHBvc2l0aW9uIC0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXJzLnNsaWNlKHBvc2l0aW9uIC0gMSwgcG9zaXRpb24gKyAxKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXJzLnNsaWNlKHBvc2l0aW9uICsgMSkpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2lkZW50aWZpZXIgKGlkZW50aWZpZXJfaWQpIHtcbiAgICB0aGlzLmlkZW50aWZpZXJzID0gdGhpcy5pZGVudGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aWZpZXIuaWQgIT09IGlkZW50aWZpZXJfaWQ7XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9pZGVudGlmaWVycygpIHtcbiAgICB0aGlzLmlkZW50aWZpZXJzID0gdW5kZWZpbmVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB0aGlzLmtleXdvcmRzLnB1c2goe1xuICAgICAgICBpZDogdGhpcy5rZXl3b3JkX2lkICs9IDEsXG4gICAgICAgIHRleHQ6ICcnXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfZG93bihrZXl3b3JkX2lkKSB7XG4gICAgbGV0IHBvc2l0aW9uID0gdGhpcy5rZXl3b3Jkcy5maW5kSW5kZXgoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmQuaWQgPT0ga2V5d29yZF9pZDtcbiAgICB9KTtcbiAgICBpZiAocG9zaXRpb24gPCB0aGlzLmtleXdvcmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy5rZXl3b3JkcyA9IFtdLmNvbmNhdCh0aGlzLmtleXdvcmRzLnNsaWNlKDAsIHBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXdvcmRzLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXdvcmRzLnNsaWNlKHBvc2l0aW9uICsgMikpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV91cChrZXl3b3JkX2lkKSB7XG4gICAgbGV0IHBvc2l0aW9uID0gdGhpcy5rZXl3b3Jkcy5maW5kSW5kZXgoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmQuaWQgPT0ga2V5d29yZF9pZDtcbiAgICB9KTtcbiAgICBpZiAocG9zaXRpb24gPiAwKSB7XG4gICAgICAgIHRoaXMua2V5d29yZHMgPSBbXS5jb25jYXQodGhpcy5rZXl3b3Jkcy5zbGljZSgwLCBwb3NpdGlvbiAtIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2V5d29yZHMuc2xpY2UocG9zaXRpb24gLSAxLCBwb3NpdGlvbiArIDEpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXdvcmRzLnNsaWNlKHBvc2l0aW9uICsgMSkpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGtleXdvcmRfaWQpIHtcbiAgICB0aGlzLmtleXdvcmRzID0gdGhpcy5rZXl3b3Jkcy5maWx0ZXIoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmQuaWQgIT09IGtleXdvcmRfaWQ7XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZShwYXlsb2FkKSB7XG4gICAgbGV0IGtleXdvcmQgPSB0aGlzLmtleXdvcmRzLmZpbmQoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmQuaWQgPT0gcGF5bG9hZC5pZDtcbiAgICB9KTtcbiAgICBrZXl3b3JkLnRleHQ9IHBheWxvYWQudmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkKCkge1xuICAgIHRoaXMua2V5d29yZHMgPSBbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB0aGlzLmtleXdvcmRzID0gdW5kZWZpbmVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB0aGlzLmRhdGVfcmVsZWFzZWQgPSBcIlwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIHRoaXMuZGF0ZV9yZWxlYXNlZCA9IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZShwYXlsb2FkKSB7XG4gICAgdGhpcy5kYXRlX3JlbGVhc2VkID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQoKSB7XG4gICAgdGhpcy5kb2kgPSBcIlwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIHRoaXMuZG9pID0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlKHBheWxvYWQpIHtcbiAgICB0aGlzLmRvaSA9IHBheWxvYWQudmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkKCkge1xuICAgIHRoaXMubGljZW5zZSA9IFwiXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgdGhpcy5saWNlbnNlID0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlKHBheWxvYWQpIHtcbiAgICB0aGlzLmxpY2Vuc2UgPSBwYXlsb2FkLnZhbHVlO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB0aGlzLnJlcG9zaXRvcnlfY29kZSA9IFwiXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgdGhpcy5yZXBvc2l0b3J5X2NvZGUgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocGF5bG9hZCkge1xuICAgIHRoaXMucmVwb3NpdG9yeV9jb2RlID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsImZ1bmN0aW9uIGFkZF9xdW90ZXMgKHMpIHtcbiAgICBmdW5jdGlvbiBlc2NhcGVfcXVvdGVzKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvW1wiXS9nLCdcXFxcXCInKTtcbiAgICB9XG4gICAgbGV0IHJlID0gbmV3IFJlZ0V4cCgnXlthLXpBLVowLTldezAsfSQnKTtcbiAgICBpZiAocmUudGVzdChzKSkge1xuICAgICAgICByZXR1cm4gcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ1wiJyArIGVzY2FwZV9xdW90ZXMocykgKyAnXCInO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5kZW50IChzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvW1xcbl0vZywnXFxuICAgICcpO1xufVxuXG5mdW5jdGlvbiBpc19tdWx0aWxpbmUgKHMpIHtcbiAgICBsZXQgcmUgPSBuZXcgUmVnRXhwKCdbXFxcXG58XFxcXHJdJyk7XG4gICAgcmV0dXJuIHJlLnRlc3Qocyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlX2NmZiAoKSB7XG4gICAgdmFyIGxpbmVzID0gW107XG4gICAgbGluZXMucHVzaCgnIyBZQU1MIDEuMicpO1xuICAgIGxpbmVzLnB1c2goJy0tLScpO1xuICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwiYWJzdHJhY3RcIikgJiYgdGhpcy5hYnN0cmFjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChpc19tdWx0aWxpbmUodGhpcy5hYnN0cmFjdCkpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJ2Fic3RyYWN0OiB8XFxuICAgICcgKyBpbmRlbnQoYWRkX3F1b3Rlcyh0aGlzLmFic3RyYWN0KSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZXMucHVzaCgnYWJzdHJhY3Q6ICcgKyBhZGRfcXVvdGVzKHRoaXMuYWJzdHJhY3QpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxpbmVzLnB1c2goJ2F1dGhvcnM6ICcpO1xuICAgIGZvciAobGV0IGF1dGhvciBvZiB0aGlzLmF1dGhvcnMpIHtcbiAgICAgICAgbGluZXMucHVzaCgnICAtJyk7XG5cbiAgICAgICAgaWYgKGF1dGhvci5oYXNPd25Qcm9wZXJ0eShcImFmZmlsaWF0aW9uXCIpICYmIGF1dGhvci5hZmZpbGlhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCcgICAgYWZmaWxpYXRpb246ICcgKyBhZGRfcXVvdGVzKGF1dGhvci5hZmZpbGlhdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZXMucHVzaCgnICAgIGZhbWlseS1uYW1lczogJyArIGFkZF9xdW90ZXMoYXV0aG9yLmZhbWlseV9uYW1lcykpO1xuXG4gICAgICAgIGxpbmVzLnB1c2goJyAgICBnaXZlbi1uYW1lczogJyArIGFkZF9xdW90ZXMoYXV0aG9yLmdpdmVuX25hbWVzKSk7XG5cbiAgICAgICAgaWYgKGF1dGhvci5oYXNPd25Qcm9wZXJ0eShcIm5hbWVfcGFydGljbGVcIikgJiYgYXV0aG9yLm5hbWVfcGFydGljbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGluZXMucHVzaCgnICAgIG5hbWUtcGFydGljbGU6ICcgKyBhZGRfcXVvdGVzKGF1dGhvci5uYW1lX3BhcnRpY2xlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0aG9yLmhhc093blByb3BlcnR5KFwibmFtZV9zdWZmaXhcIikgJiYgYXV0aG9yLm5hbWVfc3VmZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICBuYW1lLXN1ZmZpeDogJyArIGFkZF9xdW90ZXMoYXV0aG9yLm5hbWVfc3VmZml4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0aG9yLmhhc093blByb3BlcnR5KFwib3JjaWRcIikgJiYgYXV0aG9yLm9yY2lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICBvcmNpZDogXCJodHRwczovL29yY2lkLm9yZy8nICsgYXV0aG9yLm9yY2lkICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGluZXMucHVzaCgnY2ZmLXZlcnNpb246ICcgKyBhZGRfcXVvdGVzKHRoaXMuY2ZmX3ZlcnNpb24pKTtcblxuICAgIGlmICh0aGlzLmRhdGVfcmVsZWFzZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW5lcy5wdXNoKCdkYXRlLXJlbGVhc2VkOiAnICsgdGhpcy5kYXRlX3JlbGVhc2VkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kb2kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW5lcy5wdXNoKCdkb2k6ICcgKyBhZGRfcXVvdGVzKHRoaXMuZG9pKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoXCJpZGVudGlmaWVyc1wiKSAmJiB0aGlzLmlkZW50aWZpZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGluZXMucHVzaCgnaWRlbnRpZmllcnM6ICcpO1xuICAgICAgICBmb3IgKGxldCBpZGVudGlmaWVyIG9mIHRoaXMuaWRlbnRpZmllcnMpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgLSAnKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICB0eXBlOiAnICsgYWRkX3F1b3RlcyhpZGVudGlmaWVyLnR5cGUpKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICB2YWx1ZTogJyArIGFkZF9xdW90ZXMoaWRlbnRpZmllci52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoXCJrZXl3b3Jkc1wiKSAmJiB0aGlzLmtleXdvcmRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGluZXMucHVzaCgna2V5d29yZHM6ICcpO1xuICAgICAgICBmb3IgKGxldCBrZXl3b3JkIG9mIHRoaXMua2V5d29yZHMpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgLSAnICsgYWRkX3F1b3RlcyhrZXl3b3JkLnRleHQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmxpY2Vuc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW5lcy5wdXNoKCdsaWNlbnNlOiAnICsgYWRkX3F1b3Rlcyh0aGlzLmxpY2Vuc2UpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNfbXVsdGlsaW5lKHRoaXMubWVzc2FnZSkpIHtcbiAgICAgICAgbGluZXMucHVzaCgnbWVzc2FnZTogfFxcbiAgICAnICsgaW5kZW50KGFkZF9xdW90ZXModGhpcy5tZXNzYWdlKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmVzLnB1c2goJ21lc3NhZ2U6ICcgKyBhZGRfcXVvdGVzKHRoaXMubWVzc2FnZSkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcG9zaXRvcnlfY29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpbmVzLnB1c2goJ3JlcG9zaXRvcnktY29kZTogJyArIGFkZF9xdW90ZXModGhpcy5yZXBvc2l0b3J5X2NvZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpbmVzLnB1c2goJ3RpdGxlOiAnICsgYWRkX3F1b3Rlcyh0aGlzLnRpdGxlKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpbmVzLnB1c2goJ3ZlcnNpb246ICcgKyBhZGRfcXVvdGVzKHRoaXMudmVyc2lvbikpO1xuICAgIH1cblxuICAgIGxpbmVzLnB1c2goJy4uLicpO1xuXG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9mYW1pbHlfbmFtZXMocGF5bG9hZCkge1xuICAgIGxldCBhdXRob3IgPSB0aGlzLmF1dGhvcnMuZmluZChmdW5jdGlvbiAoYXV0aG9yKSB7XG4gICAgICAgIHJldHVybiBhdXRob3IuaWQgPT0gcGF5bG9hZC5pZDtcbiAgICB9KTtcbiAgICBhdXRob3IuZmFtaWx5X25hbWVzID0gcGF5bG9hZC52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9naXZlbl9uYW1lcyhwYXlsb2FkKSB7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuYXV0aG9ycy5maW5kKGZ1bmN0aW9uIChhdXRob3IpIHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCA9PSBwYXlsb2FkLmlkO1xuICAgIH0pO1xuICAgIGF1dGhvci5naXZlbl9uYW1lcyA9IHBheWxvYWQudmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkKHBheWxvYWQpIHtcbiAgICBsZXQgYXV0aG9yID0gdGhpcy5hdXRob3JzLmZpbmQoKGF1dGhvcikgPT4ge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IHBheWxvYWQuaWRcbiAgICB9KVxuICAgIGF1dGhvci5vcmNpZCA9ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKHBheWxvYWQpIHtcbiAgICBsZXQgYXV0aG9yID0gdGhpcy5hdXRob3JzLmZpbmQoKGF1dGhvcikgPT4ge1xuICAgICAgICByZXR1cm4gYXV0aG9yLmlkID09IHBheWxvYWQuaWRcbiAgICB9KVxuICAgIGF1dGhvci5vcmNpZCA9IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZShwYXlsb2FkKSB7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuYXV0aG9ycy5maW5kKChhdXRob3IpID0+IHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCA9PSBwYXlsb2FkLmlkXG4gICAgfSlcbiAgICBhdXRob3Iub3JjaWQgPSBwYXlsb2FkLnZhbHVlO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZChwYXlsb2FkKSB7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuYXV0aG9ycy5maW5kKChhdXRob3IpID0+IHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCA9PSBwYXlsb2FkLmlkXG4gICAgfSlcbiAgICBhdXRob3IubmFtZV9zdWZmaXggPSAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShwYXlsb2FkKSB7XG4gICAgbGV0IGF1dGhvciA9IHRoaXMuYXV0aG9ycy5maW5kKChhdXRob3IpID0+IHtcbiAgICAgICAgcmV0dXJuIGF1dGhvci5pZCA9PSBwYXlsb2FkLmlkXG4gICAgfSlcbiAgICBhdXRob3IubmFtZV9zdWZmaXggPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocGF5bG9hZCkge1xuICAgIGxldCBhdXRob3IgPSB0aGlzLmF1dGhvcnMuZmluZCgoYXV0aG9yKSA9PiB7XG4gICAgICAgIHJldHVybiBhdXRob3IuaWQgPT0gcGF5bG9hZC5pZFxuICAgIH0pXG4gICAgYXV0aG9yLm5hbWVfc3VmZml4ID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfY2ZmX3ZlcnNpb24ocGF5bG9hZCkge1xuICAgIHRoaXMuY2ZmX3ZlcnNpb24gPSBwYXlsb2FkLnZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2RhdGVfcmVsZWFzZWQocGF5bG9hZCkge1xuICAgIHRoaXMuZGF0ZV9yZWxlYXNlZCA9IHBheWxvYWQudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZG9pKHBheWxvYWQpIHtcbiAgICB0aGlzLmRvaSA9IHBheWxvYWQudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbWVzc2FnZShwYXlsb2FkKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gcGF5bG9hZC52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9saWNlbnNlKHBheWxvYWQpIHtcbiAgICB0aGlzLmxpY2Vuc2UgPSBwYXlsb2FkLnZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3JlcG9zaXRvcnlfY29kZShwYXlsb2FkKSB7XG4gICAgdGhpcy5yZXBvc2l0b3J5X2NvZGUgPSBwYXlsb2FkLnZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3RpdGxlKHBheWxvYWQpIHtcbiAgICB0aGlzLnRpdGxlID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vdGhpc2NvdWxkYmViZXR0ZXIud29yZHByZXNzLmNvbS8yMDEyLzEyLzE4L2xvYWRpbmctZWRpdGluZy1hbmQtc2F2aW5nLWEtdGV4dC1maWxlLWluLWh0bWw1LXVzaW5nLWphdmFzY3JpcC9cbmV4cG9ydCBmdW5jdGlvbiBzYXZlX3RleHRfYXNfZmlsZSgpIHtcbiAgICB2YXIgdGV4dFRvU2F2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjZmZ0ZXh0JykudmFsdWU7XG4gICAgdmFyIHRleHRUb1NhdmVBc0Jsb2IgPSBuZXcgQmxvYihbdGV4dFRvU2F2ZV0sIHt0eXBlOlwidGV4dC9wbGFpblwifSk7XG4gICAgdmFyIHRleHRUb1NhdmVBc1VSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHRleHRUb1NhdmVBc0Jsb2IpO1xuICAgIHZhciBmaWxlTmFtZVRvU2F2ZUFzID0gJ0NJVEFUSU9OLmNmZic7XG5cbiAgICB2YXIgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgZG93bmxvYWRMaW5rLmRvd25sb2FkID0gZmlsZU5hbWVUb1NhdmVBcztcbiAgICBkb3dubG9hZExpbmsuaW5uZXJIVE1MID0gXCJEb3dubG9hZCBGaWxlXCI7XG4gICAgZG93bmxvYWRMaW5rLmhyZWYgPSB0ZXh0VG9TYXZlQXNVUkw7XG4gICAgZG93bmxvYWRMaW5rLm9uY2xpY2sgPSBkZXN0cm95Q2xpY2tlZEVsZW1lbnQ7XG4gICAgZG93bmxvYWRMaW5rLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkTGluayk7XG5cbiAgICBkb3dubG9hZExpbmsuY2xpY2soKTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveUNsaWNrZWRFbGVtZW50KGV2ZW50KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChldmVudC50YXJnZXQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB0aGlzLnRpdGxlID0gXCJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB0aGlzLnRpdGxlID0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlKHBheWxvYWQpIHtcbiAgICB0aGlzLnRpdGxlID0gcGF5bG9hZC52YWx1ZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQoKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gXCJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB0aGlzLnZlcnNpb24gPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUocGF5bG9hZCkge1xuICAgIHRoaXMudmVyc2lvbiA9IHBheWxvYWQudmFsdWU7XG59XG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImNmZlwiPlxuICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIGlkPVwiY2ZmdGV4dFwiXG4gICAgICAgICAgICB2LW1vZGVsPVwiY2ZmXCJcbiAgICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ0NmZlRleHQnLFxuICAgIHByb3BzOiB7XG4gICAgICAgIGNmZjogU3RyaW5nXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cbjxzdHlsZT5cbiAgICAuY2ZmIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgZmxleC1iYXNpczogMC4wO1xuICAgICAgICBmbGV4LWdyb3c6IDEuMDtcbiAgICAgICAgaGVpZ2h0OiA3NXZoO1xuICAgICAgICBtYXJnaW4tbGVmdDogMSU7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMSU7XG4gICAgfVxuXG4gICAgLmNmZiB0ZXh0YXJlYSB7XG4gICAgICAgIGJvcmRlci13aWR0aDogMHB4O1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIHJlc2l6ZTogbm9uZTtcbiAgICAgICAgd2hpdGUtc3BhY2U6IHByZTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNmZlwiIH0sIFtcbiAgICBfYyhcInRleHRhcmVhXCIsIHtcbiAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgeyBuYW1lOiBcIm1vZGVsXCIsIHJhd05hbWU6IFwidi1tb2RlbFwiLCB2YWx1ZTogX3ZtLmNmZiwgZXhwcmVzc2lvbjogXCJjZmZcIiB9XG4gICAgICBdLFxuICAgICAgYXR0cnM6IHsgaWQ6IFwiY2ZmdGV4dFwiLCByZWFkb25seTogXCJcIiwgdGFiaW5kZXg6IFwiLTFcIiB9LFxuICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jZmYgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBfdm0uY2ZmID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTdhMzNjMDQ3XCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2NyaXB0RXhwb3J0cyA9IHNjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9DZmZUZXh0LnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9DZmZUZXh0LnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ2ZmVGV4dC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2EzM2MwNDdcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQ2ZmVGV4dC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQ2ZmVGV4dC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtN2EzM2MwNDdcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi03YTMzYzA0N1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkX2Fic3RyYWN0ICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtYWJzdHJhY3QnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9hZmZpbGlhdGlvbiAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1hZmZpbGlhdGlvbicsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2F1dGhvciAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWF1dGhvcicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2RhdGVfcmVsZWFzZWQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1kYXRlLXJlbGVhc2VkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfZG9pICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtZG9pJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfaWRlbnRpZmllciAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWlkZW50aWZpZXInKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9pZGVudGlmaWVycyAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWlkZW50aWZpZXJzJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfa2V5d29yZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWtleXdvcmQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9rZXl3b3JkcyAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWtleXdvcmRzJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbGljZW5zZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWxpY2Vuc2UnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9uYW1lX3BhcnRpY2xlIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLW5hbWUtcGFydGljbGUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9uYW1lX3N1ZmZpeCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1uYW1lLXN1ZmZpeCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX29yY2lkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLW9yY2lkJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfcmVwb3NpdG9yeV9jb2RlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtcmVwb3NpdG9yeS1jb2RlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfdGl0bGUgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC10aXRsZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX3ZlcnNpb24gKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC12ZXJzaW9uJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2F1dGhvcl9kb3duIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWF1dGhvci1kb3duJywgYXV0aG9yX2lkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfYXV0aG9yX3VwIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWF1dGhvci11cCcsIGF1dGhvcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfZG93biAoaWRlbnRpZmllcl9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUtaWRlbnRpZmllci1kb3duJywgaWRlbnRpZmllcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfdXAgKGlkZW50aWZpZXJfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWlkZW50aWZpZXItdXAnLCBpZGVudGlmaWVyX2lkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfa2V5d29yZF9kb3duIChrZXl3b3JkX2lkKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1rZXl3b3JkLWRvd24nLCBrZXl3b3JkX2lkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfa2V5d29yZF91cCAoa2V5d29yZF9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUta2V5d29yZC11cCcsIGtleXdvcmRfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2Fic3RyYWN0ICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtYWJzdHJhY3QnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9hdXRob3IgKGF1dGhvcl9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1hdXRob3InLCBhdXRob3JfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2FmZmlsaWF0aW9uIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWFmZmlsaWF0aW9uJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllciAoaWRlbnRpZmllcl9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVyJywgaWRlbnRpZmllcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllcnMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVycycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2tleXdvcmQgKGtleXdvcmRfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUta2V5d29yZCcsIGtleXdvcmRfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2tleXdvcmRzICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUta2V5d29yZHMnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9kYXRlX3JlbGVhc2VkICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtZGF0ZS1yZWxlYXNlZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2RvaSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWRvaScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2xpY2Vuc2UgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1saWNlbnNlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfbmFtZV9wYXJ0aWNsZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1uYW1lLXBhcnRpY2xlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9vcmNpZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1vcmNpZCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX3JlcG9zaXRvcnlfY29kZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLXJlcG9zaXRvcnktY29kZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX3RpdGxlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtdGl0bGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV92ZXJzaW9uICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtdmVyc2lvbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2Fic3RyYWN0IChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWFic3RyYWN0JywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZ2l2ZW5fbmFtZXMgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtZ2l2ZW4tbmFtZXMnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9uYW1lX3BhcnRpY2xlIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLW5hbWUtcGFydGljbGUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9mYW1pbHlfbmFtZXMgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtZmFtaWx5LW5hbWVzJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9vcmNpZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1vcmNpZCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2FmZmlsaWF0aW9uIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWFmZmlsaWF0aW9uJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZGF0ZV9yZWxlYXNlZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1kYXRlLXJlbGVhc2VkJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZG9pIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWRvaScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2lkZW50aWZpZXJfdHlwZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1pZGVudGlmaWVyLXR5cGUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWlkZW50aWZpZXItdmFsdWUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9rZXl3b3JkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWtleXdvcmQnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9saWNlbnNlIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWxpY2Vuc2UnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9yZXBvc2l0b3J5X2NvZGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtcmVwb3NpdG9yeS1jb2RlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfdGl0bGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtdGl0bGUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV92ZXJzaW9uIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLXZlcnNpb24nLCBwYXlsb2FkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2FmZmlsaWF0aW9uIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWFmZmlsaWF0aW9uJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbmFtZV9wYXJ0aWNsZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1uYW1lLXBhcnRpY2xlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9vcmNpZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1vcmNpZCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9kb3duIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWRvd24nLCBhdXRob3JfaWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX3VwIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLXVwJywgYXV0aG9yX2lkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlIChhdXRob3JfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUnLCBhdXRob3JfaWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfYWZmaWxpYXRpb24gKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtYWZmaWxpYXRpb24nLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX25hbWVfcGFydGljbGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtbmFtZS1wYXJ0aWNsZScsIHBheWxvYWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX29yY2lkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLW9yY2lkJywgcGF5bG9hZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9hZmZpbGlhdGlvbiAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1hZmZpbGlhdGlvbicsIHBheWxvYWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZmFtaWx5X25hbWVzIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWZhbWlseS1uYW1lcycsIHBheWxvYWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZ2l2ZW5fbmFtZXMgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtZ2l2ZW4tbmFtZXMnLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX25hbWVfcGFydGljbGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtbmFtZS1wYXJ0aWNsZScsIHBheWxvYWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX29yY2lkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLW9yY2lkJywgcGF5bG9hZClcbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8cCBjbGFzcz1cImhlbHAtdGV4dFwiPlxuICAgICAgICB7e3RleHR9fVxuICAgICAgICA8YSBjbGFzcz1cInNwZWMtbGlua1wiIHRhcmdldD1cImRvY3NcIiB2LWJpbmQ6aHJlZj1cInVybFwiPihzcGVjKTwvYT5cbiAgICA8L3A+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ0hlbHBUZXh0JyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICB0ZXh0OiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH1cbn07XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gICAgcC5oZWxwLXRleHQge1xuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgICB9XG4gICAgYS5zcGVjLWxpbmsge1xuICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgfVxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVscC10ZXh0XCIgfSwgW1xuICAgIF92bS5fdihcIlxcbiAgICBcIiArIF92bS5fcyhfdm0udGV4dCkgKyBcIlxcbiAgICBcIiksXG4gICAgX2MoXG4gICAgICBcImFcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwic3BlYy1saW5rXCIsIGF0dHJzOiB7IHRhcmdldDogXCJkb2NzXCIsIGhyZWY6IF92bS51cmwgfSB9LFxuICAgICAgW192bS5fdihcIihzcGVjKVwiKV1cbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi1mMmUxNTNmMlwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0hlbHBUZXh0LnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9IZWxwVGV4dC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0hlbHBUZXh0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1mMmUxNTNmMlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9IZWxwVGV4dC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvSGVscFRleHQudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWYyZTE1M2YyXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtZjJlMTUzZjJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlIChldmVudCkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfTtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUnLCBwYXlsb2FkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHRoaXMuYWZmaWxpYXRpb24gPT0gJycsXG4gICAgICAgIG1zZzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBzdHJpbmcgb3IgcmVtb3ZlIHRoZSBwcm9wZXJ0eSBlbnRpcmVseS5cIlxuICAgIH1cbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGkgdi1pZj1cImhhc19hZmZpbGlhdGlvblwiPlxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIGFmZmlsaWF0aW9uXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgYWZmaWxpYXRpb25cIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB0ZXh0PVwiVG8gc3BlY2lmeSB0aGUgYWZmaWxpYXRpb24gb2YgYSBwZXJzb24sIGUuZy4sIGEgdW5pdmVyc2l0eSwgcmVzZWFyY2ggY2VudHJlLCBldGMuXCJcbiAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNleGVtcGxhcnktdXNlcy0yXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJ7ZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IgfVwiXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJhZmZpbGlhdGlvblwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2LW9uOmlucHV0PVwidXBkYXRlKCRldmVudClcIlxuICAgICAgICA+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LWlmPVwidmFsaWRhdGlvbi5lcnJvclwiXG4gICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyB2YWxpZGF0aW9uLm1zZyB9fVxuICAgICAgICA8L3A+XG4gICAgPC9saT5cbiAgICA8bGkgdi1lbHNlPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIGFmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJhZGRcIlxuICAgICAgICA+XG4gICAgICAgICAgICBBZGQgYWZmaWxpYXRpb25cbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cblxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcblxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL0FmZmlsaWF0aW9uRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL0FmZmlsaWF0aW9uVmFsaWRhdG9ycy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQWZmaWxpYXRpb24nLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGFmZmlsaWF0aW9uOiBTdHJpbmdcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhhc19hZmZpbGlhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCdhZmZpbGlhdGlvbicpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMuYWZmaWxpYXRpb24gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGlvbjogdmFsaWRhdGVcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIHVwZGF0ZVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICBidXR0b24ge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMS4wZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLmhhc19hZmZpbGlhdGlvblxuICAgID8gX2MoXG4gICAgICAgIFwibGlcIixcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIGFmZmlsaWF0aW9uXFxuICAgICAgICBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIlJlbW92ZSBhZmZpbGlhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmUgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgcmVtb3ZlXFxuICAgICAgICBcIildXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHRleHQ6XG4gICAgICAgICAgICAgICAgXCJUbyBzcGVjaWZ5IHRoZSBhZmZpbGlhdGlvbiBvZiBhIHBlcnNvbiwgZS5nLiwgYSB1bml2ZXJzaXR5LCByZXNlYXJjaCBjZW50cmUsIGV0Yy5cIixcbiAgICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBjbGFzczogeyBlcnJvcjogX3ZtLnZhbGlkYXRpb24uZXJyb3IgfSxcbiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiIH0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmFmZmlsaWF0aW9uIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS52YWxpZGF0aW9uLmVycm9yXG4gICAgICAgICAgICA/IF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0udmFsaWRhdGlvbi5tc2cpICsgXCJcXG4gICAgXCIpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgIClcbiAgICA6IF9jKFwibGlcIiwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBhZmZpbGlhdGlvblwiIH0sXG4gICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBBZGQgYWZmaWxpYXRpb25cXG4gICAgXCIpXVxuICAgICAgICApXG4gICAgICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtMWIzMGJiODdcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTFiMzBiYjg3XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQWZmaWxpYXRpb24udnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FmZmlsaWF0aW9uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWZmaWxpYXRpb24udnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTFiMzBiYjg3XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQWZmaWxpYXRpb24udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTFiMzBiYjg3XCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0FmZmlsaWF0aW9uLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0xYjMwYmI4N1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTFiMzBiYjg3XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdhZGQnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgncmVtb3ZlJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlJywgcGF5bG9hZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUgKCkge1xuICAgIGxldCByZSA9IG5ldyBSZWdFeHAoJ15bMC05XXs0fS1bMC05XXs0fS1bMC05XXs0fS1bMC05XXszfVswLTlYXSQnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogIXJlLnRlc3QodGhpcy5vcmNpZCksXG4gICAgICAgIG1zZzogXCJTaG91bGQgaGF2ZSB0aGUgZm9ybWF0IDAwMDAtMDAwMC0wMDAwLTAwMDBcIlxuICAgIH1cbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGkgdi1pZj1cImhhc19vcmNpZFwiPlxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIG9yY2lkXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB0ZXh0PVwiVGhlIHBlcnNvbidzIE9SQ0lEIGlELlwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjZXhlbXBsYXJ5LXVzZXMtMVwiXG4gICAgICAgIC8+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdi1iaW5kOnZhbHVlPVwib3JjaWRcIlxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiB2YWxpZGF0aW9uLmVycm9yIH1cIlxuICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZSgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1pZj1cInZhbGlkYXRpb24uZXJyb3JcIlxuICAgICAgICAgICAgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgICAgICAge3sgdmFsaWRhdGlvbi5tc2cgfX1cbiAgICAgICAgPC9wPlxuICAgIDwvbGk+XG4gICAgPGxpIHYtZWxzZT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIkFkZCBvcmNpZFwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIG9yY2lkXG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL09yY2lkRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL09yY2lkVmFsaWRhdG9ycy5qcyc7XG5cbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnT3JjaWQnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIG9yY2lkOiBTdHJpbmdcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhhc19vcmNpZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCdvcmNpZCcpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMub3JjaWQgIT09IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0ZVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uaGFzX29yY2lkXG4gICAgPyBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgb3JjaWRcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIG9yY2lkXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnJlbW92ZSB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgdGV4dDogXCJUaGUgcGVyc29uJ3MgT1JDSUQgaUQuXCIsXG4gICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNleGVtcGxhcnktdXNlcy0xXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm9yY2lkIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS52YWxpZGF0aW9uLmVycm9yXG4gICAgICAgICAgICA/IF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLnZhbGlkYXRpb24ubXNnKSArIFwiXFxuICAgIFwiKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICBdLFxuICAgICAgICAxXG4gICAgICApXG4gICAgOiBfYyhcImxpXCIsIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJBZGQgb3JjaWRcIiB9LFxuICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hZGQgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW192bS5fdihcIlxcbiAgICAgICAgQWRkIG9yY2lkXFxuICAgIFwiKV1cbiAgICAgICAgKVxuICAgICAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LWVhNmQyYjVjXCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vT3JjaWQudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL09yY2lkLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vT3JjaWQudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWVhNmQyYjVjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL09yY2lkLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9PcmNpZC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtZWE2ZDJiNWNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi1lYTZkMmI1Y1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZScsIHBheWxvYWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogdGhpcy5uYW1lX3BhcnRpY2xlID09ICcnLFxuICAgICAgICBtc2c6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgc3RyaW5nIG9yIHJlbW92ZSB0aGUgcHJvcGVydHkgZW50aXJlbHkuXCJcbiAgICB9XG59XG4iLCI8dGVtcGxhdGU+XG4gICAgPGxpIHYtaWY9XCJoYXNfbmFtZV9wYXJ0aWNsZVwiPlxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIG5hbWUtcGFydGljbGVcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlJlbW92ZSBuYW1lLXBhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwicmVtb3ZlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICByZW1vdmVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxIZWxwVGV4dFxuICAgICAgICAgICAgdGV4dD1cIlNwZWNpZnkgbm9iaWxpYXJ5IHBhcnRpY2xlcyBhbmQgcHJlcG9zaXRpb25zLCBzdWNoIGFzIGluIEx1ZHdpZyB2YW4gQmVldGhvdmVuIG9yIFJhZmFlbCB2YW4gZGVyIFZhYXJ0LlwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjZXhlbXBsYXJ5LXVzZXMtMlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiB2YWxpZGF0aW9uLmVycm9yIH1cIlxuICAgICAgICAgICAgdi1iaW5kOnZhbHVlPVwibmFtZV9wYXJ0aWNsZVwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2LW9uOmlucHV0PVwidXBkYXRlKCRldmVudClcIlxuICAgICAgICA+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LWlmPVwidmFsaWRhdGlvbi5lcnJvclwiXG4gICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyB2YWxpZGF0aW9uLm1zZyB9fVxuICAgICAgICA8L3A+XG4gICAgPC9saT5cbiAgICA8bGkgdi1lbHNlPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIG5hbWUtcGFydGljbGVcIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cImFkZFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIEFkZCBuYW1lLXBhcnRpY2xlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5pbXBvcnQge2FkZCxcbiAgICAgICAgcmVtb3ZlLFxuICAgICAgICB1cGRhdGV9IGZyb20gJy4vTmFtZVBhcnRpY2xlRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL05hbWVQYXJ0aWNsZVZhbGlkYXRvcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ05hbWVQYXJ0aWNsZScsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBIZWxwVGV4dFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbmFtZV9wYXJ0aWNsZTogU3RyaW5nXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNfbmFtZV9wYXJ0aWNsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCduYW1lX3BhcnRpY2xlJykgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy5uYW1lX3BhcnRpY2xlICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRpb246IHZhbGlkYXRlXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZCxcbiAgICAgICAgcmVtb3ZlLFxuICAgICAgICB1cGRhdGVcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMS4wZW07XG4gICAgICAgIG1hcmdpbi10b3A6IDEuMGVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF92bS5oYXNfbmFtZV9wYXJ0aWNsZVxuICAgID8gX2MoXG4gICAgICAgIFwibGlcIixcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIG5hbWUtcGFydGljbGVcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIG5hbWUtcGFydGljbGVcIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihcIlxcbiAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgXCIpXVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJIZWxwVGV4dFwiLCB7XG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICB0ZXh0OlxuICAgICAgICAgICAgICAgIFwiU3BlY2lmeSBub2JpbGlhcnkgcGFydGljbGVzIGFuZCBwcmVwb3NpdGlvbnMsIHN1Y2ggYXMgaW4gTHVkd2lnIHZhbiBCZWV0aG92ZW4gb3IgUmFmYWVsIHZhbiBkZXIgVmFhcnQuXCIsXG4gICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNleGVtcGxhcnktdXNlcy0yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5uYW1lX3BhcnRpY2xlIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS52YWxpZGF0aW9uLmVycm9yXG4gICAgICAgICAgICA/IF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0udmFsaWRhdGlvbi5tc2cpICsgXCJcXG4gICAgXCIpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgIClcbiAgICA6IF9jKFwibGlcIiwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBuYW1lLXBhcnRpY2xlXCIgfSxcbiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCBuYW1lLXBhcnRpY2xlXFxuICAgIFwiKV1cbiAgICAgICAgKVxuICAgICAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTlmZWRmM2FjXCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi05ZmVkZjNhY1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL05hbWVQYXJ0aWNsZS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTmFtZVBhcnRpY2xlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTmFtZVBhcnRpY2xlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi05ZmVkZjNhY1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6dHJ1ZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL05hbWVQYXJ0aWNsZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gXCJkYXRhLXYtOWZlZGYzYWNcIlxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvTmFtZVBhcnRpY2xlLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi05ZmVkZjNhY1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTlmZWRmM2FjXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlJywgcGF5bG9hZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiB0aGlzLm5hbWVfc3VmZml4ID09ICcnLFxuICAgICAgICBtc2c6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgc3RyaW5nIG9yIHJlbW92ZSB0aGUgcHJvcGVydHkgZW50aXJlbHkuXCJcbiAgICB9XG59XG4iLCI8dGVtcGxhdGUgPlxuICAgIDxsaSB2LWlmPVwiaGFzX25hbWVfc3VmZml4XCI+XG4gICAgICAgIDxwIGNsYXNzPVwiY2FwdGlvblwiPlxuICAgICAgICAgICAgbmFtZS1zdWZmaXhcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlJlbW92ZSBuYW1lLXN1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cInJlbW92ZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgcmVtb3ZlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHRleHQ9XCJTcGVjaWZ5IHN1ZmZpeGVzIHN1Y2ggYXMgSnIuIG9yIElJSS5cIlxuICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcIlxuICAgICAgICAvPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIntlcnJvcjogdmFsaWRhdGlvbi5lcnJvciB9XCJcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cIm5hbWVfc3VmZml4XCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGUoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgPHBcbiAgICAgICAgICAgIHYtaWY9XCJ2YWxpZGF0aW9uLmVycm9yXCJcbiAgICAgICAgICAgIGNsYXNzPVwibWVzc2FnZVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHt7IHZhbGlkYXRpb24ubXNnIH19XG4gICAgICAgIDwvcD5cbiAgICA8L2xpPlxuICAgIDxsaSB2LWVsc2U+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJBZGQgbmFtZS1zdWZmaXhcIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cImFkZFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIEFkZCBuYW1lLXN1ZmZpeFxuICAgICAgICA8L2J1dHRvbj5cbiAgICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL05hbWVTdWZmaXhFbWl0dGVycy5qcyc7XG5cbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4vTmFtZVN1ZmZpeFZhbGlkYXRvcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ05hbWVTdWZmaXgnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIG5hbWVfc3VmZml4OiBTdHJpbmdcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhhc19uYW1lX3N1ZmZpeDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCduYW1lX3N1ZmZpeCcpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMubmFtZV9zdWZmaXggIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGlvbjogdmFsaWRhdGVcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIHVwZGF0ZVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICBidXR0b24ge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjBlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMS4wZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLmhhc19uYW1lX3N1ZmZpeFxuICAgID8gX2MoXG4gICAgICAgIFwibGlcIixcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIG5hbWUtc3VmZml4XFxuICAgICAgICBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIlJlbW92ZSBuYW1lLXN1ZmZpeFwiIH0sXG4gICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmUgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgcmVtb3ZlXFxuICAgICAgICBcIildXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHRleHQ6IFwiU3BlY2lmeSBzdWZmaXhlcyBzdWNoIGFzIEpyLiBvciBJSUkuXCIsXG4gICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNleGVtcGxhcnktdXNlcy0yXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5uYW1lX3N1ZmZpeCB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgIF92bS51cGRhdGUoJGV2ZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0udmFsaWRhdGlvbi5lcnJvclxuICAgICAgICAgICAgPyBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJtZXNzYWdlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLnZhbGlkYXRpb24ubXNnKSArIFwiXFxuICAgIFwiKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICBdLFxuICAgICAgICAxXG4gICAgICApXG4gICAgOiBfYyhcImxpXCIsIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJBZGQgbmFtZS1zdWZmaXhcIiB9LFxuICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hZGQgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW192bS5fdihcIlxcbiAgICAgICAgQWRkIG5hbWUtc3VmZml4XFxuICAgIFwiKV1cbiAgICAgICAgKVxuICAgICAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTU1NWM3NzE2XCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01NTVjNzcxNlxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL05hbWVTdWZmaXgudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05hbWVTdWZmaXgudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9OYW1lU3VmZml4LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01NTVjNzcxNlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6dHJ1ZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL05hbWVTdWZmaXgudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTU1NWM3NzE2XCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL05hbWVTdWZmaXgudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTU1NWM3NzE2XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNTU1Yzc3MTZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZF9hZmZpbGlhdGlvbiAoKSB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1wiaWRcIjogdGhpcy5hdXRob3IuaWR9O1xuICAgICAgICB0aGlzLiRlbWl0KCdhZGQtYWZmaWxpYXRpb24nLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9vcmNpZCAoKSB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1wiaWRcIjogdGhpcy5hdXRob3IuaWR9O1xuICAgICAgICB0aGlzLiRlbWl0KCdhZGQtb3JjaWQnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9uYW1lX3BhcnRpY2xlICgpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7XCJpZFwiOiB0aGlzLmF1dGhvci5pZH07XG4gICAgICAgIHRoaXMuJGVtaXQoJ2FkZC1uYW1lLXBhcnRpY2xlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbmFtZV9zdWZmaXggKCkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHtcImlkXCI6IHRoaXMuYXV0aG9yLmlkfTtcbiAgICAgICAgdGhpcy4kZW1pdCgnYWRkLW5hbWUtc3VmZml4JywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdyZW1vdmUnLCB0aGlzLmF1dGhvci5pZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9hZmZpbGlhdGlvbiAoKSB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1wiaWRcIjogdGhpcy5hdXRob3IuaWR9O1xuICAgICAgICB0aGlzLiRlbWl0KCdyZW1vdmUtYWZmaWxpYXRpb24nLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9vcmNpZCAoKSB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1wiaWRcIjogdGhpcy5hdXRob3IuaWR9O1xuICAgICAgICB0aGlzLiRlbWl0KCdyZW1vdmUtb3JjaWQnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9uYW1lX3BhcnRpY2xlICgpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7XCJpZFwiOiB0aGlzLmF1dGhvci5pZH07XG4gICAgICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1uYW1lLXBhcnRpY2xlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfbmFtZV9zdWZmaXggKCkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHtcImlkXCI6IHRoaXMuYXV0aG9yLmlkfTtcbiAgICAgICAgdGhpcy4kZW1pdCgncmVtb3ZlLW5hbWUtc3VmZml4JywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2Rvd24gKCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUtZG93bicsIHRoaXMuYXV0aG9yLmlkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV91cCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS11cCcsIHRoaXMuYXV0aG9yLmlkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2FmZmlsaWF0aW9uIChvbGRfcGF5bG9hZCkge1xuICAgIGxldCBuZXdfcGF5bG9hZCA9IE9iamVjdC5hc3NpZ24ob2xkX3BheWxvYWQsIHtcImlkXCI6IHRoaXMuYXV0aG9yLmlkfSk7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWFmZmlsaWF0aW9uJywgbmV3X3BheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2ZhbWlseV9uYW1lcyAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgaWQ6IHRoaXMuYXV0aG9yLmlkLFxuICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfTtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtZmFtaWx5LW5hbWVzJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZ2l2ZW5fbmFtZXMgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIGlkOiB0aGlzLmF1dGhvci5pZCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWdpdmVuLW5hbWVzJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbmFtZV9wYXJ0aWNsZSAob2xkX3BheWxvYWQpIHtcbiAgICBsZXQgbmV3X3BheWxvYWQgPSBPYmplY3QuYXNzaWduKG9sZF9wYXlsb2FkLCB7aWQ6IHRoaXMuYXV0aG9yLmlkfSk7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLW5hbWUtcGFydGljbGUnLCBuZXdfcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbmFtZV9zdWZmaXggKG9sZF9wYXlsb2FkKSB7XG4gICAgbGV0IG5ld19wYXlsb2FkID0gT2JqZWN0LmFzc2lnbihvbGRfcGF5bG9hZCwge2lkOiB0aGlzLmF1dGhvci5pZH0pO1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1uYW1lLXN1ZmZpeCcsIG5ld19wYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9vcmNpZCAob2xkX3BheWxvYWQpIHtcbiAgICBsZXQgbmV3X3BheWxvYWQgPSBPYmplY3QuYXNzaWduKG9sZF9wYXlsb2FkLCB7XCJpZFwiOiB0aGlzLmF1dGhvci5pZH0pO1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1vcmNpZCcsIG5ld19wYXlsb2FkKTtcbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwicmVtb3ZlLWJ1dHRvblwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIHRoaXMgYXV0aG9yXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgLVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwibW92ZS11cC1idXR0b25cIlxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIk1vdmUgdGhpcyBhdXRob3IgdXBcIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cIm1vdmVfdXBcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgICYjeDI1QjI7XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJtb3ZlLWRvd24tYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJNb3ZlIHRoaXMgYXV0aG9yIGRvd25cIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cIm1vdmVfZG93blwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tc3BhY2VyXCI+XG4gICAgICAgICAgICAgICAgJiN4MjVCQztcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8cD5cbiAgICAgICAgICAgIHt7IGZ1bGxuYW1lIH19XG4gICAgICAgIDwvcD5cblxuICAgICAgICA8dWw+XG4gICAgICAgICAgICA8QWZmaWxpYXRpb25cbiAgICAgICAgICAgICAgICB2LWJpbmQ6YWZmaWxpYXRpb249XCJhdXRob3IuYWZmaWxpYXRpb25cIlxuICAgICAgICAgICAgICAgIHYtb246YWRkPVwiYWRkX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZT1cInJlbW92ZV9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGU9XCJ1cGRhdGVfYWZmaWxpYXRpb25cIlxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiY2FwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICBnaXZlbi1uYW1lc1xuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgICAgICAgICAgdGV4dD1cIlNwZWNpZnkgZ2l2ZW4gYW5kIGFueSBvdGhlciBuYW1lcy5cIlxuICAgICAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjZXhlbXBsYXJ5LXVzZXMtMlwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgdi1iaW5kOnZhbHVlPVwiYXV0aG9yLmdpdmVuX25hbWVzXCJcbiAgICAgICAgICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZV9naXZlbl9uYW1lcygkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2xpPlxuXG4gICAgICAgICAgICA8TmFtZVBhcnRpY2xlXG4gICAgICAgICAgICAgICAgdi1iaW5kOm5hbWVfcGFydGljbGU9XCJhdXRob3IubmFtZV9wYXJ0aWNsZVwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQ9XCJhZGRfbmFtZV9wYXJ0aWNsZVwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmU9XCJyZW1vdmVfbmFtZV9wYXJ0aWNsZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGU9XCJ1cGRhdGVfbmFtZV9wYXJ0aWNsZVwiXG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIGZhbWlseS1uYW1lc1xuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgICAgICAgICAgdGV4dD1cIlNwZWNpZnkgZmFtaWx5IG5hbWVzLCBpbmNsdWRpbmcgY29tYmluYXRpb25zIG9mIGdpdmVuIGFuZCBwYXRyb255bWljIGZvcm1zLlwiXG4gICAgICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNleGVtcGxhcnktdXNlcy0yXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJhdXRob3IuZmFtaWx5X25hbWVzXCJcbiAgICAgICAgICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZV9mYW1pbHlfbmFtZXMoJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9saT5cblxuICAgICAgICAgICAgPE5hbWVTdWZmaXhcbiAgICAgICAgICAgICAgICB2LWJpbmQ6bmFtZV9zdWZmaXg9XCJhdXRob3IubmFtZV9zdWZmaXhcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkPVwiYWRkX25hbWVfc3VmZml4XCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZT1cInJlbW92ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGU9XCJ1cGRhdGVfbmFtZV9zdWZmaXhcIlxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPEF1dGhvck9yY2lkXG4gICAgICAgICAgICAgICAgdi1iaW5kOm9yY2lkPVwiYXV0aG9yLm9yY2lkXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZD1cImFkZF9vcmNpZFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmU9XCJyZW1vdmVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlPVwidXBkYXRlX29yY2lkXCJcbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgPC91bD5cbiAgICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuaW1wb3J0IEFmZmlsaWF0aW9uIGZyb20gJy4vQWZmaWxpYXRpb24udnVlJztcbmltcG9ydCBBdXRob3JPcmNpZCBmcm9tICcuL09yY2lkLnZ1ZSc7XG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuaW1wb3J0IE5hbWVQYXJ0aWNsZSBmcm9tICcuL05hbWVQYXJ0aWNsZS52dWUnO1xuaW1wb3J0IE5hbWVTdWZmaXggZnJvbSAnLi9OYW1lU3VmZml4LnZ1ZSc7XG5cbmltcG9ydCB7YWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICBhZGRfb3JjaWQsXG4gICAgICAgIGFkZF9uYW1lX3BhcnRpY2xlLFxuICAgICAgICBhZGRfbmFtZV9zdWZmaXgsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgcmVtb3ZlX2FmZmlsaWF0aW9uLFxuICAgICAgICByZW1vdmVfb3JjaWQsXG4gICAgICAgIHJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICByZW1vdmVfbmFtZV9zdWZmaXgsXG4gICAgICAgIG1vdmVfZG93bixcbiAgICAgICAgbW92ZV91cCxcbiAgICAgICAgdXBkYXRlX2FmZmlsaWF0aW9uLFxuICAgICAgICB1cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICB1cGRhdGVfZ2l2ZW5fbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICB1cGRhdGVfbmFtZV9zdWZmaXgsXG4gICAgICAgIHVwZGF0ZV9vcmNpZH0gZnJvbSAnLi9BdXRob3JFbWl0dGVycy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQXV0aG9yJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEFmZmlsaWF0aW9uLFxuICAgICAgICBBdXRob3JPcmNpZCxcbiAgICAgICAgSGVscFRleHQsXG4gICAgICAgIE5hbWVQYXJ0aWNsZSxcbiAgICAgICAgTmFtZVN1ZmZpeFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYXV0aG9yOiBPYmplY3RcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGZ1bGxuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgbmFtZV9wYXJ0cyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aG9yLmhhc093blByb3BlcnR5KCdnaXZlbl9uYW1lcycpICYmIHRoaXMuYXV0aG9yLmdpdmVuX25hbWVzICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5hbWVfcGFydHMucHVzaCh0aGlzLmF1dGhvci5naXZlbl9uYW1lcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hdXRob3IuaGFzT3duUHJvcGVydHkoJ25hbWVfcGFydGljbGUnKSAmJiB0aGlzLmF1dGhvci5uYW1lX3BhcnRpY2xlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5hbWVfcGFydHMucHVzaCh0aGlzLmF1dGhvci5uYW1lX3BhcnRpY2xlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmF1dGhvci5oYXNPd25Qcm9wZXJ0eSgnZmFtaWx5X25hbWVzJykgJiYgdGhpcy5hdXRob3IuZmFtaWx5X25hbWVzICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5hbWVfcGFydHMucHVzaCh0aGlzLmF1dGhvci5mYW1pbHlfbmFtZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aG9yLmhhc093blByb3BlcnR5KCduYW1lX3N1ZmZpeCcpICYmIHRoaXMuYXV0aG9yLm5hbWVfc3VmZml4ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5hbWVfcGFydHMucHVzaCh0aGlzLmF1dGhvci5uYW1lX3N1ZmZpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmFtZV9wYXJ0cy5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICBhZGRfb3JjaWQsXG4gICAgICAgIGFkZF9uYW1lX3BhcnRpY2xlLFxuICAgICAgICBhZGRfbmFtZV9zdWZmaXgsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgcmVtb3ZlX2FmZmlsaWF0aW9uLFxuICAgICAgICByZW1vdmVfb3JjaWQsXG4gICAgICAgIHJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICByZW1vdmVfbmFtZV9zdWZmaXgsXG4gICAgICAgIG1vdmVfZG93bixcbiAgICAgICAgbW92ZV91cCxcbiAgICAgICAgdXBkYXRlX2FmZmlsaWF0aW9uLFxuICAgICAgICB1cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICB1cGRhdGVfZ2l2ZW5fbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICB1cGRhdGVfbmFtZV9zdWZmaXgsXG4gICAgICAgIHVwZGF0ZV9vcmNpZFxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cblxuICAgIC5idXR0b24tc3BhY2VyIHtcbiAgICAgICAgbWluLXdpZHRoOiAxNnB4O1xuICAgIH1cblxuICAgIC5tb3ZlLXVwLWJ1dHRvbiwgLm1vdmUtZG93bi1idXR0b24sIC5yZW1vdmUtYnV0dG9uIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci1jb2xvcjogIzIyMjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBmb250LXNpemU6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDJweCAxMHB4O1xuICAgICAgICBjb2xvcjogIzIyMjtcbiAgICB9XG5cbiAgICAubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG4gICAgfVxuXG4gICAgdWwge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMWVtO1xuICAgIH1cblxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImxpXCIsIFtcbiAgICBfYyhcbiAgICAgIFwiYnV0dG9uXCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcInJlbW92ZS1idXR0b25cIixcbiAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIHRoaXMgYXV0aG9yXCIgfSxcbiAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmUgfVxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b24tc3BhY2VyXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgLVxcbiAgICAgICAgXCIpXG4gICAgICAgIF0pXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJidXR0b25cIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwibW92ZS11cC1idXR0b25cIixcbiAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiTW92ZSB0aGlzIGF1dGhvciB1cFwiIH0sXG4gICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ubW92ZV91cCB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ1dHRvbi1zcGFjZXJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAg4payXFxuICAgICAgICBcIilcbiAgICAgICAgXSlcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImJ1dHRvblwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJtb3ZlLWRvd24tYnV0dG9uXCIsXG4gICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIk1vdmUgdGhpcyBhdXRob3IgZG93blwiIH0sXG4gICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ubW92ZV9kb3duIH1cbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnV0dG9uLXNwYWNlclwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICDilrxcXG4gICAgICAgIFwiKVxuICAgICAgICBdKVxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInBcIiwgW192bS5fdihcIlxcbiAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLmZ1bGxuYW1lKSArIFwiXFxuICAgIFwiKV0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcInVsXCIsXG4gICAgICBbXG4gICAgICAgIF9jKFwiQWZmaWxpYXRpb25cIiwge1xuICAgICAgICAgIGF0dHJzOiB7IGFmZmlsaWF0aW9uOiBfdm0uYXV0aG9yLmFmZmlsaWF0aW9uIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGFkZDogX3ZtLmFkZF9hZmZpbGlhdGlvbixcbiAgICAgICAgICAgIHJlbW92ZTogX3ZtLnJlbW92ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgICAgIHVwZGF0ZTogX3ZtLnVwZGF0ZV9hZmZpbGlhdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgZ2l2ZW4tbmFtZXNcXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiU3BlY2lmeSBnaXZlbiBhbmQgYW55IG90aGVyIG5hbWVzLlwiLFxuICAgICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5hdXRob3IuZ2l2ZW5fbmFtZXMgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0udXBkYXRlX2dpdmVuX25hbWVzKCRldmVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiTmFtZVBhcnRpY2xlXCIsIHtcbiAgICAgICAgICBhdHRyczogeyBuYW1lX3BhcnRpY2xlOiBfdm0uYXV0aG9yLm5hbWVfcGFydGljbGUgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgYWRkOiBfdm0uYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgICAgIHVwZGF0ZTogX3ZtLnVwZGF0ZV9uYW1lX3BhcnRpY2xlXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgICAgICAgICBmYW1pbHktbmFtZXNcXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHRleHQ6XG4gICAgICAgICAgICAgICAgICBcIlNwZWNpZnkgZmFtaWx5IG5hbWVzLCBpbmNsdWRpbmcgY29tYmluYXRpb25zIG9mIGdpdmVuIGFuZCBwYXRyb255bWljIGZvcm1zLlwiLFxuICAgICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2V4ZW1wbGFyeS11c2VzLTJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5hdXRob3IuZmFtaWx5X25hbWVzIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgX3ZtLnVwZGF0ZV9mYW1pbHlfbmFtZXMoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJOYW1lU3VmZml4XCIsIHtcbiAgICAgICAgICBhdHRyczogeyBuYW1lX3N1ZmZpeDogX3ZtLmF1dGhvci5uYW1lX3N1ZmZpeCB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBhZGQ6IF92bS5hZGRfbmFtZV9zdWZmaXgsXG4gICAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmVfbmFtZV9zdWZmaXgsXG4gICAgICAgICAgICB1cGRhdGU6IF92bS51cGRhdGVfbmFtZV9zdWZmaXhcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcIkF1dGhvck9yY2lkXCIsIHtcbiAgICAgICAgICBhdHRyczogeyBvcmNpZDogX3ZtLmF1dGhvci5vcmNpZCB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBhZGQ6IF92bS5hZGRfb3JjaWQsXG4gICAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmVfb3JjaWQsXG4gICAgICAgICAgICB1cGRhdGU6IF92bS51cGRhdGVfb3JjaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgMVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTEyYzRkNTc4XCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xMmM0ZDU3OFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0F1dGhvci52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXV0aG9yLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXV0aG9yLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0xMmM0ZDU3OFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6dHJ1ZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0F1dGhvci52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gXCJkYXRhLXYtMTJjNGQ1NzhcIlxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXV0aG9yLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0xMmM0ZDU3OFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTEyYzRkNTc4XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxwIGNsYXNzPVwiY2FwdGlvblwiPlxuICAgICAgICAgICAgYXV0aG9yc1xuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYWRkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJBZGQgYXV0aG9yXCJcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1zcGFjZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB0ZXh0PVwiVGhlIGF1dGhvcihzKSBvZiB0aGUgc29mdHdhcmVcIlxuICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI3NvZnR3YXJlLWNpdGF0aW9uLW1ldGFkYXRhLXJlcXVpcmVkXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiYXV0aG9yc1wiPlxuICAgICAgICAgICAgPEF1dGhvclxuICAgICAgICAgICAgICAgIHYtZm9yPVwiYXV0aG9yIGluIGF1dGhvcnNcIlxuICAgICAgICAgICAgICAgIHYtYmluZDphdXRob3I9XCJhdXRob3JcIlxuICAgICAgICAgICAgICAgIHYtYmluZDprZXk9XCJhdXRob3IuaWRcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWFmZmlsaWF0aW9uPVwiYWRkX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1uYW1lLXBhcnRpY2xlPVwiYWRkX25hbWVfcGFydGljbGVcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLW5hbWUtc3VmZml4PVwiYWRkX25hbWVfc3VmZml4XCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1vcmNpZD1cImFkZF9vcmNpZFwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWRvd249XCJtb3ZlX2Rvd25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS11cD1cIm1vdmVfdXBcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlPVwicmVtb3ZlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1hZmZpbGlhdGlvbj1cInJlbW92ZV9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtbmFtZS1wYXJ0aWNsZT1cInJlbW92ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1uYW1lLXN1ZmZpeD1cInJlbW92ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtb3JjaWQ9XCJyZW1vdmVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWFmZmlsaWF0aW9uPVwidXBkYXRlX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1mYW1pbHktbmFtZXM9XCJ1cGRhdGVfZmFtaWx5X25hbWVzXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1naXZlbi1uYW1lcz1cInVwZGF0ZV9naXZlbl9uYW1lc1wiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtbmFtZS1wYXJ0aWNsZT1cInVwZGF0ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1uYW1lLXN1ZmZpeD1cInVwZGF0ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtb3JjaWQ9XCJ1cGRhdGVfb3JjaWRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC91bD5cbiAgICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7YWRkLFxuICAgICAgICBhZGRfYWZmaWxpYXRpb24sXG4gICAgICAgIGFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgIGFkZF9vcmNpZCxcbiAgICAgICAgbW92ZV9kb3duLFxuICAgICAgICBtb3ZlX3VwLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIHJlbW92ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgcmVtb3ZlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgcmVtb3ZlX29yY2lkLFxuICAgICAgICB1cGRhdGVfYWZmaWxpYXRpb24sXG4gICAgICAgIHVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgdXBkYXRlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgdXBkYXRlX29yY2lkfSBmcm9tICcuL0F1dGhvcnNFbWl0dGVycy5qcyc7XG5cbmltcG9ydCBBdXRob3IgZnJvbSAnLi9BdXRob3IudnVlJztcbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQXV0aG9ycycsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBBdXRob3IsXG4gICAgICAgIEhlbHBUZXh0XG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICBhdXRob3JzOiBBcnJheVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIGFkZF9hZmZpbGlhdGlvbixcbiAgICAgICAgYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgIGFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgYWRkX29yY2lkLFxuICAgICAgICBtb3ZlX2Rvd24sXG4gICAgICAgIG1vdmVfdXAsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgcmVtb3ZlX2FmZmlsaWF0aW9uLFxuICAgICAgICByZW1vdmVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgcmVtb3ZlX25hbWVfc3VmZml4LFxuICAgICAgICByZW1vdmVfb3JjaWQsXG4gICAgICAgIHVwZGF0ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgdXBkYXRlX2ZhbWlseV9uYW1lcyxcbiAgICAgICAgdXBkYXRlX2dpdmVuX25hbWVzLFxuICAgICAgICB1cGRhdGVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgdXBkYXRlX25hbWVfc3VmZml4LFxuICAgICAgICB1cGRhdGVfb3JjaWRcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5cbiAgICAuYnV0dG9uLXNwYWNlciB7XG4gICAgICAgIG1pbi13aWR0aDogMTZweDtcbiAgICB9XG5cbiAgICAuYWRkLWJ1dHRvbiB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XG4gICAgICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICBib3JkZXItY29sb3I6ICMyMjI7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgZm9udC1zaXplOiAxMDAlO1xuICAgICAgICBwYWRkaW5nOiAycHggMTBweDtcbiAgICAgICAgY29sb3I6ICMyMjI7XG4gICAgfVxuXG4gICAgLmFkZC1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xuICAgIH1cblxuICAgIC5hdXRob3JzIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OjBweDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDJlbTtcbiAgICB9XG5cbjwvc3R5bGU+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwibGlcIixcbiAgICBbXG4gICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCIgfSwgW1xuICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIGF1dGhvcnNcXG4gICAgICAgIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJhZGQtYnV0dG9uXCIsXG4gICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJBZGQgYXV0aG9yXCIgfSxcbiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnV0dG9uLXNwYWNlclwiIH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICtcXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICApXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICB0ZXh0OiBcIlRoZSBhdXRob3Iocykgb2YgdGhlIHNvZnR3YXJlXCIsXG4gICAgICAgICAgdXJsOlxuICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJ1bFwiLFxuICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImF1dGhvcnNcIiB9LFxuICAgICAgICBfdm0uX2woX3ZtLmF1dGhvcnMsIGZ1bmN0aW9uKGF1dGhvcikge1xuICAgICAgICAgIHJldHVybiBfYyhcIkF1dGhvclwiLCB7XG4gICAgICAgICAgICBrZXk6IGF1dGhvci5pZCxcbiAgICAgICAgICAgIGF0dHJzOiB7IGF1dGhvcjogYXV0aG9yIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBcImFkZC1hZmZpbGlhdGlvblwiOiBfdm0uYWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICAgICAgICBcImFkZC1uYW1lLXBhcnRpY2xlXCI6IF92bS5hZGRfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgICAgICAgXCJhZGQtbmFtZS1zdWZmaXhcIjogX3ZtLmFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgICAgICAgXCJhZGQtb3JjaWRcIjogX3ZtLmFkZF9vcmNpZCxcbiAgICAgICAgICAgICAgXCJtb3ZlLWRvd25cIjogX3ZtLm1vdmVfZG93bixcbiAgICAgICAgICAgICAgXCJtb3ZlLXVwXCI6IF92bS5tb3ZlX3VwLFxuICAgICAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmUsXG4gICAgICAgICAgICAgIFwicmVtb3ZlLWFmZmlsaWF0aW9uXCI6IF92bS5yZW1vdmVfYWZmaWxpYXRpb24sXG4gICAgICAgICAgICAgIFwicmVtb3ZlLW5hbWUtcGFydGljbGVcIjogX3ZtLnJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgICAgICBcInJlbW92ZS1uYW1lLXN1ZmZpeFwiOiBfdm0ucmVtb3ZlX25hbWVfc3VmZml4LFxuICAgICAgICAgICAgICBcInJlbW92ZS1vcmNpZFwiOiBfdm0ucmVtb3ZlX29yY2lkLFxuICAgICAgICAgICAgICBcInVwZGF0ZS1hZmZpbGlhdGlvblwiOiBfdm0udXBkYXRlX2FmZmlsaWF0aW9uLFxuICAgICAgICAgICAgICBcInVwZGF0ZS1mYW1pbHktbmFtZXNcIjogX3ZtLnVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgICAgICAgIFwidXBkYXRlLWdpdmVuLW5hbWVzXCI6IF92bS51cGRhdGVfZ2l2ZW5fbmFtZXMsXG4gICAgICAgICAgICAgIFwidXBkYXRlLW5hbWUtcGFydGljbGVcIjogX3ZtLnVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgICAgICBcInVwZGF0ZS1uYW1lLXN1ZmZpeFwiOiBfdm0udXBkYXRlX25hbWVfc3VmZml4LFxuICAgICAgICAgICAgICBcInVwZGF0ZS1vcmNpZFwiOiBfdm0udXBkYXRlX29yY2lkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtM2U3ZTk3NDJcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTNlN2U5NzQyXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXV0aG9ycy52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXV0aG9ycy52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0F1dGhvcnMudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTNlN2U5NzQyXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXV0aG9ycy52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gXCJkYXRhLXYtM2U3ZTk3NDJcIlxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXV0aG9ycy52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtM2U3ZTk3NDJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0zZTdlOTc0MlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZScsIHBheWxvYWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogdGhpcy5hYnN0cmFjdCA9PSAnJyxcbiAgICAgICAgbXNnOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIHN0cmluZyBvciByZW1vdmUgdGhlIHByb3BlcnR5IGVudGlyZWx5LlwiXG4gICAgfVxufVxuIiwiPHRlbXBsYXRlPlxuICAgIDxsaSB2LWlmPVwiaGFzX2Fic3RyYWN0XCI+XG4gICAgICAgIDxwIGNsYXNzPVwiY2FwdGlvblwiPlxuICAgICAgICAgICAgYWJzdHJhY3RcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlJlbW92ZSBhYnN0cmFjdFwiXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cInJlbW92ZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgcmVtb3ZlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHRleHQ9XCJBIGRlc2NyaXB0aW9uIG9mIHRoZSBzb2Z0d2FyZSAodmVyc2lvbilcIlxuICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI3NvZnR3YXJlLWNpdGF0aW9uLW1ldGFkYXRhLXJlcXVpcmVkXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJ7ZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IgfVwiXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJhYnN0cmFjdFwiXG4gICAgICAgICAgICB2LW9uOmlucHV0PVwidXBkYXRlKCRldmVudClcIlxuICAgICAgICAvPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1pZj1cInZhbGlkYXRpb24uZXJyb3JcIlxuICAgICAgICAgICAgY2xhc3M9XCJtZXNzYWdlXCJcbiAgICAgICAgPlxuICAgICAgICAgICAge3sgdmFsaWRhdGlvbi5tc2cgfX1cbiAgICAgICAgPC9wPlxuICAgIDwvbGk+XG4gICAgPGxpIHYtZWxzZT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIkFkZCBhYnN0cmFjdFwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIGFic3RyYWN0XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5pbXBvcnQge2FkZCxcbiAgICAgICAgcmVtb3ZlLFxuICAgICAgICB1cGRhdGV9IGZyb20gJy4vQWJzdHJhY3RFbWl0dGVycy5qcyc7XG5cbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4vQWJzdHJhY3RWYWxpZGF0b3JzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdBYnN0cmFjdCcsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBIZWxwVGV4dFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYWJzdHJhY3Q6IFN0cmluZ1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzX2Fic3RyYWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcHJvcHMuaGFzT3duUHJvcGVydHkoJ2Fic3RyYWN0JykgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy5hYnN0cmFjdCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0aW9uOiB2YWxpZGF0ZVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIGJ1dHRvbiB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEuMGVtO1xuICAgICAgICBtYXJnaW4tdG9wOiAxLjBlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uaGFzX2Fic3RyYWN0XG4gICAgPyBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgYWJzdHJhY3RcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIGFic3RyYWN0XCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnJlbW92ZSB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgdGV4dDogXCJBIGRlc2NyaXB0aW9uIG9mIHRoZSBzb2Z0d2FyZSAodmVyc2lvbilcIixcbiAgICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI3NvZnR3YXJlLWNpdGF0aW9uLW1ldGFkYXRhLXJlcXVpcmVkXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwidGV4dGFyZWFcIiwge1xuICAgICAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmFic3RyYWN0IH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS52YWxpZGF0aW9uLmVycm9yXG4gICAgICAgICAgICA/IF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0udmFsaWRhdGlvbi5tc2cpICsgXCJcXG4gICAgXCIpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgIClcbiAgICA6IF9jKFwibGlcIiwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBhYnN0cmFjdFwiIH0sXG4gICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBBZGQgYWJzdHJhY3RcXG4gICAgXCIpXVxuICAgICAgICApXG4gICAgICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtNzNlM2M3Y2FcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTczZTNjN2NhXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQWJzdHJhY3QudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Fic3RyYWN0LnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWJzdHJhY3QudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTczZTNjN2NhXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQWJzdHJhY3QudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTczZTNjN2NhXCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0Fic3RyYWN0LnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi03M2UzYzdjYVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTczZTNjN2NhXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlJywgcGF5bG9hZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUgKCkge1xuICAgIGxldCB5eXl5ID0gJ1swLTldezR9JztcbiAgICBsZXQgbW0gPSAnKDBbMS05XXwxWzAtMl0pJztcbiAgICBsZXQgZGQgPSAnKDBbMS05XXwxWzAtOV18MlswLTldfDNbMC0xXSknO1xuICAgIGxldCByZSA9IG5ldyBSZWdFeHAoJ14nICsgeXl5eSArICctJyArIG1tICsgJy0nICsgZGQgKyAnJCcpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiAhcmUudGVzdCh0aGlzLmRhdGVfcmVsZWFzZWQpLFxuICAgICAgICBtc2c6IFwiVXNlIHRoZSB5eXl5LW1tLWRkIGZvcm1hdC5cIlxuICAgIH1cbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICBjbGFzcz1cImNhcHRpb25cIlxuICAgICAgICA+XG4gICAgICAgICAgICBkYXRlLXJlbGVhc2VkXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdi1zaG93PVwiaGFzX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIGRhdGUtcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICB0ZXh0PVwiVGhlIHJlbGVhc2UgZGF0ZSBvZiB0aGUgc29mdHdhcmUgdmVyc2lvbi5cIlxuICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI3NvZnR3YXJlLWNpdGF0aW9uLW1ldGFkYXRhLXJlcXVpcmVkXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdi1zaG93PVwiIWhhc19kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJBZGQgZGF0ZS1yZWxlYXNlZFwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIGRhdGUtcmVsZWFzZWRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdi1zaG93PVwiaGFzX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiB2YWxpZGF0aW9uLmVycm9yfVwiXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJkYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGUoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgPHBcbiAgICAgICAgICAgIHYtaWY9XCJ2YWxpZGF0aW9uLmVycm9yXCJcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc19kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgIGNsYXNzPVwibWVzc2FnZVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHt7IHZhbGlkYXRpb24ubXNnIH19XG4gICAgICAgIDwvcD5cbiAgICA8L2xpPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL0RhdGVSZWxlYXNlZEVtaXR0ZXJzLmpzJztcblxuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSAnLi9EYXRlUmVsZWFzZWRWYWxpZGF0b3JzLmpzJztcblxuaW1wb3J0IEhlbHBUZXh0IGZyb20gJy4vSGVscFRleHQudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdEYXRlUmVsZWFzZWQnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGRhdGVfcmVsZWFzZWQ6IFN0cmluZ1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzX2RhdGVfcmVsZWFzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZGF0ZV9yZWxlYXNlZCcpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMuZGF0ZV9yZWxlYXNlZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRpb246IHZhbGlkYXRlXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZCxcbiAgICAgICAgcmVtb3ZlLFxuICAgICAgICB1cGRhdGVcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImxpXCIsXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwicFwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgZGF0ZS1yZWxlYXNlZFxcbiAgICAgICAgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIlJlbW92ZSBkYXRlLXJlbGVhc2VkXCIgfSxcbiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmUgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICApXG4gICAgICAgIF1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJIZWxwVGV4dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIHRleHQ6IFwiVGhlIHJlbGVhc2UgZGF0ZSBvZiB0aGUgc29mdHdhcmUgdmVyc2lvbi5cIixcbiAgICAgICAgICB1cmw6XG4gICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiIWhhc19kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBkYXRlLXJlbGVhc2VkXCIgfSxcbiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCBkYXRlLXJlbGVhc2VkXFxuICAgIFwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBjbGFzczogeyBlcnJvcjogX3ZtLnZhbGlkYXRpb24uZXJyb3IgfSxcbiAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJ0ZXh0XCIgfSxcbiAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5kYXRlX3JlbGVhc2VkIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0udmFsaWRhdGlvbi5lcnJvclxuICAgICAgICA/IF9jKFxuICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJtZXNzYWdlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0udmFsaWRhdGlvbi5tc2cpICsgXCJcXG4gICAgXCIpXVxuICAgICAgICAgIClcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi0wOWZjMTYwNFwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDlmYzE2MDRcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9EYXRlUmVsZWFzZWQudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RhdGVSZWxlYXNlZC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RhdGVSZWxlYXNlZC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDlmYzE2MDRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOnRydWUsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9EYXRlUmVsZWFzZWQudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTA5ZmMxNjA0XCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0RhdGVSZWxlYXNlZC52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMDlmYzE2MDRcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0wOWZjMTYwNFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZScsIHBheWxvYWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlICgpIHtcbiAgICAvLyBmcm9tOiBodHRwczovL3d3dy5jcm9zc3JlZi5vcmcvYmxvZy9kb2lzLWFuZC1tYXRjaGluZy1yZWd1bGFyLWV4cHJlc3Npb25zL1xuICAgIC8vXG4gICAgLy8gICAgL14xMC5cXGR7NCw5fS9bLS5fOygpLzpBLVowLTldKyQvaVxuICAgIC8vICAgIC9eMTAuMTAwMi9bXlxcc10rJC9pXG4gICAgLy8gICAgL14xMC5cXGR7NH0vXFxkKy1cXGQrWD8oXFxkKylcXGQrPFtcXGRcXHddKzpbXFxkXFx3XSo+XFxkKy5cXGQrLlxcdys7XFxkJC9pXG4gICAgLy8gICAgL14xMC4xMDIxL1xcd1xcd1xcZCsrJC9pXG4gICAgLy8gICAgL14xMC4xMjA3L1tcXHdcXGRdK1xcJlxcZCtfXFxkKyQvaVxuICAgIC8vXG4gICAgLy8gSSBhZGRlZCBlc2NhcGUgdG8gdGhlIGZpcnN0IGRvdCBpbiBlYWNoIHJlZ2V4cFxuICAgIC8vIEkgYWRkZWQgZXNjYXBlcyB0byBhbGwgYmFja3NsYXNoZXNcbiAgICBsZXQgcmVnZXhwcyA9IFtcbiAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC5cXFxcZHs0LDl9L1stLl87KCkvOmEtekEtWjAtOV0rJCcpLFxuICAgICAgICBuZXcgUmVnRXhwKCdeMTBcXFxcLjEwMDIvW15cXFxcc10rJCcpLFxuICAgICAgICBuZXcgUmVnRXhwKCdeMTBcXFxcLlxcXFxkezR9L1xcXFxkKy1cXFxcZCtYPyhcXFxcZCspXFxcXGQrPFtcXFxcZFxcXFx3XSs6W1xcXFxkXFxcXHddKj5cXFxcZCsuXFxcXGQrLlxcXFx3KztcXFxcZCQnKSxcbiAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC4xMDIxL1xcXFx3XFxcXHdcXFxcZCtcXFxcKyQnKSxcbiAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC4xMjA3L1tcXFxcd1xcXFxkXStcXFxcJlxcXFxkK19cXFxcZCskJylcbiAgICBdO1xuICAgIC8vIHN0b3JlIGEgY29weSBvZiBkb2ksIGJlY2F1c2UgdGhpcy5kb2kgd29uJ3QgYmUgYWNjZXNzaWJsZSB3aXRoaW4gdGhlIG1hcFxuICAgIC8vIGZ1bmN0aW9uIGJlbG93OlxuICAgIGxldCBkb2kgPSB0aGlzLmRvaTtcbiAgICBsZXQgbWF0Y2hlcyA9IHJlZ2V4cHMubWFwKGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgICAgICByZXR1cm4gcmVnZXhwLnRlc3QoZG9pKTtcbiAgICB9KTtcbiAgICBsZXQgYXRfbGVhc3Rfb25lX21hdGNoZXMgPSBtYXRjaGVzLmluY2x1ZGVzKHRydWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiAhYXRfbGVhc3Rfb25lX21hdGNoZXMsXG4gICAgICAgIG1zZzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBET0kgc3RyaW5nLlwiXG4gICAgfVxufVxuIiwiPHRlbXBsYXRlPlxuICAgIDxsaT5cbiAgICAgICAgPHBcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc19kb2lcIlxuICAgICAgICAgICAgY2xhc3M9XCJjYXB0aW9uXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgZG9pXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdi1zaG93PVwiaGFzX2RvaVwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgZG9pXCJcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwicmVtb3ZlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICByZW1vdmVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxIZWxwVGV4dFxuICAgICAgICAgICAgdi1zaG93PVwiaGFzX2RvaVwiXG4gICAgICAgICAgICB0ZXh0PVwiVGhlIERPSSBvZiB0aGUgd29yayAobm90IHRoZSByZXNvbHZlciBVUkwsIGkuZS4sIDEwLjUyODEvemVub2RvLjEwMDMxNTAsIG5vdCBodHRwOi8vZG9pLm9yZy8xMC41MjgxL3plbm9kby4xMDAzMTUwKVwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB2LXNob3c9XCIhaGFzX2RvaVwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIGRvaVwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIGRvaVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfZG9pXCJcbiAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIntlcnJvcjogdmFsaWRhdGlvbi5lcnJvciB9XCJcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cImRvaVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cImRvaS1vbmx5LCBlLmcuIDEwLjAwMDAvRklYTUVcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZSgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1pZj1cInZhbGlkYXRpb24uZXJyb3JcIlxuICAgICAgICAgICAgdi1zaG93PVwiaGFzX2RvaVwiXG4gICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyB2YWxpZGF0aW9uLm1zZyB9fVxuICAgICAgICA8L3A+XG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQge2FkZCxcbiAgICAgICAgcmVtb3ZlLFxuICAgICAgICB1cGRhdGV9IGZyb20gJy4vRG9pRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL0RvaVZhbGlkYXRvcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ0RvaScsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBIZWxwVGV4dFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZG9pOiBTdHJpbmdcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHZhbGlkYXRpb246IHZhbGlkYXRlLFxuICAgICAgICBoYXNfZG9pOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcHJvcHMuaGFzT3duUHJvcGVydHkoJ2RvaScpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMuZG9pICE9PSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImxpXCIsXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwicFwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfZG9pLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19kb2lcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIGRvaVxcbiAgICAgICAgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX2RvaSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX2RvaVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJSZW1vdmUgZG9pXCIgfSxcbiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmUgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICApXG4gICAgICAgIF1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJIZWxwVGV4dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19kb2ksXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19kb2lcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICB0ZXh0OlxuICAgICAgICAgICAgXCJUaGUgRE9JIG9mIHRoZSB3b3JrIChub3QgdGhlIHJlc29sdmVyIFVSTCwgaS5lLiwgMTAuNTI4MS96ZW5vZG8uMTAwMzE1MCwgbm90IGh0dHA6Ly9kb2kub3JnLzEwLjUyODEvemVub2RvLjEwMDMxNTApXCIsXG4gICAgICAgICAgdXJsOlxuICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOiAhX3ZtLmhhc19kb2ksXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiIWhhc19kb2lcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiQWRkIGRvaVwiIH0sXG4gICAgICAgICAgb246IHsgY2xpY2s6IF92bS5hZGQgfVxuICAgICAgICB9LFxuICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBBZGQgZG9pXFxuICAgIFwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19kb2ksXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19kb2lcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiBcImRvaS1vbmx5LCBlLmcuIDEwLjAwMDAvRklYTUVcIiwgdHlwZTogXCJ0ZXh0XCIgfSxcbiAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5kb2kgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBfdm0udXBkYXRlKCRldmVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS52YWxpZGF0aW9uLmVycm9yXG4gICAgICAgID8gX2MoXG4gICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX2RvaSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX2RvaVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJtZXNzYWdlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhfdm0udmFsaWRhdGlvbi5tc2cpICsgXCJcXG4gICAgXCIpXVxuICAgICAgICAgIClcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi01ZWM4NTVkNVwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0RvaS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRG9pLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRG9pLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01ZWM4NTVkNVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Eb2kudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0RvaS52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNWVjODU1ZDVcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi01ZWM4NTVkNVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkX2lkZW50aWZpZXIgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1pZGVudGlmaWVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfaWRlbnRpZmllcnMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1pZGVudGlmaWVycycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9pZGVudGlmaWVyX2Rvd24gKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWlkZW50aWZpZXItZG93bicsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9pZGVudGlmaWVyX3VwIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1pZGVudGlmaWVyLXVwJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllciAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVyJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllcnMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVycycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2lkZW50aWZpZXJfdHlwZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1pZGVudGlmaWVyLXR5cGUnLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtaWRlbnRpZmllci12YWx1ZScsIHBheWxvYWQpXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkX2lkZW50aWZpZXIgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1pZGVudGlmaWVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2lkZW50aWZpZXJfZG93biAoKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1pZGVudGlmaWVyLWRvd24nLCB0aGlzLmlkZW50aWZpZXIuaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9pZGVudGlmaWVyX3VwICgpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWlkZW50aWZpZXItdXAnLCB0aGlzLmlkZW50aWZpZXIuaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2lkZW50aWZpZXIgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVyJywgdGhpcy5pZGVudGlmaWVyLmlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIGlkOiB0aGlzLmlkZW50aWZpZXIuaWQsXG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1pZGVudGlmaWVyLXR5cGUnLCBwYXlsb2FkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIGlkOiB0aGlzLmlkZW50aWZpZXIuaWQsXG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1pZGVudGlmaWVyLXZhbHVlJywgcGF5bG9hZClcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV90eXBlICgpIHtcbiAgICBsZXQgYXV0aG9yaXplZF9zZXQgPSAgbmV3IFNldChbXG4gICAgICAgIFwiZG9pXCIsIFwidXJsXCIsIFwic3doXCIsIFwib3RoZXJcIlxuICAgIF0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiAhYXV0aG9yaXplZF9zZXQuaGFzKHRoaXMuaWRlbnRpZmllci50eXBlKSxcbiAgICAgICAgbXNnOiBcIlVzZSBvbmUgb2YgdGhlIGF1dGhvcml6ZWQgaWRlbnRpZmllcnMuXCJcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV92YWx1ZSAoKSB7XG4gICAgaWYgKHRoaXMuaWRlbnRpZmllci52YWx1ZSA9PSAnJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IHRoaXMuaWRlbnRpZmllci52YWx1ZSA9PSAnJyxcbiAgICAgICAgICAgIG1zZzogXCJZb3UgbXVzdCBkZWZpbmUgdmFsdWUsIG9yIHJlbW92ZSB0aGUgaWRlbnRpZmllciBhbHRvZ2V0aGVyLlwiXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pZGVudGlmaWVyLnR5cGUgPT0gJ2RvaScpIHtcbiAgICAgICAgICAgIC8vIGZyb206IGh0dHBzOi8vd3d3LmNyb3NzcmVmLm9yZy9ibG9nL2RvaXMtYW5kLW1hdGNoaW5nLXJlZ3VsYXItZXhwcmVzc2lvbnMvXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgL14xMC5cXGR7NCw5fS9bLS5fOygpLzpBLVowLTldKyQvaVxuICAgICAgICAgICAgLy8gICAgL14xMC4xMDAyL1teXFxzXSskL2lcbiAgICAgICAgICAgIC8vICAgIC9eMTAuXFxkezR9L1xcZCstXFxkK1g/KFxcZCspXFxkKzxbXFxkXFx3XSs6W1xcZFxcd10qPlxcZCsuXFxkKy5cXHcrO1xcZCQvaVxuICAgICAgICAgICAgLy8gICAgL14xMC4xMDIxL1xcd1xcd1xcZCsrJC9pXG4gICAgICAgICAgICAvLyAgICAvXjEwLjEyMDcvW1xcd1xcZF0rXFwmXFxkK19cXGQrJC9pXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSSBhZGRlZCBlc2NhcGUgdG8gdGhlIGZpcnN0IGRvdCBpbiBlYWNoIHJlZ2V4cFxuICAgICAgICAgICAgLy8gSSBhZGRlZCBlc2NhcGVzIHRvIGFsbCBiYWNrc2xhc2hlc1xuICAgICAgICAgICAgbGV0IHJlZ2V4cHMgPSBbXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC5cXFxcZHs0LDl9L1stLl87KCkvOmEtekEtWjAtOV0rJCcpLFxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoJ14xMFxcXFwuMTAwMi9bXlxcXFxzXSskJyksXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC5cXFxcZHs0fS9cXFxcZCstXFxcXGQrWD8oXFxcXGQrKVxcXFxkKzxbXFxcXGRcXFxcd10rOltcXFxcZFxcXFx3XSo+XFxcXGQrLlxcXFxkKy5cXFxcdys7XFxcXGQkJyksXG4gICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgnXjEwXFxcXC4xMDIxL1xcXFx3XFxcXHdcXFxcZCtcXFxcKyQnKSxcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKCdeMTBcXFxcLjEyMDcvW1xcXFx3XFxcXGRdK1xcXFwmXFxcXGQrX1xcXFxkKyQnKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGxldCBkb2kgPSB0aGlzLmlkZW50aWZpZXIudmFsdWU7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlcyA9IHJlZ2V4cHMubWFwKGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWdleHAudGVzdChkb2kpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgYXRfbGVhc3Rfb25lX21hdGNoZXMgPSBtYXRjaGVzLmluY2x1ZGVzKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvcjogIWF0X2xlYXN0X29uZV9tYXRjaGVzLFxuICAgICAgICAgICAgICAgIG1zZzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBET0kgc3RyaW5nLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pZGVudGlmaWVyLnR5cGUgPT0gJ3VybCcpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1zZzogXCJWYWxpZCB1cmwgdmFsdWUuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlkZW50aWZpZXIudHlwZSA9PSAnc3doJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgbXNnOiBcIlZhbGlkIHN3aCB2YWx1ZS5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaWRlbnRpZmllci50eXBlID09ICdvdGhlcicpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1zZzogXCJWYWxpZCBvdGhlciB2YWx1ZS5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtc2c6IFwiVXNlIG9uZSBvZiB0aGUgYXV0aG9yaXplZCBpZGVudGlmaWVycy5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiPHRlbXBsYXRlPlxuICAgIDxsaT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJyZW1vdmUtYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUgdGhpcyBpZGVudGlmaWVyXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVfaWRlbnRpZmllclwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tc3BhY2VyXCI+XG4gICAgICAgICAgICAgICAgLVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwibW92ZS11cC1idXR0b25cIlxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIk1vdmUgdGhpcyBpZGVudGlmaWVyIHVwXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJtb3ZlX2lkZW50aWZpZXJfdXBcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgICYjeDI1QjI7XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJtb3ZlLWRvd24tYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJNb3ZlIHRoaXMgaWRlbnRpZmllciBkb3duXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJtb3ZlX2lkZW50aWZpZXJfZG93blwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24tc3BhY2VyXCI+XG4gICAgICAgICAgICAgICAgJiN4MjVCQztcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIHR5cGVcbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHRleHQ9XCJUaGUgdHlwZSBvZiB0aGUgaWRlbnRpZmllci5cIlxuICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2lkZW50aWZpZXItdHlwZS1zdHJpbmdzXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJpZGVudGlmaWVyLnR5cGVcIlxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiB2YWxpZGF0aW9uX3R5cGUuZXJyb3IgfVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cImRvaSB8IHN3aCB8IHVybCB8IG90aGVyXCJcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGVfaWRlbnRpZmllcl90eXBlKCRldmVudClcIlxuICAgICAgICA+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LWlmPVwidmFsaWRhdGlvbl90eXBlLmVycm9yXCJcbiAgICAgICAgICAgIGNsYXNzPVwibWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgIHt7IHZhbGlkYXRpb25fdHlwZS5tc2cgfX1cbiAgICAgICAgPC9wPlxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJpZGVudGlmaWVyLnZhbHVlXCJcbiAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIntlcnJvcjogdmFsaWRhdGlvbl92YWx1ZS5lcnJvciB9XCJcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGVfaWRlbnRpZmllcl92YWx1ZSgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1pZj1cInZhbGlkYXRpb25fdmFsdWUuZXJyb3JcIlxuICAgICAgICAgICAgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgICAgICAge3sgdmFsaWRhdGlvbl92YWx1ZS5tc2cgfX1cbiAgICAgICAgPC9wPlxuXG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmltcG9ydCB7bW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlfSBmcm9tICcuL0lkZW50aWZpZXJFbWl0dGVycy5qcyc7XG5cbmltcG9ydCB7dmFsaWRhdGVfdHlwZSxcbiAgICAgICAgdmFsaWRhdGVfdmFsdWV9IGZyb20gJy4vSWRlbnRpZmllclZhbGlkYXRvcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ0lkZW50aWZpZXInLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGlkZW50aWZpZXI6IE9iamVjdFxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgdmFsaWRhdGlvbl90eXBlOiB2YWxpZGF0ZV90eXBlLFxuICAgICAgICB2YWxpZGF0aW9uX3ZhbHVlOiB2YWxpZGF0ZV92YWx1ZVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX3VwLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWVcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuICAgIC5idXR0b24tc3BhY2VyIHtcbiAgICAgICAgbWluLXdpZHRoOiAxNnB4O1xuICAgIH1cblxuICAgIC5tb3ZlLXVwLWJ1dHRvbiwgLm1vdmUtZG93bi1idXR0b24sIC5yZW1vdmUtYnV0dG9uIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci1jb2xvcjogIzIyMjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBmb250LXNpemU6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDJweCAxMHB4O1xuICAgICAgICBjb2xvcjogIzIyMjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB9XG5cbiAgICAubW92ZS11cC1idXR0b246aG92ZXIsIC5tb3ZlLWRvd24tYnV0dG9uOmhvdmVyLCAucmVtb3ZlLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG4gICAgfVxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImxpXCIsXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJyZW1vdmUtYnV0dG9uXCIsXG4gICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIHRoaXMgaWRlbnRpZmllclwiIH0sXG4gICAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmVfaWRlbnRpZmllciB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ1dHRvbi1zcGFjZXJcIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICAtXFxuICAgICAgICBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwibW92ZS11cC1idXR0b25cIixcbiAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJNb3ZlIHRoaXMgaWRlbnRpZmllciB1cFwiIH0sXG4gICAgICAgICAgb246IHsgY2xpY2s6IF92bS5tb3ZlX2lkZW50aWZpZXJfdXAgfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b24tc3BhY2VyXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAg4payXFxuICAgICAgICBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwibW92ZS1kb3duLWJ1dHRvblwiLFxuICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIk1vdmUgdGhpcyBpZGVudGlmaWVyIGRvd25cIiB9LFxuICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ubW92ZV9pZGVudGlmaWVyX2Rvd24gfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b24tc3BhY2VyXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAg4pa8XFxuICAgICAgICBcIilcbiAgICAgICAgICBdKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIiB9LCBbX3ZtLl92KFwiXFxuICAgICAgICB0eXBlXFxuICAgIFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIHRleHQ6IFwiVGhlIHR5cGUgb2YgdGhlIGlkZW50aWZpZXIuXCIsXG4gICAgICAgICAgdXJsOlxuICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjaWRlbnRpZmllci10eXBlLXN0cmluZ3NcIlxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS52YWxpZGF0aW9uX3R5cGUuZXJyb3IgfSxcbiAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6IFwiZG9pIHwgc3doIHwgdXJsIHwgb3RoZXJcIiB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmlkZW50aWZpZXIudHlwZSB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgIF92bS51cGRhdGVfaWRlbnRpZmllcl90eXBlKCRldmVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS52YWxpZGF0aW9uX3R5cGUuZXJyb3JcbiAgICAgICAgPyBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJtZXNzYWdlXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgIFwiICsgX3ZtLl9zKF92bS52YWxpZGF0aW9uX3R5cGUubXNnKSArIFwiXFxuICAgIFwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCIgfSwgW192bS5fdihcIlxcbiAgICAgICAgdmFsdWVcXG4gICAgXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGNsYXNzOiB7IGVycm9yOiBfdm0udmFsaWRhdGlvbl92YWx1ZS5lcnJvciB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmlkZW50aWZpZXIudmFsdWUgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBfdm0udXBkYXRlX2lkZW50aWZpZXJfdmFsdWUoJGV2ZW50KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnZhbGlkYXRpb25fdmFsdWUuZXJyb3JcbiAgICAgICAgPyBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJtZXNzYWdlXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgIFwiICsgX3ZtLl9zKF92bS52YWxpZGF0aW9uX3ZhbHVlLm1zZykgKyBcIlxcbiAgICBcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKClcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtNTdkMDI4ZTJcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9JZGVudGlmaWVyLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9JZGVudGlmaWVyLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSWRlbnRpZmllci52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTdkMDI4ZTJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSWRlbnRpZmllci52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvSWRlbnRpZmllci52dWVcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNTdkMDI4ZTJcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi01N2QwMjhlMlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcbn0pKCl9XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG4iLCI8dGVtcGxhdGU+XG4gICAgPGxpIHYtaWY9XCJoYXNfaWRlbnRpZmllcnNcIj5cbiAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+XG4gICAgICAgICAgICBpZGVudGlmaWVyc1xuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIGlkZW50aWZpZXJzXCJcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwicmVtb3ZlX2lkZW50aWZpZXJzXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICByZW1vdmVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYWRkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJBZGQgaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cImFkZF9pZGVudGlmaWVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1zcGFjZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB0ZXh0PVwiUGVyc2lzdGVudCBpZGVudGlmaWVycyBmb3IgdGhlIHNvZnR3YXJlLlwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjaWRlbnRpZmllci1vYmplY3RzXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHVsPlxuICAgICAgICAgICAgPElkZW50aWZpZXJcbiAgICAgICAgICAgICAgICB2LWZvcj1cImlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtYmluZDprZXk9XCJpZGVudGlmaWVyLmlkXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6aWRlbnRpZmllcj1cImlkZW50aWZpZXJcIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1pZGVudGlmaWVyLWRvd249XCJtb3ZlX2lkZW50aWZpZXJfZG93blwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWlkZW50aWZpZXItdXA9XCJtb3ZlX2lkZW50aWZpZXJfdXBcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWlkZW50aWZpZXI9XCJyZW1vdmVfaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtaWRlbnRpZmllci10eXBlPVwidXBkYXRlX2lkZW50aWZpZXJfdHlwZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtaWRlbnRpZmllci12YWx1ZT1cInVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvdWw+XG4gICAgPC9saT5cbiAgICA8bGkgdi1lbHNlPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIGlkZW50aWZpZXJzXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJhZGRfaWRlbnRpZmllcnNcIlxuICAgICAgICA+XG4gICAgICAgICAgICBBZGQgaWRlbnRpZmllcnNcbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmltcG9ydCB7YWRkX2lkZW50aWZpZXIsXG4gICAgICAgIGFkZF9pZGVudGlmaWVycyxcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXIsXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVycyxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWV9IGZyb20gJy4vSWRlbnRpZmllcnNFbWl0dGVycy5qcyc7XG5cbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XG5pbXBvcnQgSWRlbnRpZmllciBmcm9tICcuL0lkZW50aWZpZXIudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdJZGVudGlmaWVycycsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBIZWxwVGV4dCxcbiAgICAgICAgSWRlbnRpZmllclxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWRlbnRpZmllcnM6IEFycmF5XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNfaWRlbnRpZmllcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaWRlbnRpZmllcnMnKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLmlkZW50aWZpZXJzICE9PSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRfaWRlbnRpZmllcixcbiAgICAgICAgYWRkX2lkZW50aWZpZXJzLFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX3VwLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxuICAgICAgICB1cGRhdGVfaWRlbnRpZmllcl90eXBlLFxuICAgICAgICB1cGRhdGVfaWRlbnRpZmllcl92YWx1ZVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG4gICAgLmJ1dHRvbi1zcGFjZXIge1xuICAgICAgICBtaW4td2lkdGg6IDE2cHg7XG4gICAgfVxuXG4gICAgLmFkZC1idXR0b24ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xuICAgICAgICBib3JkZXItd2lkdGg6IDFweDtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XG4gICAgICAgIGNvbG9yOiAjMjIyO1xuICAgIH1cblxuICAgIC5hZGQtYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcbiAgICB9XG5cbiAgICB1bCB7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAyZW07XG4gICAgfVxuICAgIGxpIHtcbiAgICAgICAgcGFkZGluZy10b3A6IDAuNWVtO1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XG4gICAgfVxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uaGFzX2lkZW50aWZpZXJzXG4gICAgPyBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgaWRlbnRpZmllcnNcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIGlkZW50aWZpZXJzXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnJlbW92ZV9pZGVudGlmaWVycyB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJhZGQtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiQWRkIGlkZW50aWZpZXJcIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkX2lkZW50aWZpZXIgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b24tc3BhY2VyXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICtcXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHRleHQ6IFwiUGVyc2lzdGVudCBpZGVudGlmaWVycyBmb3IgdGhlIHNvZnR3YXJlLlwiLFxuICAgICAgICAgICAgICB1cmw6XG4gICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjaWRlbnRpZmllci1vYmplY3RzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgICAgX3ZtLl9sKF92bS5pZGVudGlmaWVycywgZnVuY3Rpb24oaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICByZXR1cm4gX2MoXCJJZGVudGlmaWVyXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGlkZW50aWZpZXIuaWQsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgaWRlbnRpZmllcjogaWRlbnRpZmllciB9LFxuICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICBcIm1vdmUtaWRlbnRpZmllci1kb3duXCI6IF92bS5tb3ZlX2lkZW50aWZpZXJfZG93bixcbiAgICAgICAgICAgICAgICAgIFwibW92ZS1pZGVudGlmaWVyLXVwXCI6IF92bS5tb3ZlX2lkZW50aWZpZXJfdXAsXG4gICAgICAgICAgICAgICAgICBcInJlbW92ZS1pZGVudGlmaWVyXCI6IF92bS5yZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdHlwZVwiOiBfdm0udXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdmFsdWVcIjogX3ZtLnVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIDFcbiAgICAgIClcbiAgICA6IF9jKFwibGlcIiwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBpZGVudGlmaWVyc1wiIH0sXG4gICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZF9pZGVudGlmaWVycyB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICBBZGQgaWRlbnRpZmllcnNcXG4gICAgXCIpXVxuICAgICAgICApXG4gICAgICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtYjQzZWQ2ZmVcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9JZGVudGlmaWVycy52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSWRlbnRpZmllcnMudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9JZGVudGlmaWVycy52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYjQzZWQ2ZmVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSWRlbnRpZmllcnMudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0lkZW50aWZpZXJzLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi1iNDNlZDZmZVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LWI0M2VkNmZlXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGRfa2V5d29yZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWtleXdvcmQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9rZXl3b3JkcyAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWtleXdvcmRzJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2tleXdvcmRfZG93biAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUta2V5d29yZC1kb3duJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2tleXdvcmRfdXAgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWtleXdvcmQtdXAnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9rZXl3b3JkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWtleXdvcmQnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9rZXl3b3JkcyAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWtleXdvcmRzJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfa2V5d29yZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1rZXl3b3JkJywgcGF5bG9hZClcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBhZGRfa2V5d29yZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWtleXdvcmQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVfa2V5d29yZF9kb3duICgpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWtleXdvcmQtZG93bicsIHRoaXMua2V5d29yZC5pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2tleXdvcmRfdXAgKCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUta2V5d29yZC11cCcsIHRoaXMua2V5d29yZC5pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfa2V5d29yZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWtleXdvcmQnLCB0aGlzLmtleXdvcmQuaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2tleXdvcmQgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIGlkOiB0aGlzLmtleXdvcmQuaWQsXG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1rZXl3b3JkJywgcGF5bG9hZClcbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwicmVtb3ZlLWJ1dHRvblwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIHRoaXMga2V5d29yZFwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwicmVtb3ZlX2tleXdvcmRcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgIC1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzcz1cIm1vdmUtdXAtYnV0dG9uXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJNb3ZlIHRoaXMga2V5d29yZCB1cFwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwibW92ZV9rZXl3b3JkX3VwXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1zcGFjZXJcIj5cbiAgICAgICAgICAgICAgICAmI3gyNUIyO1xuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwibW92ZS1kb3duLWJ1dHRvblwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiTW92ZSB0aGlzIGtleXdvcmQgZG93blwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwibW92ZV9rZXl3b3JkX2Rvd25cIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgICYjeDI1QkM7XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJrZXl3b3JkLnRleHRcIlxuICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZV9rZXl3b3JkKCRldmVudClcIlxuICAgICAgICA+XG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmltcG9ydCB7bW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgIG1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkfSBmcm9tICcuL0tleXdvcmRFbWl0dGVycy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnS2V5d29yZCcsXG4gICAgcHJvcHM6IHtcbiAgICAgICAga2V5d29yZDogT2JqZWN0XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIG1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICBtb3ZlX2tleXdvcmRfdXAsXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkLFxuICAgICAgICB1cGRhdGVfa2V5d29yZFxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG4gICAgLmJ1dHRvbi1zcGFjZXIge1xuICAgICAgICBtaW4td2lkdGg6IDE2cHg7XG4gICAgfVxuXG4gICAgLm1vdmUtdXAtYnV0dG9uLCAubW92ZS1kb3duLWJ1dHRvbiwgLnJlbW92ZS1idXR0b24ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjO1xuICAgICAgICBib3JkZXItd2lkdGg6IDFweDtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjMjIyO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMnB4IDEwcHg7XG4gICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIH1cblxuICAgIC5tb3ZlLXVwLWJ1dHRvbjpob3ZlciwgLm1vdmUtZG93bi1idXR0b246aG92ZXIsIC5yZW1vdmUtYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcbiAgICB9XG5cbjwvc3R5bGU+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwibGlcIiwgW1xuICAgIF9jKFxuICAgICAgXCJidXR0b25cIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwicmVtb3ZlLWJ1dHRvblwiLFxuICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJSZW1vdmUgdGhpcyBrZXl3b3JkXCIgfSxcbiAgICAgICAgb246IHsgY2xpY2s6IF92bS5yZW1vdmVfa2V5d29yZCB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ1dHRvbi1zcGFjZXJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgLVxcbiAgICAgICAgXCIpXG4gICAgICAgIF0pXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFxuICAgICAgXCJidXR0b25cIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwibW92ZS11cC1idXR0b25cIixcbiAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiTW92ZSB0aGlzIGtleXdvcmQgdXBcIiB9LFxuICAgICAgICBvbjogeyBjbGljazogX3ZtLm1vdmVfa2V5d29yZF91cCB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ1dHRvbi1zcGFjZXJcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAg4payXFxuICAgICAgICBcIilcbiAgICAgICAgXSlcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImJ1dHRvblwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJtb3ZlLWRvd24tYnV0dG9uXCIsXG4gICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIk1vdmUgdGhpcyBrZXl3b3JkIGRvd25cIiB9LFxuICAgICAgICBvbjogeyBjbGljazogX3ZtLm1vdmVfa2V5d29yZF9kb3duIH1cbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnV0dG9uLXNwYWNlclwiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICDilrxcXG4gICAgICAgIFwiKVxuICAgICAgICBdKVxuICAgICAgXVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ua2V5d29yZC50ZXh0IH0sXG4gICAgICBvbjoge1xuICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgX3ZtLnVwZGF0ZV9rZXl3b3JkKCRldmVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi02N2NkMDk4MFwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0tleXdvcmQudnVlXCIpXG59XG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0tleXdvcmQudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9LZXl3b3JkLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi02N2NkMDk4MFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9LZXl3b3JkLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9LZXl3b3JkLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi02N2NkMDk4MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTY3Y2QwOTgwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGkgdi1pZj1cImhhc19rZXl3b3Jkc1wiPlxuICAgICAgICA8cCBjbGFzcz1cImNhcHRpb25cIj5cbiAgICAgICAgICAgIGtleXdvcmRzXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJSZW1vdmUga2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVfa2V5d29yZHNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJhZGQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBrZXl3b3JkXCJcbiAgICAgICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkX2tleXdvcmRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHRleHQ9XCJLZXl3b3JkcyBwZXJ0YWluaW5nIHRvIHRoZSBzb2Z0d2FyZSB2ZXJzaW9uXCJcbiAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIC8+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxLZXl3b3JkXG4gICAgICAgICAgICAgICAgdi1mb3I9XCJrZXl3b3JkIGluIGtleXdvcmRzXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5PVwia2V5d29yZC5pZFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmtleXdvcmQ9XCJrZXl3b3JkXCJcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUta2V5d29yZC1kb3duPVwibW92ZV9rZXl3b3JkX2Rvd25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1rZXl3b3JkLXVwPVwibW92ZV9rZXl3b3JkX3VwXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1rZXl3b3JkPVwicmVtb3ZlX2tleXdvcmRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWtleXdvcmQ9XCJ1cGRhdGVfa2V5d29yZFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L3VsPlxuICAgIDwvbGk+XG4gICAgPGxpIHYtZWxzZT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIkFkZCBrZXl3b3Jkc1wiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkX2tleXdvcmRzXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIGtleXdvcmRzXG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5pbXBvcnQge2FkZF9rZXl3b3JkLFxuICAgICAgICBhZGRfa2V5d29yZHMsXG4gICAgICAgIG1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICBtb3ZlX2tleXdvcmRfdXAsXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkLFxuICAgICAgICByZW1vdmVfa2V5d29yZHMsXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkfSBmcm9tICcuL0tleXdvcmRzRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuaW1wb3J0IEtleXdvcmQgZnJvbSAnLi9LZXl3b3JkLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnS2V5d29yZHMnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHQsXG4gICAgICAgIEtleXdvcmRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGtleXdvcmRzOiBBcnJheVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzX2tleXdvcmRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcHJvcHMuaGFzT3duUHJvcGVydHkoJ2tleXdvcmRzJykgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy5rZXl3b3JkcyAhPT0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkX2tleXdvcmQsXG4gICAgICAgIGFkZF9rZXl3b3JkcyxcbiAgICAgICAgbW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgIG1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkcyxcbiAgICAgICAgdXBkYXRlX2tleXdvcmRcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuICAgIC5idXR0b24tc3BhY2VyIHtcbiAgICAgICAgbWluLXdpZHRoOiAxNnB4O1xuICAgIH1cblxuICAgIC5hZGQtYnV0dG9uIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci1jb2xvcjogIzIyMjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBmb250LXNpemU6IDEwMCU7XG4gICAgICAgIHBhZGRpbmc6IDJweCAxMHB4O1xuICAgICAgICBjb2xvcjogIzIyMjtcbiAgICB9XG5cbiAgICAuYWRkLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG4gICAgfVxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uaGFzX2tleXdvcmRzXG4gICAgPyBfYyhcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAga2V5d29yZHNcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIGtleXdvcmRzXCIgfSxcbiAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnJlbW92ZV9rZXl3b3JkcyB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICByZW1vdmVcXG4gICAgICAgIFwiKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJhZGQtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiQWRkIGtleXdvcmRcIiB9LFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkX2tleXdvcmQgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidXR0b24tc3BhY2VyXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICtcXG4gICAgICAgICAgICBcIilcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgIHRleHQ6IFwiS2V5d29yZHMgcGVydGFpbmluZyB0byB0aGUgc29mdHdhcmUgdmVyc2lvblwiLFxuICAgICAgICAgICAgICB1cmw6XG4gICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICBfdm0uX2woX3ZtLmtleXdvcmRzLCBmdW5jdGlvbihrZXl3b3JkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfYyhcIktleXdvcmRcIiwge1xuICAgICAgICAgICAgICAgIGtleToga2V5d29yZC5pZCxcbiAgICAgICAgICAgICAgICBhdHRyczogeyBrZXl3b3JkOiBrZXl3b3JkIH0sXG4gICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgIFwibW92ZS1rZXl3b3JkLWRvd25cIjogX3ZtLm1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICAgICAgICAgICAgXCJtb3ZlLWtleXdvcmQtdXBcIjogX3ZtLm1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgICAgICAgICAgIFwicmVtb3ZlLWtleXdvcmRcIjogX3ZtLnJlbW92ZV9rZXl3b3JkLFxuICAgICAgICAgICAgICAgICAgXCJ1cGRhdGUta2V5d29yZFwiOiBfdm0udXBkYXRlX2tleXdvcmRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKVxuICAgIDogX2MoXCJsaVwiLCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiQWRkIGtleXdvcmRzXCIgfSxcbiAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkX2tleXdvcmRzIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCBrZXl3b3Jkc1xcbiAgICBcIildXG4gICAgICAgIClcbiAgICAgIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi1kNTAwNzBiYVwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0tleXdvcmRzLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9LZXl3b3Jkcy52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0tleXdvcmRzLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1kNTAwNzBiYVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9LZXl3b3Jkcy52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvS2V5d29yZHMudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWQ1MDA3MGJhXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtZDUwMDcwYmFcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlIChldmVudCkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfTtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUnLCBwYXlsb2FkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV9saWNlbnNlICgpIHtcbiAgICBsZXQgYXV0aG9yaXplZF9zZXQgPSAgbmV3IFNldChbXG4gICAgICAgIFwiMEJTRFwiLCBcIkFBTFwiLCBcIkFic3R5bGVzXCIsIFwiQWRvYmUtMjAwNlwiLCBcIkFkb2JlLUdseXBoXCIsIFwiQURTTFwiLCBcIkFGTC0xLjFcIixcbiAgICAgICAgXCJBRkwtMS4yXCIsIFwiQUZMLTIuMFwiLCBcIkFGTC0yLjFcIiwgXCJBRkwtMy4wXCIsIFwiQWZtcGFyc2VcIiwgXCJBR1BMLTEuMC1vbmx5XCIsXG4gICAgICAgIFwiQUdQTC0xLjAtb3ItbGF0ZXJcIiwgXCJBR1BMLTEuMFwiLCBcIkFHUEwtMy4wLW9ubHlcIiwgXCJBR1BMLTMuMC1vci1sYXRlclwiLFxuICAgICAgICBcIkFHUEwtMy4wXCIsIFwiQWxhZGRpblwiLCBcIkFNRFBMUEFcIiwgXCJBTUxcIiwgXCJBTVBBU1wiLCBcIkFOVExSLVBEXCIsIFwiQXBhY2hlLTEuMFwiLFxuICAgICAgICBcIkFwYWNoZS0xLjFcIiwgXCJBcGFjaGUtMi4wXCIsIFwiQVBBRk1MXCIsIFwiQVBMLTEuMFwiLCBcIkFQU0wtMS4wXCIsIFwiQVBTTC0xLjFcIixcbiAgICAgICAgXCJBUFNMLTEuMlwiLCBcIkFQU0wtMi4wXCIsIFwiQXJ0aXN0aWMtMS4wLWNsOFwiLCBcIkFydGlzdGljLTEuMC1QZXJsXCIsXG4gICAgICAgIFwiQXJ0aXN0aWMtMS4wXCIsIFwiQXJ0aXN0aWMtMi4wXCIsIFwiQmFoeXBoXCIsIFwiQmFyclwiLCBcIkJlZXJ3YXJlXCIsIFwiQml0VG9ycmVudC0xLjBcIixcbiAgICAgICAgXCJCaXRUb3JyZW50LTEuMVwiLCBcImJsZXNzaW5nXCIsIFwiQmx1ZU9hay0xLjAuMFwiLCBcIkJvcmNldXhcIiwgXCJCU0QtMS1DbGF1c2VcIixcbiAgICAgICAgXCJCU0QtMi1DbGF1c2UtRnJlZUJTRFwiLCBcIkJTRC0yLUNsYXVzZS1OZXRCU0RcIiwgXCJCU0QtMi1DbGF1c2UtUGF0ZW50XCIsXG4gICAgICAgIFwiQlNELTItQ2xhdXNlXCIsIFwiQlNELTMtQ2xhdXNlLUF0dHJpYnV0aW9uXCIsIFwiQlNELTMtQ2xhdXNlLUNsZWFyXCIsXG4gICAgICAgIFwiQlNELTMtQ2xhdXNlLUxCTkxcIiwgXCJCU0QtMy1DbGF1c2UtTm8tTnVjbGVhci1MaWNlbnNlLTIwMTRcIixcbiAgICAgICAgXCJCU0QtMy1DbGF1c2UtTm8tTnVjbGVhci1MaWNlbnNlXCIsIFwiQlNELTMtQ2xhdXNlLU5vLU51Y2xlYXItV2FycmFudHlcIixcbiAgICAgICAgXCJCU0QtMy1DbGF1c2UtT3Blbi1NUElcIiwgXCJCU0QtMy1DbGF1c2VcIiwgXCJCU0QtNC1DbGF1c2UtVUNcIiwgXCJCU0QtNC1DbGF1c2VcIixcbiAgICAgICAgXCJCU0QtUHJvdGVjdGlvblwiLCBcIkJTRC1Tb3VyY2UtQ29kZVwiLCBcIkJTTC0xLjBcIiwgXCJiemlwMi0xLjAuNVwiLCBcImJ6aXAyLTEuMC42XCIsXG4gICAgICAgIFwiQ2FsZGVyYVwiLCBcIkNBVE9TTC0xLjFcIiwgXCJDQy1CWS0xLjBcIiwgXCJDQy1CWS0yLjBcIiwgXCJDQy1CWS0yLjVcIiwgXCJDQy1CWS0zLjBcIixcbiAgICAgICAgXCJDQy1CWS00LjBcIiwgXCJDQy1CWS1OQy0xLjBcIiwgXCJDQy1CWS1OQy0yLjBcIiwgXCJDQy1CWS1OQy0yLjVcIiwgXCJDQy1CWS1OQy0zLjBcIixcbiAgICAgICAgXCJDQy1CWS1OQy00LjBcIiwgXCJDQy1CWS1OQy1ORC0xLjBcIiwgXCJDQy1CWS1OQy1ORC0yLjBcIiwgXCJDQy1CWS1OQy1ORC0yLjVcIixcbiAgICAgICAgXCJDQy1CWS1OQy1ORC0zLjBcIiwgXCJDQy1CWS1OQy1ORC00LjBcIiwgXCJDQy1CWS1OQy1TQS0xLjBcIiwgXCJDQy1CWS1OQy1TQS0yLjBcIixcbiAgICAgICAgXCJDQy1CWS1OQy1TQS0yLjVcIiwgXCJDQy1CWS1OQy1TQS0zLjBcIiwgXCJDQy1CWS1OQy1TQS00LjBcIiwgXCJDQy1CWS1ORC0xLjBcIixcbiAgICAgICAgXCJDQy1CWS1ORC0yLjBcIiwgXCJDQy1CWS1ORC0yLjVcIiwgXCJDQy1CWS1ORC0zLjBcIiwgXCJDQy1CWS1ORC00LjBcIiwgXCJDQy1CWS1TQS0xLjBcIixcbiAgICAgICAgXCJDQy1CWS1TQS0yLjBcIiwgXCJDQy1CWS1TQS0yLjVcIiwgXCJDQy1CWS1TQS0zLjBcIiwgXCJDQy1CWS1TQS00LjBcIiwgXCJDQy1QRERDXCIsXG4gICAgICAgIFwiQ0MwLTEuMFwiLCBcIkNEREwtMS4wXCIsIFwiQ0RETC0xLjFcIiwgXCJDRExBLVBlcm1pc3NpdmUtMS4wXCIsIFwiQ0RMQS1TaGFyaW5nLTEuMFwiLFxuICAgICAgICBcIkNFQ0lMTC0xLjBcIiwgXCJDRUNJTEwtMS4xXCIsIFwiQ0VDSUxMLTIuMFwiLCBcIkNFQ0lMTC0yLjFcIiwgXCJDRUNJTEwtQlwiLCBcIkNFQ0lMTC1DXCIsXG4gICAgICAgIFwiQ0VSTi1PSEwtMS4xXCIsIFwiQ0VSTi1PSEwtMS4yXCIsIFwiQ2xBcnRpc3RpY1wiLCBcIkNOUkktSnl0aG9uXCIsXG4gICAgICAgIFwiQ05SSS1QeXRob24tR1BMLUNvbXBhdGlibGVcIiwgXCJDTlJJLVB5dGhvblwiLCBcIkNvbmRvci0xLjFcIixcbiAgICAgICAgXCJjb3B5bGVmdC1uZXh0LTAuMy4wXCIsIFwiY29weWxlZnQtbmV4dC0wLjMuMVwiLCBcIkNQQUwtMS4wXCIsIFwiQ1BMLTEuMFwiLFxuICAgICAgICBcIkNQT0wtMS4wMlwiLCBcIkNyb3Nzd29yZFwiLCBcIkNyeXN0YWxTdGFja2VyXCIsIFwiQ1VBLU9QTC0xLjBcIiwgXCJDdWJlXCIsIFwiY3VybFwiLFxuICAgICAgICBcIkQtRlNMLTEuMFwiLCBcImRpZmZtYXJrXCIsIFwiRE9DXCIsIFwiRG90c2VxblwiLCBcIkRTRFBcIiwgXCJkdmlwZGZtXCIsIFwiRUNMLTEuMFwiLFxuICAgICAgICBcIkVDTC0yLjBcIiwgXCJlQ29zLTIuMFwiLCBcIkVGTC0xLjBcIiwgXCJFRkwtMi4wXCIsIFwiZUdlbml4XCIsIFwiRW50ZXNzYVwiLCBcIkVQTC0xLjBcIixcbiAgICAgICAgXCJFUEwtMi4wXCIsIFwiRXJsUEwtMS4xXCIsIFwiZXRhbGFiLTIuMFwiLCBcIkVVRGF0YWdyaWRcIiwgXCJFVVBMLTEuMFwiLCBcIkVVUEwtMS4xXCIsXG4gICAgICAgIFwiRVVQTC0xLjJcIiwgXCJFdXJvc3ltXCIsIFwiRmFpclwiLCBcIkZyYW1ld29yeC0xLjBcIiwgXCJGcmVlSW1hZ2VcIiwgXCJGU0ZBUFwiLCBcIkZTRlVMXCIsXG4gICAgICAgIFwiRlNGVUxMUlwiLCBcIkZUTFwiLCBcIkdGREwtMS4xLW9ubHlcIiwgXCJHRkRMLTEuMS1vci1sYXRlclwiLCBcIkdGREwtMS4xXCIsXG4gICAgICAgIFwiR0ZETC0xLjItb25seVwiLCBcIkdGREwtMS4yLW9yLWxhdGVyXCIsIFwiR0ZETC0xLjJcIiwgXCJHRkRMLTEuMy1vbmx5XCIsXG4gICAgICAgIFwiR0ZETC0xLjMtb3ItbGF0ZXJcIiwgXCJHRkRMLTEuM1wiLCBcIkdpZnR3YXJlXCIsIFwiR0wyUFNcIiwgXCJHbGlkZVwiLCBcIkdsdWx4ZVwiLFxuICAgICAgICBcImdudXBsb3RcIiwgXCJHUEwtMS4wLW9ubHlcIiwgXCJHUEwtMS4wLW9yLWxhdGVyXCIsIFwiR1BMLTEuMFwiLCBcIkdQTC0xLjArXCIsXG4gICAgICAgIFwiR1BMLTIuMC1vbmx5XCIsIFwiR1BMLTIuMC1vci1sYXRlclwiLCBcIkdQTC0yLjAtd2l0aC1hdXRvY29uZi1leGNlcHRpb25cIixcbiAgICAgICAgXCJHUEwtMi4wLXdpdGgtYmlzb24tZXhjZXB0aW9uXCIsIFwiR1BMLTIuMC13aXRoLWNsYXNzcGF0aC1leGNlcHRpb25cIixcbiAgICAgICAgXCJHUEwtMi4wLXdpdGgtZm9udC1leGNlcHRpb25cIiwgXCJHUEwtMi4wLXdpdGgtR0NDLWV4Y2VwdGlvblwiLCBcIkdQTC0yLjBcIixcbiAgICAgICAgXCJHUEwtMi4wK1wiLCBcIkdQTC0zLjAtb25seVwiLCBcIkdQTC0zLjAtb3ItbGF0ZXJcIixcbiAgICAgICAgXCJHUEwtMy4wLXdpdGgtYXV0b2NvbmYtZXhjZXB0aW9uXCIsIFwiR1BMLTMuMC13aXRoLUdDQy1leGNlcHRpb25cIiwgXCJHUEwtMy4wXCIsXG4gICAgICAgIFwiR1BMLTMuMCtcIiwgXCJnU09BUC0xLjNiXCIsIFwiSGFza2VsbFJlcG9ydFwiLCBcIkhQTkQtc2VsbC12YXJpYW50XCIsIFwiSFBORFwiLFxuICAgICAgICBcIklCTS1waWJzXCIsIFwiSUNVXCIsIFwiSUpHXCIsIFwiSW1hZ2VNYWdpY2tcIiwgXCJpTWF0aXhcIiwgXCJJbWxpYjJcIiwgXCJJbmZvLVpJUFwiLFxuICAgICAgICBcIkludGVsLUFDUElcIiwgXCJJbnRlbFwiLCBcIkludGVyYmFzZS0xLjBcIiwgXCJJUEFcIiwgXCJJUEwtMS4wXCIsIFwiSVNDXCIsIFwiSmFzUGVyLTIuMFwiLFxuICAgICAgICBcIkpQTklDXCIsIFwiSlNPTlwiLCBcIkxBTC0xLjJcIiwgXCJMQUwtMS4zXCIsIFwiTGF0ZXgyZVwiLCBcIkxlcHRvbmljYVwiLCBcIkxHUEwtMi4wLW9ubHlcIixcbiAgICAgICAgXCJMR1BMLTIuMC1vci1sYXRlclwiLCBcIkxHUEwtMi4wXCIsIFwiTEdQTC0yLjArXCIsIFwiTEdQTC0yLjEtb25seVwiLFxuICAgICAgICBcIkxHUEwtMi4xLW9yLWxhdGVyXCIsIFwiTEdQTC0yLjFcIiwgXCJMR1BMLTIuMStcIiwgXCJMR1BMLTMuMC1vbmx5XCIsXG4gICAgICAgIFwiTEdQTC0zLjAtb3ItbGF0ZXJcIiwgXCJMR1BMLTMuMFwiLCBcIkxHUEwtMy4wK1wiLCBcIkxHUExMUlwiLCBcImxpYnBuZy0yLjBcIiwgXCJMaWJwbmdcIixcbiAgICAgICAgXCJsaWJ0aWZmXCIsIFwiTGlMaVEtUC0xLjFcIiwgXCJMaUxpUS1SLTEuMVwiLCBcIkxpTGlRLVJwbHVzLTEuMVwiLCBcIkxpbnV4LU9wZW5JQlwiLFxuICAgICAgICBcIkxQTC0xLjBcIiwgXCJMUEwtMS4wMlwiLCBcIkxQUEwtMS4wXCIsIFwiTFBQTC0xLjFcIiwgXCJMUFBMLTEuMlwiLCBcIkxQUEwtMS4zYVwiLFxuICAgICAgICBcIkxQUEwtMS4zY1wiLCBcIk1ha2VJbmRleFwiLCBcIk1pck9TXCIsIFwiTUlULTBcIiwgXCJNSVQtYWR2ZXJ0aXNpbmdcIiwgXCJNSVQtQ01VXCIsXG4gICAgICAgIFwiTUlULWVubmFcIiwgXCJNSVQtZmVoXCIsIFwiTUlUXCIsIFwiTUlUTkZBXCIsIFwiTW90b3NvdG9cIiwgXCJtcGljaDJcIiwgXCJNUEwtMS4wXCIsXG4gICAgICAgIFwiTVBMLTEuMVwiLCBcIk1QTC0yLjAtbm8tY29weWxlZnQtZXhjZXB0aW9uXCIsIFwiTVBMLTIuMFwiLCBcIk1TLVBMXCIsIFwiTVMtUkxcIixcbiAgICAgICAgXCJNVExMXCIsIFwiTXVsYW5QU0wtMS4wXCIsIFwiTXVsdGljc1wiLCBcIk11cFwiLCBcIk5BU0EtMS4zXCIsIFwiTmF1bWVuXCIsIFwiTkJQTC0xLjBcIixcbiAgICAgICAgXCJOQ1NBXCIsIFwiTmV0LVNOTVBcIiwgXCJOZXRDREZcIiwgXCJOZXdzbGV0clwiLCBcIk5HUExcIiwgXCJOTE9ELTEuMFwiLCBcIk5MUExcIiwgXCJOb2tpYVwiLFxuICAgICAgICBcIk5PU0xcIiwgXCJOb3dlYlwiLCBcIk5QTC0xLjBcIiwgXCJOUEwtMS4xXCIsIFwiTlBPU0wtMy4wXCIsIFwiTlJMXCIsIFwiTlRQXCIsIFwiTnVuaXRcIixcbiAgICAgICAgXCJPQ0NULVBMXCIsIFwiT0NMQy0yLjBcIiwgXCJPRGJMLTEuMFwiLCBcIk9EQy1CeS0xLjBcIiwgXCJPRkwtMS4wXCIsIFwiT0ZMLTEuMVwiLFxuICAgICAgICBcIk9HTC1DYW5hZGEtMi4wXCIsIFwiT0dMLVVLLTEuMFwiLCBcIk9HTC1VSy0yLjBcIiwgXCJPR0wtVUstMy4wXCIsIFwiT0dUU0xcIixcbiAgICAgICAgXCJPTERBUC0xLjFcIiwgXCJPTERBUC0xLjJcIiwgXCJPTERBUC0xLjNcIiwgXCJPTERBUC0xLjRcIiwgXCJPTERBUC0yLjAuMVwiLCBcIk9MREFQLTIuMFwiLFxuICAgICAgICBcIk9MREFQLTIuMVwiLCBcIk9MREFQLTIuMi4xXCIsIFwiT0xEQVAtMi4yLjJcIiwgXCJPTERBUC0yLjJcIiwgXCJPTERBUC0yLjNcIixcbiAgICAgICAgXCJPTERBUC0yLjRcIiwgXCJPTERBUC0yLjVcIiwgXCJPTERBUC0yLjZcIiwgXCJPTERBUC0yLjdcIiwgXCJPTERBUC0yLjhcIiwgXCJPTUxcIixcbiAgICAgICAgXCJPcGVuU1NMXCIsIFwiT1BMLTEuMFwiLCBcIk9TRVQtUEwtMi4xXCIsIFwiT1NMLTEuMFwiLCBcIk9TTC0xLjFcIiwgXCJPU0wtMi4wXCIsXG4gICAgICAgIFwiT1NMLTIuMVwiLCBcIk9TTC0zLjBcIiwgXCJQYXJpdHktNi4wLjBcIiwgXCJQRERMLTEuMFwiLCBcIlBIUC0zLjBcIiwgXCJQSFAtMy4wMVwiLFxuICAgICAgICBcIlBsZXh1c1wiLCBcIlBvc3RncmVTUUxcIiwgXCJwc2ZyYWdcIiwgXCJwc3V0aWxzXCIsIFwiUHl0aG9uLTIuMFwiLCBcIlFodWxsXCIsIFwiUVBMLTEuMFwiLFxuICAgICAgICBcIlJkaXNjXCIsIFwiUkhlQ29zLTEuMVwiLCBcIlJQTC0xLjFcIiwgXCJSUEwtMS41XCIsIFwiUlBTTC0xLjBcIiwgXCJSU0EtTURcIiwgXCJSU0NQTFwiLFxuICAgICAgICBcIlJ1YnlcIiwgXCJTQVgtUERcIiwgXCJTYXhwYXRoXCIsIFwiU0NFQVwiLCBcIlNlbmRtYWlsLTguMjNcIiwgXCJTZW5kbWFpbFwiLCBcIlNHSS1CLTEuMFwiLFxuICAgICAgICBcIlNHSS1CLTEuMVwiLCBcIlNHSS1CLTIuMFwiLCBcIlNITC0wLjVcIiwgXCJTSEwtMC41MVwiLCBcIlNpbVBMLTIuMFwiLCBcIlNJU1NMLTEuMlwiLFxuICAgICAgICBcIlNJU1NMXCIsIFwiU2xlZXB5Y2F0XCIsIFwiU01MTkpcIiwgXCJTTVBQTFwiLCBcIlNOSUFcIiwgXCJTcGVuY2VyLTg2XCIsIFwiU3BlbmNlci05NFwiLFxuICAgICAgICBcIlNwZW5jZXItOTlcIiwgXCJTUEwtMS4wXCIsIFwiU1NILU9wZW5TU0hcIiwgXCJTU0gtc2hvcnRcIiwgXCJTU1BMLTEuMFwiLFxuICAgICAgICBcIlN0YW5kYXJkTUwtTkpcIiwgXCJTdWdhckNSTS0xLjEuM1wiLCBcIlNXTFwiLCBcIlRBUFItT0hMLTEuMFwiLCBcIlRDTFwiLFxuICAgICAgICBcIlRDUC13cmFwcGVyc1wiLCBcIlRNYXRlXCIsIFwiVE9SUVVFLTEuMVwiLCBcIlRPU0xcIiwgXCJUVS1CZXJsaW4tMS4wXCIsXG4gICAgICAgIFwiVFUtQmVybGluLTIuMFwiLCBcIlVDTC0xLjBcIiwgXCJVbmljb2RlLURGUy0yMDE1XCIsIFwiVW5pY29kZS1ERlMtMjAxNlwiLFxuICAgICAgICBcIlVuaWNvZGUtVE9VXCIsIFwiVW5saWNlbnNlXCIsIFwiVVBMLTEuMFwiLCBcIlZpbVwiLCBcIlZPU1RST01cIiwgXCJWU0wtMS4wXCIsXG4gICAgICAgIFwiVzNDLTE5OTgwNzIwXCIsIFwiVzNDLTIwMTUwNTEzXCIsIFwiVzNDXCIsIFwiV2F0Y29tLTEuMFwiLCBcIldzdWlwYVwiLCBcIldURlBMXCIsXG4gICAgICAgIFwid3hXaW5kb3dzXCIsIFwiWDExXCIsIFwiWGVyb3hcIiwgXCJYRnJlZTg2LTEuMVwiLCBcInhpbmV0ZFwiLCBcIlhuZXRcIiwgXCJ4cHBcIiwgXCJYU2thdFwiLFxuICAgICAgICBcIllQTC0xLjBcIiwgXCJZUEwtMS4xXCIsIFwiWmVkXCIsIFwiWmVuZC0yLjBcIiwgXCJaaW1icmEtMS4zXCIsIFwiWmltYnJhLTEuNFwiLFxuICAgICAgICBcInpsaWItYWNrbm93bGVkZ2VtZW50XCIsIFwiWmxpYlwiLCBcIlpQTC0xLjFcIiwgXCJaUEwtMi4wXCIsIFwiWlBMLTIuMVwiXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6ICFhdXRob3JpemVkX3NldC5oYXModGhpcy5saWNlbnNlKSxcbiAgICAgICAgbXNnOiBcIlVzZSBvbmUgb2YgdGhlIGF1dGhvcml6ZWQgbGljZW5zZSBhYmJyaXZpYXRpb25zLlwiXG4gICAgfVxufVxuIiwiPHRlbXBsYXRlPlxuICAgIDxsaT5cbiAgICAgICAgPHBcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc19saWNlbnNlXCJcbiAgICAgICAgICAgIGNsYXNzPVwiY2FwdGlvblwiXG4gICAgICAgID5cbiAgICAgICAgICAgIGxpY2Vuc2U6XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdi1zaG93PVwiaGFzX2xpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIGxpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfbGljZW5zZVwiXG4gICAgICAgICAgICB0ZXh0PVwiVGhlIGxpY2Vuc2UgdGhlIHNvZnR3YXJlIHZlcnNpb24gaXMgbGljZW5zZWQgdW5kZXIuXCJcbiAgICAgICAgICAgIHVybD1cImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIC8+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHYtc2hvdz1cIiFoYXNfbGljZW5zZVwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIGxpY2Vuc2VcIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cImFkZFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIEFkZCBsaWNlbnNlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc19saWNlbnNlXCJcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cImxpY2Vuc2VcIlxuICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiBsaWNlbnNlX3ZhbGlkYXRpb24uZXJyb3J9XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZS5nLiBBcGFjaGUtMi4wLCBNSVRcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZSgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1pZj1cImxpY2Vuc2VfdmFsaWRhdGlvbi5lcnJvclwiXG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfbGljZW5zZVwiXG4gICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyBsaWNlbnNlX3ZhbGlkYXRpb24ubXNnIH19IChTZWUgdGhlIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vc3BkeC9saWNlbnNlLWxpc3QtZGF0YS9ibG9iLzZiNzdjN2EyODQwMDA5NjYzZWUwYjA4MzUyM2ZjMGFkMjUzNzZiNTcvanNvbi9saWNlbnNlcy5qc29uXCI+Y29tcGxldGUgbGlzdDwvYT4pXG4gICAgICAgIDwvcD5cbiAgICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7YWRkLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIHVwZGF0ZX0gZnJvbSAnLi9MaWNlbnNlRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlX2xpY2Vuc2V9IGZyb20gJy4vTGljZW5zZVZhbGlkYXRvcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ0xpY2Vuc2UnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGxpY2Vuc2U6IFN0cmluZ1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzX2xpY2Vuc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnbGljZW5zZScpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMubGljZW5zZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIGxpY2Vuc2VfdmFsaWRhdGlvbjogdmFsaWRhdGVfbGljZW5zZVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJsaVwiLFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInBcIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX2xpY2Vuc2UsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX2xpY2Vuc2VcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIGxpY2Vuc2U6XFxuICAgICAgICBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfbGljZW5zZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX2xpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIGxpY2Vuc2VcIiB9LFxuICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnJlbW92ZSB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW192bS5fdihcIlxcbiAgICAgICAgICAgIHJlbW92ZVxcbiAgICAgICAgXCIpXVxuICAgICAgICAgIClcbiAgICAgICAgXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX2xpY2Vuc2UsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19saWNlbnNlXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgdGV4dDogXCJUaGUgbGljZW5zZSB0aGUgc29mdHdhcmUgdmVyc2lvbiBpcyBsaWNlbnNlZCB1bmRlci5cIixcbiAgICAgICAgICB1cmw6XG4gICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzX2xpY2Vuc2UsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiIWhhc19saWNlbnNlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCBsaWNlbnNlXCIgfSxcbiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCBsaWNlbnNlXFxuICAgIFwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19saWNlbnNlLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfbGljZW5zZVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBjbGFzczogeyBlcnJvcjogX3ZtLmxpY2Vuc2VfdmFsaWRhdGlvbi5lcnJvciB9LFxuICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogXCJlLmcuIEFwYWNoZS0yLjAsIE1JVFwiLCB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmxpY2Vuc2UgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBfdm0udXBkYXRlKCRldmVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5saWNlbnNlX3ZhbGlkYXRpb24uZXJyb3JcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfbGljZW5zZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX2xpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibWVzc2FnZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgXCJcXG4gICAgICAgIFwiICsgX3ZtLl9zKF92bS5saWNlbnNlX3ZhbGlkYXRpb24ubXNnKSArIFwiIChTZWUgdGhlIFwiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vc3BkeC9saWNlbnNlLWxpc3QtZGF0YS9ibG9iLzZiNzdjN2EyODQwMDA5NjYzZWUwYjA4MzUyM2ZjMGFkMjUzNzZiNTcvanNvbi9saWNlbnNlcy5qc29uXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJjb21wbGV0ZSBsaXN0XCIpXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIpXFxuICAgIFwiKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIClcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi1lMjA0Zjg1MFwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTIwNGY4NTBcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9MaWNlbnNlLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9MaWNlbnNlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTGljZW5zZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTIwNGY4NTBcXFwiLFxcXCJoYXNTY29wZWRcXFwiOnRydWUsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9MaWNlbnNlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBcImRhdGEtdi1lMjA0Zjg1MFwiXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9MaWNlbnNlLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi1lMjA0Zjg1MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LWUyMDRmODUwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlJywgcGF5bG9hZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUgKCkge1xuICAgIGxldCByZSA9IG5ldyBSZWdFeHAoJ14oaHR0cHM/fGZ0cCk6Ly8oKD86W15cXFxccy4vJCM/XXsxLH1cXFxcLil7MSx9KShbXlxcXFxzLi8kIz9dezIsfSkoWy8kIz9dezF9W15cXFxcc117MCx9KT8kJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6ICFyZS50ZXN0KHRoaXMucmVwb3NpdG9yeV9jb2RlKSxcbiAgICAgICAgbXNnOiBcIlVzZSBhIHZhbGlkIFVSTC5cIlxuICAgIH1cbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICAgIGNsYXNzPVwiY2FwdGlvblwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHJlcG9zaXRvcnktY29kZVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIHYtc2hvdz1cImhhc19yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIHJlcG9zaXRvcnktY29kZVwiXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cInJlbW92ZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgcmVtb3ZlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc19yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgdGV4dD1cIlRoZSBVUkwgdG8gdGhlIHNvZnR3YXJlIHZlcnNpb24gaW4gYSBzb3VyY2UgY29kZSByZXBvc2l0b3J5LlwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB2LXNob3c9XCIhaGFzX3JlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHRpdGxlPVwiQWRkIHJlcG9zaXRvcnktY29kZVwiXG4gICAgICAgICAgICB2LW9uOmNsaWNrPVwiYWRkXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgQWRkIHJlcG9zaXRvcnktY29kZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cInJlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJ7ZXJyb3I6IHZhbGlkYXRlLmVycm9yfVwiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB2LW9uOmlucHV0PVwidXBkYXRlKCRldmVudClcIlxuICAgICAgICA+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LWlmPVwidmFsaWRhdGUuZXJyb3JcIlxuICAgICAgICAgICAgdi1zaG93PVwiaGFzX3JlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyB2YWxpZGF0ZS5tc2cgfX1cbiAgICAgICAgPC9wPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL1JlcG9zaXRvcnlDb2RlRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuL1JlcG9zaXRvcnlDb2RlVmFsaWRhdG9ycy5qcyc7XG5cbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnUmVwb3NpdG9yeUNvZGUnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIHJlcG9zaXRvcnlfY29kZTogU3RyaW5nXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNfcmVwb3NpdG9yeV9jb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcHJvcHMuaGFzT3duUHJvcGVydHkoJ3JlcG9zaXRvcnlfY29kZScpICYmXG4gICAgICAgICAgICAgICAgdGhpcy4kcHJvcHMucmVwb3NpdG9yeV9jb2RlICE9PSB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGVcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkLFxuICAgICAgICByZW1vdmUsXG4gICAgICAgIHVwZGF0ZVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJsaVwiLFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInBcIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImNhcHRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLl92KFwiXFxuICAgICAgICByZXBvc2l0b3J5LWNvZGVcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc19yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc19yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiUmVtb3ZlIHJlcG9zaXRvcnktY29kZVwiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgcmVtb3ZlXFxuICAgICAgICBcIildXG4gICAgICAgICAgKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgdGV4dDogXCJUaGUgVVJMIHRvIHRoZSBzb2Z0d2FyZSB2ZXJzaW9uIGluIGEgc291cmNlIGNvZGUgcmVwb3NpdG9yeS5cIixcbiAgICAgICAgICB1cmw6XG4gICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCIhaGFzX3JlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJBZGQgcmVwb3NpdG9yeS1jb2RlXCIgfSxcbiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCByZXBvc2l0b3J5LWNvZGVcXG4gICAgXCIpXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX3JlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBjbGFzczogeyBlcnJvcjogX3ZtLnZhbGlkYXRlLmVycm9yIH0sXG4gICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiIH0sXG4gICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ucmVwb3NpdG9yeV9jb2RlIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0udmFsaWRhdGUuZXJyb3JcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIFwiICsgX3ZtLl9zKF92bS52YWxpZGF0ZS5tc2cpICsgXCJcXG4gICAgXCIpXVxuICAgICAgICAgIClcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi0zMDJmNzVlMFwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1JlcG9zaXRvcnlDb2RlLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9SZXBvc2l0b3J5Q29kZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlcG9zaXRvcnlDb2RlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zMDJmNzVlMFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9SZXBvc2l0b3J5Q29kZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvUmVwb3NpdG9yeUNvZGUudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTMwMmY3NWUwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMzAyZjc1ZTBcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlIChldmVudCkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfTtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUnLCBwYXlsb2FkKTtcbn1cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8bGk+XG4gICAgICAgIDxwXG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfdmVyc2lvblwiXG4gICAgICAgICAgICBjbGFzcz1cImNhcHRpb25cIlxuICAgICAgICA+XG4gICAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdi1zaG93PVwiaGFzX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiUmVtb3ZlIHZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHJlbW92ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvcD5cbiAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfdmVyc2lvblwiXG4gICAgICAgICAgICB0ZXh0PVwiVGhlIHZlcnNpb24gb2YgdGhlIHNvZnR3YXJlLlwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB2LXNob3c9XCIhaGFzX3ZlcnNpb25cIlxuICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICB0aXRsZT1cIkFkZCB2ZXJzaW9uXCJcbiAgICAgICAgICAgIHYtb246Y2xpY2s9XCJhZGRcIlxuICAgICAgICA+XG4gICAgICAgICAgICBBZGQgdmVyc2lvblxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfdmVyc2lvblwiXG4gICAgICAgICAgICB2LWJpbmQ6dmFsdWU9XCJ2ZXJzaW9uXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGUoJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgPHAgY2xhc3M9XCJtZXNzYWdlXCIgLz5cbiAgICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL1ZlcnNpb25FbWl0dGVycy5qcyc7XG5cbmltcG9ydCBIZWxwVGV4dCBmcm9tICcuL0hlbHBUZXh0LnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnVmVyc2lvbicsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBIZWxwVGV4dFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgdmVyc2lvbjogU3RyaW5nXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNfdmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHByb3BzLmhhc093blByb3BlcnR5KCd2ZXJzaW9uJykgJiZcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy52ZXJzaW9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJsaVwiLFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInBcIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX3ZlcnNpb24sXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX3ZlcnNpb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2FwdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgIHZlcnNpb25cXG4gICAgICAgIFwiKSxcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc192ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfdmVyc2lvblwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBhdHRyczogeyB0YWJpbmRleDogXCItMVwiLCB0aXRsZTogXCJSZW1vdmUgdmVyc2lvblwiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwiXFxuICAgICAgICAgICAgcmVtb3ZlXFxuICAgICAgICBcIildXG4gICAgICAgICAgKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfdmVyc2lvbixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX3ZlcnNpb25cIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICB0ZXh0OiBcIlRoZSB2ZXJzaW9uIG9mIHRoZSBzb2Z0d2FyZS5cIixcbiAgICAgICAgICB1cmw6XG4gICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzX3ZlcnNpb24sXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiIWhhc192ZXJzaW9uXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIkFkZCB2ZXJzaW9uXCIgfSxcbiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCB2ZXJzaW9uXFxuICAgIFwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc192ZXJzaW9uLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNfdmVyc2lvblwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnZlcnNpb24gfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBfdm0udXBkYXRlKCRldmVudClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi00Mzc0MGUyMlwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDM3NDBlMjJcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9WZXJzaW9uLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9WZXJzaW9uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVmVyc2lvbi52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNDM3NDBlMjJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOnRydWUsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9WZXJzaW9uLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBcImRhdGEtdi00Mzc0MGUyMlwiXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9WZXJzaW9uLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi00Mzc0MGUyMlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTQzNzQwZTIyXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZSAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlJywgcGF5bG9hZCk7XG59XG4iLCI8dGVtcGxhdGU+XG4gICAgPGxpPlxuICAgICAgICA8cFxuICAgICAgICAgICAgdi1zaG93PVwiaGFzX3RpdGxlXCJcbiAgICAgICAgICAgIGNsYXNzPVwiY2FwdGlvblwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHRpdGxlXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgdi1zaG93PVwiaGFzX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cIlJlbW92ZSB0aXRsZVwiXG4gICAgICAgICAgICAgICAgdi1vbjpjbGljaz1cInJlbW92ZVwiXG4gICAgICAgICAgICA+cmVtb3ZlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9wPlxuICAgICAgICA8SGVscFRleHRcbiAgICAgICAgICAgIHYtc2hvdz1cImhhc190aXRsZVwiXG4gICAgICAgICAgICB0ZXh0PVwiVGhlIG5hbWUgb2YgdGhlIHNvZnR3YXJlIChtYXkgaW5jbHVkZSBhIHNwZWNpZmljIG5hbWUgZm9yIHRoZSBzb2Z0d2FyZSB2ZXJzaW9uKVwiXG4gICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjc29mdHdhcmUtY2l0YXRpb24tbWV0YWRhdGEtcmVxdWlyZWRcIlxuICAgICAgICAvPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB2LXNob3c9XCIhaGFzX3RpdGxlXCJcbiAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICAgICAgdGl0bGU9XCJBZGQgdGl0bGVcIlxuICAgICAgICAgICAgdi1vbjpjbGljaz1cImFkZFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIEFkZCB0aXRsZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB2LXNob3c9XCJoYXNfdGl0bGVcIlxuICAgICAgICAgICAgdi1iaW5kOnZhbHVlPVwidGl0bGVcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZSgkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgIDwvbGk+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHthZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlfSBmcm9tICcuL1RpdGxlRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ1RpdGxlJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEhlbHBUZXh0XG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICB0aXRsZTogU3RyaW5nXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNfdGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwcm9wcy5oYXNPd25Qcm9wZXJ0eSgndGl0bGUnKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuJHByb3BzLnRpdGxlICE9PSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGQsXG4gICAgICAgIHJlbW92ZSxcbiAgICAgICAgdXBkYXRlXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJsaVwiLFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInBcIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzX3RpdGxlLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc190aXRsZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF92bS5fdihcIlxcbiAgICAgICAgdGl0bGVcXG4gICAgICAgIFwiKSxcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc190aXRsZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaGFzX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHRhYmluZGV4OiBcIi0xXCIsIHRpdGxlOiBcIlJlbW92ZSB0aXRsZVwiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbX3ZtLl92KFwicmVtb3ZlXFxuICAgICAgICBcIildXG4gICAgICAgICAgKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiSGVscFRleHRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfdGl0bGUsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc190aXRsZVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIHRleHQ6XG4gICAgICAgICAgICBcIlRoZSBuYW1lIG9mIHRoZSBzb2Z0d2FyZSAobWF5IGluY2x1ZGUgYSBzcGVjaWZpYyBuYW1lIGZvciB0aGUgc29mdHdhcmUgdmVyc2lvbilcIixcbiAgICAgICAgICB1cmw6XG4gICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNzb2Z0d2FyZS1jaXRhdGlvbi1tZXRhZGF0YS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzX3RpdGxlLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiBcIiFoYXNfdGl0bGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgYXR0cnM6IHsgdGFiaW5kZXg6IFwiLTFcIiwgdGl0bGU6IFwiQWRkIHRpdGxlXCIgfSxcbiAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmFkZCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgIEFkZCB0aXRsZVxcbiAgICBcIildXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNfdGl0bGUsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImhhc190aXRsZVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnRpdGxlIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgX3ZtLnVwZGF0ZSgkZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi01MWFiOTIyZlwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTFhYjkyMmZcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9UaXRsZS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVGl0bGUudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UaXRsZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCB7cmVuZGVyIGFzIF9fdnVlX3JlbmRlcl9fLCBzdGF0aWNSZW5kZXJGbnMgYXMgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfX30gZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTFhYjkyMmZcXFwiLFxcXCJoYXNTY29wZWRcXFwiOnRydWUsXFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9UaXRsZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gXCJkYXRhLXYtNTFhYjkyMmZcIlxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvVGl0bGUudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTUxYWI5MjJmXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNTFhYjkyMmZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiPHRlbXBsYXRlPlxuICAgIDx1bCBjbGFzcz1cImNyZWF0aXZlX3dvcmtcIj5cblxuICAgICAgICA8QWJzdHJhY3RcbiAgICAgICAgICAgIHYtYmluZDphYnN0cmFjdD1cImFic3RyYWN0XCJcbiAgICAgICAgICAgIHYtb246YWRkPVwiYWRkX2Fic3RyYWN0XCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlPVwicmVtb3ZlX2Fic3RyYWN0XCJcbiAgICAgICAgICAgIHYtb246dXBkYXRlPVwidXBkYXRlX2Fic3RyYWN0XCJcbiAgICAgICAgLz5cblxuICAgICAgICA8QXV0aG9yc1xuICAgICAgICAgICAgdi1iaW5kOmF1dGhvcnM9XCJhdXRob3JzXCJcbiAgICAgICAgICAgIHYtb246YWRkPVwiYWRkX2F1dGhvclwiXG4gICAgICAgICAgICB2LW9uOmFkZC1hZmZpbGlhdGlvbj1cImFkZF9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICB2LW9uOmFkZC1vcmNpZD1cImFkZF9vcmNpZFwiXG4gICAgICAgICAgICB2LW9uOmFkZC1uYW1lLXBhcnRpY2xlPVwiYWRkX25hbWVfcGFydGljbGVcIlxuICAgICAgICAgICAgdi1vbjphZGQtbmFtZS1zdWZmaXg9XCJhZGRfbmFtZV9zdWZmaXhcIlxuICAgICAgICAgICAgdi1vbjptb3ZlLWRvd249XCJtb3ZlX2F1dGhvcl9kb3duXCJcbiAgICAgICAgICAgIHYtb246bW92ZS11cD1cIm1vdmVfYXV0aG9yX3VwXCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlPVwicmVtb3ZlX2F1dGhvclwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZS1hZmZpbGlhdGlvbj1cInJlbW92ZV9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZS1vcmNpZD1cInJlbW92ZV9vcmNpZFwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZS1uYW1lLXBhcnRpY2xlPVwicmVtb3ZlX25hbWVfcGFydGljbGVcIlxuICAgICAgICAgICAgdi1vbjpyZW1vdmUtbmFtZS1zdWZmaXg9XCJyZW1vdmVfbmFtZV9zdWZmaXhcIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGUtYWZmaWxpYXRpb249XCJ1cGRhdGVfYWZmaWxpYXRpb25cIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGUtZmFtaWx5LW5hbWVzPVwidXBkYXRlX2ZhbWlseV9uYW1lc1wiXG4gICAgICAgICAgICB2LW9uOnVwZGF0ZS1naXZlbi1uYW1lcz1cInVwZGF0ZV9naXZlbl9uYW1lc1wiXG4gICAgICAgICAgICB2LW9uOnVwZGF0ZS1uYW1lLXBhcnRpY2xlPVwidXBkYXRlX25hbWVfcGFydGljbGVcIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGUtbmFtZS1zdWZmaXg9XCJ1cGRhdGVfbmFtZV9zdWZmaXhcIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGUtb3JjaWQ9XCJ1cGRhdGVfb3JjaWRcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxEYXRlUmVsZWFzZWRcbiAgICAgICAgICAgIHYtYmluZDpkYXRlX3JlbGVhc2VkPVwiZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICB2LW9uOmFkZD1cImFkZF9kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlPVwicmVtb3ZlX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGU9XCJ1cGRhdGVfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPERvaVxuICAgICAgICAgICAgdi1iaW5kOmRvaT1cImRvaVwiXG4gICAgICAgICAgICB2LW9uOmFkZD1cImFkZF9kb2lcIlxuICAgICAgICAgICAgdi1vbjpyZW1vdmU9XCJyZW1vdmVfZG9pXCJcbiAgICAgICAgICAgIHYtb246dXBkYXRlPVwidXBkYXRlX2RvaVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPElkZW50aWZpZXJzXG4gICAgICAgICAgICB2LWJpbmQ6aWRlbnRpZmllcnM9XCJpZGVudGlmaWVyc1wiXG4gICAgICAgICAgICB2LW9uOmFkZC1pZGVudGlmaWVyPVwiYWRkX2lkZW50aWZpZXJcIlxuICAgICAgICAgICAgdi1vbjphZGQtaWRlbnRpZmllcnM9XCJhZGRfaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgdi1vbjptb3ZlLWlkZW50aWZpZXItZG93bj1cIm1vdmVfaWRlbnRpZmllcl9kb3duXCJcbiAgICAgICAgICAgIHYtb246bW92ZS1pZGVudGlmaWVyLXVwPVwibW92ZV9pZGVudGlmaWVyX3VwXCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlLWlkZW50aWZpZXI9XCJyZW1vdmVfaWRlbnRpZmllclwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZS1pZGVudGlmaWVycz1cInJlbW92ZV9pZGVudGlmaWVyc1wiXG4gICAgICAgICAgICB2LW9uOnVwZGF0ZS1pZGVudGlmaWVyLXR5cGU9XCJ1cGRhdGVfaWRlbnRpZmllcl90eXBlXCJcbiAgICAgICAgICAgIHYtb246dXBkYXRlLWlkZW50aWZpZXItdmFsdWU9XCJ1cGRhdGVfaWRlbnRpZmllcl92YWx1ZVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPEtleXdvcmRzXG4gICAgICAgICAgICB2LWJpbmQ6a2V5d29yZHM9XCJrZXl3b3Jkc1wiXG4gICAgICAgICAgICB2LW9uOmFkZC1rZXl3b3JkPVwiYWRkX2tleXdvcmRcIlxuICAgICAgICAgICAgdi1vbjphZGQta2V5d29yZHM9XCJhZGRfa2V5d29yZHNcIlxuICAgICAgICAgICAgdi1vbjptb3ZlLWtleXdvcmQtZG93bj1cIm1vdmVfa2V5d29yZF9kb3duXCJcbiAgICAgICAgICAgIHYtb246bW92ZS1rZXl3b3JkLXVwPVwibW92ZV9rZXl3b3JkX3VwXCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlLWtleXdvcmQ9XCJyZW1vdmVfa2V5d29yZFwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZS1rZXl3b3Jkcz1cInJlbW92ZV9rZXl3b3Jkc1wiXG4gICAgICAgICAgICB2LW9uOnVwZGF0ZS1rZXl3b3JkPVwidXBkYXRlX2tleXdvcmRcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxMaWNlbnNlXG4gICAgICAgICAgICB2LWJpbmQ6bGljZW5zZT1cImxpY2Vuc2VcIlxuICAgICAgICAgICAgdi1vbjphZGQ9XCJhZGRfbGljZW5zZVwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZT1cInJlbW92ZV9saWNlbnNlXCJcbiAgICAgICAgICAgIHYtb246dXBkYXRlPVwidXBkYXRlX2xpY2Vuc2VcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxSZXBvc2l0b3J5Q29kZVxuICAgICAgICAgICAgdi1iaW5kOnJlcG9zaXRvcnlfY29kZT1cInJlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICB2LW9uOmFkZD1cImFkZF9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgdi1vbjpyZW1vdmU9XCJyZW1vdmVfcmVwb3NpdG9yeV9jb2RlXCJcbiAgICAgICAgICAgIHYtb246dXBkYXRlPVwidXBkYXRlX3JlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPFRpdGxlXG4gICAgICAgICAgICB2LWJpbmQ6dGl0bGU9XCJ0aXRsZVwiXG4gICAgICAgICAgICB2LW9uOmFkZD1cImFkZF90aXRsZVwiXG4gICAgICAgICAgICB2LW9uOnJlbW92ZT1cInJlbW92ZV90aXRsZVwiXG4gICAgICAgICAgICB2LW9uOnVwZGF0ZT1cInVwZGF0ZV90aXRsZVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPFZlcnNpb25cbiAgICAgICAgICAgIHYtYmluZDp2ZXJzaW9uPVwidmVyc2lvblwiXG4gICAgICAgICAgICB2LW9uOmFkZD1cImFkZF92ZXJzaW9uXCJcbiAgICAgICAgICAgIHYtb246cmVtb3ZlPVwicmVtb3ZlX3ZlcnNpb25cIlxuICAgICAgICAgICAgdi1vbjp1cGRhdGU9XCJ1cGRhdGVfdmVyc2lvblwiXG4gICAgICAgIC8+XG5cbiAgICA8L3VsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7YWRkX2Fic3RyYWN0LFxuICAgICAgICBhZGRfYWZmaWxpYXRpb24sXG4gICAgICAgIGFkZF9hdXRob3IsXG4gICAgICAgIGFkZF9kYXRlX3JlbGVhc2VkLFxuICAgICAgICBhZGRfZG9pLFxuICAgICAgICBhZGRfaWRlbnRpZmllcixcbiAgICAgICAgYWRkX2lkZW50aWZpZXJzLFxuICAgICAgICBhZGRfa2V5d29yZCxcbiAgICAgICAgYWRkX2tleXdvcmRzLFxuICAgICAgICBhZGRfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxuICAgICAgICBhZGRfbGljZW5zZSxcbiAgICAgICAgYWRkX29yY2lkLFxuICAgICAgICBhZGRfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICBhZGRfdGl0bGUsXG4gICAgICAgIGFkZF92ZXJzaW9uLFxuICAgICAgICBtb3ZlX2F1dGhvcl9kb3duLFxuICAgICAgICBtb3ZlX2F1dGhvcl91cCxcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgbW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgIG1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgcmVtb3ZlX2Fic3RyYWN0LFxuICAgICAgICByZW1vdmVfYWZmaWxpYXRpb24sXG4gICAgICAgIHJlbW92ZV9hdXRob3IsXG4gICAgICAgIHJlbW92ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICByZW1vdmVfZG9pLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxuICAgICAgICByZW1vdmVfa2V5d29yZCxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmRzLFxuICAgICAgICByZW1vdmVfbGljZW5zZSxcbiAgICAgICAgcmVtb3ZlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgcmVtb3ZlX29yY2lkLFxuICAgICAgICByZW1vdmVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICByZW1vdmVfdGl0bGUsXG4gICAgICAgIHJlbW92ZV92ZXJzaW9uLFxuICAgICAgICB1cGRhdGVfYWJzdHJhY3QsXG4gICAgICAgIHVwZGF0ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgdXBkYXRlX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIHVwZGF0ZV9kb2ksXG4gICAgICAgIHVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUsXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkLFxuICAgICAgICB1cGRhdGVfbGljZW5zZSxcbiAgICAgICAgdXBkYXRlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgdXBkYXRlX29yY2lkLFxuICAgICAgICB1cGRhdGVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICB1cGRhdGVfdGl0bGUsXG4gICAgICAgIHVwZGF0ZV92ZXJzaW9ufSBmcm9tICcuL0NyZWF0aXZlV29ya0VtaXR0ZXJzLmpzJztcblxuaW1wb3J0IEF1dGhvcnMgZnJvbSAnLi9BdXRob3JzLnZ1ZSc7XG5pbXBvcnQgQWJzdHJhY3QgZnJvbSAnLi9BYnN0cmFjdC52dWUnO1xuaW1wb3J0IERhdGVSZWxlYXNlZCBmcm9tICcuL0RhdGVSZWxlYXNlZC52dWUnO1xuaW1wb3J0IERvaSBmcm9tICcuL0RvaS52dWUnO1xuaW1wb3J0IElkZW50aWZpZXJzIGZyb20gJy4vSWRlbnRpZmllcnMudnVlJztcbmltcG9ydCBLZXl3b3JkcyBmcm9tICcuL0tleXdvcmRzLnZ1ZSc7XG5pbXBvcnQgTGljZW5zZSBmcm9tICcuL0xpY2Vuc2UudnVlJztcbmltcG9ydCBSZXBvc2l0b3J5Q29kZSBmcm9tICcuL1JlcG9zaXRvcnlDb2RlJztcbmltcG9ydCBWZXJzaW9uIGZyb20gJy4vVmVyc2lvbi52dWUnO1xuaW1wb3J0IFRpdGxlIGZyb20gJy4vVGl0bGUudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdDcmVhdGl2ZVdvcmsnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQWJzdHJhY3QsXG4gICAgICAgIEF1dGhvcnMsXG4gICAgICAgIERhdGVSZWxlYXNlZCxcbiAgICAgICAgRG9pLFxuICAgICAgICBJZGVudGlmaWVycyxcbiAgICAgICAgS2V5d29yZHMsXG4gICAgICAgIExpY2Vuc2UsXG4gICAgICAgIFJlcG9zaXRvcnlDb2RlLFxuICAgICAgICBUaXRsZSxcbiAgICAgICAgVmVyc2lvblxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgYWJzdHJhY3Q6IFN0cmluZyxcbiAgICAgICAgYXV0aG9yX2lkOiBOdW1iZXIsXG4gICAgICAgIGF1dGhvcnM6IEFycmF5LFxuICAgICAgICBkYXRlX3JlbGVhc2VkOiBTdHJpbmcsXG4gICAgICAgIGRvaTogU3RyaW5nLFxuICAgICAgICBpZGVudGlmaWVyX2lkOiBOdW1iZXIsXG4gICAgICAgIGlkZW50aWZpZXJzOiBBcnJheSxcbiAgICAgICAga2V5d29yZF9pZDogTnVtYmVyLFxuICAgICAgICBrZXl3b3JkczogQXJyYXksXG4gICAgICAgIGxpY2Vuc2U6IFN0cmluZyxcbiAgICAgICAgcmVwb3NpdG9yeV9jb2RlOiBTdHJpbmcsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgICAgIHZlcnNpb246IFN0cmluZ1xuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkX2Fic3RyYWN0LFxuICAgICAgICBhZGRfYWZmaWxpYXRpb24sXG4gICAgICAgIGFkZF9hdXRob3IsXG4gICAgICAgIGFkZF9kYXRlX3JlbGVhc2VkLFxuICAgICAgICBhZGRfZG9pLFxuICAgICAgICBhZGRfaWRlbnRpZmllcixcbiAgICAgICAgYWRkX2lkZW50aWZpZXJzLFxuICAgICAgICBhZGRfa2V5d29yZCxcbiAgICAgICAgYWRkX2tleXdvcmRzLFxuICAgICAgICBhZGRfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxuICAgICAgICBhZGRfb3JjaWQsXG4gICAgICAgIGFkZF9saWNlbnNlLFxuICAgICAgICBhZGRfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICBhZGRfdGl0bGUsXG4gICAgICAgIGFkZF92ZXJzaW9uLFxuICAgICAgICBtb3ZlX2F1dGhvcl9kb3duLFxuICAgICAgICBtb3ZlX2F1dGhvcl91cCxcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgbW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgIG1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgcmVtb3ZlX2Fic3RyYWN0LFxuICAgICAgICByZW1vdmVfYWZmaWxpYXRpb24sXG4gICAgICAgIHJlbW92ZV9hdXRob3IsXG4gICAgICAgIHJlbW92ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICByZW1vdmVfZG9pLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxuICAgICAgICByZW1vdmVfa2V5d29yZCxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmRzLFxuICAgICAgICByZW1vdmVfbGljZW5zZSxcbiAgICAgICAgcmVtb3ZlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgcmVtb3ZlX29yY2lkLFxuICAgICAgICByZW1vdmVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICByZW1vdmVfdGl0bGUsXG4gICAgICAgIHJlbW92ZV92ZXJzaW9uLFxuICAgICAgICB1cGRhdGVfYWJzdHJhY3QsXG4gICAgICAgIHVwZGF0ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgdXBkYXRlX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIHVwZGF0ZV9kb2ksXG4gICAgICAgIHVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUsXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkLFxuICAgICAgICB1cGRhdGVfbGljZW5zZSxcbiAgICAgICAgdXBkYXRlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgdXBkYXRlX29yY2lkLFxuICAgICAgICB1cGRhdGVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICB1cGRhdGVfdGl0bGUsXG4gICAgICAgIHVwZGF0ZV92ZXJzaW9uXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmNyZWF0aXZlX3dvcmsge1xuICAgIHBhZGRpbmctbGVmdDowcHg7XG59XG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcInVsXCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJjcmVhdGl2ZV93b3JrXCIgfSxcbiAgICBbXG4gICAgICBfYyhcIkFic3RyYWN0XCIsIHtcbiAgICAgICAgYXR0cnM6IHsgYWJzdHJhY3Q6IF92bS5hYnN0cmFjdCB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGFkZDogX3ZtLmFkZF9hYnN0cmFjdCxcbiAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmVfYWJzdHJhY3QsXG4gICAgICAgICAgdXBkYXRlOiBfdm0udXBkYXRlX2Fic3RyYWN0XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiQXV0aG9yc1wiLCB7XG4gICAgICAgIGF0dHJzOiB7IGF1dGhvcnM6IF92bS5hdXRob3JzIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgYWRkOiBfdm0uYWRkX2F1dGhvcixcbiAgICAgICAgICBcImFkZC1hZmZpbGlhdGlvblwiOiBfdm0uYWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICAgIFwiYWRkLW9yY2lkXCI6IF92bS5hZGRfb3JjaWQsXG4gICAgICAgICAgXCJhZGQtbmFtZS1wYXJ0aWNsZVwiOiBfdm0uYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgICAgXCJhZGQtbmFtZS1zdWZmaXhcIjogX3ZtLmFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgICBcIm1vdmUtZG93blwiOiBfdm0ubW92ZV9hdXRob3JfZG93bixcbiAgICAgICAgICBcIm1vdmUtdXBcIjogX3ZtLm1vdmVfYXV0aG9yX3VwLFxuICAgICAgICAgIHJlbW92ZTogX3ZtLnJlbW92ZV9hdXRob3IsXG4gICAgICAgICAgXCJyZW1vdmUtYWZmaWxpYXRpb25cIjogX3ZtLnJlbW92ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgICBcInJlbW92ZS1vcmNpZFwiOiBfdm0ucmVtb3ZlX29yY2lkLFxuICAgICAgICAgIFwicmVtb3ZlLW5hbWUtcGFydGljbGVcIjogX3ZtLnJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgIFwicmVtb3ZlLW5hbWUtc3VmZml4XCI6IF92bS5yZW1vdmVfbmFtZV9zdWZmaXgsXG4gICAgICAgICAgXCJ1cGRhdGUtYWZmaWxpYXRpb25cIjogX3ZtLnVwZGF0ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgICBcInVwZGF0ZS1mYW1pbHktbmFtZXNcIjogX3ZtLnVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgICAgXCJ1cGRhdGUtZ2l2ZW4tbmFtZXNcIjogX3ZtLnVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgICBcInVwZGF0ZS1uYW1lLXBhcnRpY2xlXCI6IF92bS51cGRhdGVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgICBcInVwZGF0ZS1uYW1lLXN1ZmZpeFwiOiBfdm0udXBkYXRlX25hbWVfc3VmZml4LFxuICAgICAgICAgIFwidXBkYXRlLW9yY2lkXCI6IF92bS51cGRhdGVfb3JjaWRcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJEYXRlUmVsZWFzZWRcIiwge1xuICAgICAgICBhdHRyczogeyBkYXRlX3JlbGVhc2VkOiBfdm0uZGF0ZV9yZWxlYXNlZCB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGFkZDogX3ZtLmFkZF9kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgIHJlbW92ZTogX3ZtLnJlbW92ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgIHVwZGF0ZTogX3ZtLnVwZGF0ZV9kYXRlX3JlbGVhc2VkXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiRG9pXCIsIHtcbiAgICAgICAgYXR0cnM6IHsgZG9pOiBfdm0uZG9pIH0sXG4gICAgICAgIG9uOiB7IGFkZDogX3ZtLmFkZF9kb2ksIHJlbW92ZTogX3ZtLnJlbW92ZV9kb2ksIHVwZGF0ZTogX3ZtLnVwZGF0ZV9kb2kgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJJZGVudGlmaWVyc1wiLCB7XG4gICAgICAgIGF0dHJzOiB7IGlkZW50aWZpZXJzOiBfdm0uaWRlbnRpZmllcnMgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBcImFkZC1pZGVudGlmaWVyXCI6IF92bS5hZGRfaWRlbnRpZmllcixcbiAgICAgICAgICBcImFkZC1pZGVudGlmaWVyc1wiOiBfdm0uYWRkX2lkZW50aWZpZXJzLFxuICAgICAgICAgIFwibW92ZS1pZGVudGlmaWVyLWRvd25cIjogX3ZtLm1vdmVfaWRlbnRpZmllcl9kb3duLFxuICAgICAgICAgIFwibW92ZS1pZGVudGlmaWVyLXVwXCI6IF92bS5tb3ZlX2lkZW50aWZpZXJfdXAsXG4gICAgICAgICAgXCJyZW1vdmUtaWRlbnRpZmllclwiOiBfdm0ucmVtb3ZlX2lkZW50aWZpZXIsXG4gICAgICAgICAgXCJyZW1vdmUtaWRlbnRpZmllcnNcIjogX3ZtLnJlbW92ZV9pZGVudGlmaWVycyxcbiAgICAgICAgICBcInVwZGF0ZS1pZGVudGlmaWVyLXR5cGVcIjogX3ZtLnVwZGF0ZV9pZGVudGlmaWVyX3R5cGUsXG4gICAgICAgICAgXCJ1cGRhdGUtaWRlbnRpZmllci12YWx1ZVwiOiBfdm0udXBkYXRlX2lkZW50aWZpZXJfdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJLZXl3b3Jkc1wiLCB7XG4gICAgICAgIGF0dHJzOiB7IGtleXdvcmRzOiBfdm0ua2V5d29yZHMgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBcImFkZC1rZXl3b3JkXCI6IF92bS5hZGRfa2V5d29yZCxcbiAgICAgICAgICBcImFkZC1rZXl3b3Jkc1wiOiBfdm0uYWRkX2tleXdvcmRzLFxuICAgICAgICAgIFwibW92ZS1rZXl3b3JkLWRvd25cIjogX3ZtLm1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICAgIFwibW92ZS1rZXl3b3JkLXVwXCI6IF92bS5tb3ZlX2tleXdvcmRfdXAsXG4gICAgICAgICAgXCJyZW1vdmUta2V5d29yZFwiOiBfdm0ucmVtb3ZlX2tleXdvcmQsXG4gICAgICAgICAgXCJyZW1vdmUta2V5d29yZHNcIjogX3ZtLnJlbW92ZV9rZXl3b3JkcyxcbiAgICAgICAgICBcInVwZGF0ZS1rZXl3b3JkXCI6IF92bS51cGRhdGVfa2V5d29yZFxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkxpY2Vuc2VcIiwge1xuICAgICAgICBhdHRyczogeyBsaWNlbnNlOiBfdm0ubGljZW5zZSB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGFkZDogX3ZtLmFkZF9saWNlbnNlLFxuICAgICAgICAgIHJlbW92ZTogX3ZtLnJlbW92ZV9saWNlbnNlLFxuICAgICAgICAgIHVwZGF0ZTogX3ZtLnVwZGF0ZV9saWNlbnNlXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiUmVwb3NpdG9yeUNvZGVcIiwge1xuICAgICAgICBhdHRyczogeyByZXBvc2l0b3J5X2NvZGU6IF92bS5yZXBvc2l0b3J5X2NvZGUgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBhZGQ6IF92bS5hZGRfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICAgIHJlbW92ZTogX3ZtLnJlbW92ZV9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgICAgdXBkYXRlOiBfdm0udXBkYXRlX3JlcG9zaXRvcnlfY29kZVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIlRpdGxlXCIsIHtcbiAgICAgICAgYXR0cnM6IHsgdGl0bGU6IF92bS50aXRsZSB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGFkZDogX3ZtLmFkZF90aXRsZSxcbiAgICAgICAgICByZW1vdmU6IF92bS5yZW1vdmVfdGl0bGUsXG4gICAgICAgICAgdXBkYXRlOiBfdm0udXBkYXRlX3RpdGxlXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiVmVyc2lvblwiLCB7XG4gICAgICAgIGF0dHJzOiB7IHZlcnNpb246IF92bS52ZXJzaW9uIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgYWRkOiBfdm0uYWRkX3ZlcnNpb24sXG4gICAgICAgICAgcmVtb3ZlOiBfdm0ucmVtb3ZlX3ZlcnNpb24sXG4gICAgICAgICAgdXBkYXRlOiBfdm0udXBkYXRlX3ZlcnNpb25cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtNDIyNzdmZDlcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTQyMjc3ZmQ5XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQ3JlYXRpdmVXb3JrLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9DcmVhdGl2ZVdvcmsudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9DcmVhdGl2ZVdvcmsudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQyMjc3ZmQ5XFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQ3JlYXRpdmVXb3JrLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBcImRhdGEtdi00MjI3N2ZkOVwiXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9DcmVhdGl2ZVdvcmsudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTQyMjc3ZmQ5XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNDIyNzdmZDlcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFkZF9hYnN0cmFjdCAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWFic3RyYWN0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfYWZmaWxpYXRpb24gKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtYWZmaWxpYXRpb24nLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9hdXRob3IgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1hdXRob3InKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9kYXRlX3JlbGVhc2VkICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtZGF0ZS1yZWxlYXNlZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2RvaSAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLWRvaScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2lkZW50aWZpZXIgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1pZGVudGlmaWVyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfaWRlbnRpZmllcnMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1pZGVudGlmaWVycycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2tleXdvcmQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1rZXl3b3JkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfa2V5d29yZHMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1rZXl3b3JkcycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX2xpY2Vuc2UgKCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1saWNlbnNlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbmFtZV9wYXJ0aWNsZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1uYW1lLXBhcnRpY2xlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbmFtZV9zdWZmaXggKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtbmFtZS1zdWZmaXgnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF9vcmNpZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ2FkZC1vcmNpZCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX3JlcG9zaXRvcnlfY29kZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgnYWRkLXJlcG9zaXRvcnktY29kZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkX3RpdGxlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtdGl0bGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZF92ZXJzaW9uICgpIHtcbiAgICB0aGlzLiRlbWl0KCdhZGQtdmVyc2lvbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9hdXRob3JfZG93biAoYXV0aG9yX2lkKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1hdXRob3ItZG93bicsIGF1dGhvcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2F1dGhvcl91cCAoYXV0aG9yX2lkKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1hdXRob3ItdXAnLCBhdXRob3JfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9pZGVudGlmaWVyX2Rvd24gKGlkZW50aWZpZXJfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWlkZW50aWZpZXItZG93bicsIGlkZW50aWZpZXJfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZV9pZGVudGlmaWVyX3VwIChpZGVudGlmaWVyX2lkKSB7XG4gICAgdGhpcy4kZW1pdCgnbW92ZS1pZGVudGlmaWVyLXVwJywgaWRlbnRpZmllcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2tleXdvcmRfZG93biAoa2V5d29yZF9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ21vdmUta2V5d29yZC1kb3duJywga2V5d29yZF9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlX2tleXdvcmRfdXAgKGtleXdvcmRfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdtb3ZlLWtleXdvcmQtdXAnLCBrZXl3b3JkX2lkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9hYnN0cmFjdCAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLWFic3RyYWN0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfYWZmaWxpYXRpb24gKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtYWZmaWxpYXRpb24nLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9hdXRob3IgKGF1dGhvcl9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1hdXRob3InLCBhdXRob3JfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2RhdGVfcmVsZWFzZWQgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1kYXRlLXJlbGVhc2VkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfZG9pICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtZG9pJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllciAoaWRlbnRpZmllcl9pZCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVyJywgaWRlbnRpZmllcl9pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfaWRlbnRpZmllcnMgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1pZGVudGlmaWVycycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2tleXdvcmQgKGtleXdvcmRfaWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUta2V5d29yZCcsIGtleXdvcmRfaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX2tleXdvcmRzICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUta2V5d29yZHMnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9saWNlbnNlICgpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtbGljZW5zZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX25hbWVfcGFydGljbGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtbmFtZS1wYXJ0aWNsZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX25hbWVfc3VmZml4IChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLW5hbWUtc3VmZml4JywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfb3JjaWQgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCdyZW1vdmUtb3JjaWQnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV9yZXBvc2l0b3J5X2NvZGUgKCkge1xuICAgIHRoaXMuJGVtaXQoJ3JlbW92ZS1yZXBvc2l0b3J5LWNvZGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZV90aXRsZSAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLXRpdGxlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVfdmVyc2lvbiAoKSB7XG4gICAgdGhpcy4kZW1pdCgncmVtb3ZlLXZlcnNpb24nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9hYnN0cmFjdCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1hYnN0cmFjdCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2dpdmVuX25hbWVzIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWdpdmVuLW5hbWVzJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfaWRlbnRpZmllcl90eXBlIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWlkZW50aWZpZXItdHlwZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtaWRlbnRpZmllci12YWx1ZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX25hbWVfcGFydGljbGUgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtbmFtZS1wYXJ0aWNsZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2ZhbWlseV9uYW1lcyAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1mYW1pbHktbmFtZXMnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9uYW1lX3N1ZmZpeCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1uYW1lLXN1ZmZpeCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX29yY2lkIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLW9yY2lkJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfYWZmaWxpYXRpb24gKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtYWZmaWxpYXRpb24nLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9jZmZfdmVyc2lvbiAoZXZlbnQpIHtcbiAgICBsZXQgcGF5bG9hZCA9IHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH07XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWNmZi12ZXJzaW9uJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZGF0ZV9yZWxlYXNlZCAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1kYXRlLXJlbGVhc2VkJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfZG9pIChwYXlsb2FkKSB7XG4gICAgdGhpcy4kZW1pdCgndXBkYXRlLWRvaScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2tleXdvcmQgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUta2V5d29yZCcsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX2xpY2Vuc2UgKHBheWxvYWQpIHtcbiAgICB0aGlzLiRlbWl0KCd1cGRhdGUtbGljZW5zZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3JlcG9zaXRvcnlfY29kZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1yZXBvc2l0b3J5LWNvZGUnLCBwYXlsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV90aXRsZSAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS10aXRsZScsIHBheWxvYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX21lc3NhZ2UgKGV2ZW50KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS1tZXNzYWdlJywgcGF5bG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfdmVyc2lvbiAocGF5bG9hZCkge1xuICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZS12ZXJzaW9uJywgcGF5bG9hZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfY2ZmX3ZlcnNpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiB0aGlzLmNmZl92ZXJzaW9uICE9PSAnMS4xLjAnLFxuICAgICAgICBtc2c6IFwiT25seSBDRkYgdmVyc2lvbiAxLjEuMCBpcyBzdXBwb3J0ZWQgYXQgdGhlIG1vbWVudC5cIlxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX21lc3NhZ2UgKCkge1xuICAgIGxldCBtaW5fbGVuZ3RoID0gMzA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHRoaXMubWVzc2FnZS5sZW5ndGggPCBtaW5fbGVuZ3RoLFxuICAgICAgICBtc2c6IFwiWW91IG11c3QgaW5jbHVkZSBhIHN1ZmZpY2llbnRseSBsb25nIG1lc3NhZ2UuXCJcbiAgICB9XG59XG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImZvcm1cIj5cbiAgICAgICAgPCEtLSA8aDE+UmVxdWlyZWQgcHJvcGVydGllczwvaDE+IC0tPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIGNmZi12ZXJzaW9uXG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxIZWxwVGV4dFxuICAgICAgICAgICAgICAgICAgICB0ZXh0PVwiVGhlIGV4YWN0IHZlcnNpb24gb2YgdGhlIENpdGF0aW9uIEZpbGUgRm9ybWF0IHRoYXQgaXMgdXNlZCBmb3IgdGhlIGZpbGUuXCJcbiAgICAgICAgICAgICAgICAgICAgdXJsPVwiaHR0cHM6Ly9naXRodWIuY29tL2NpdGF0aW9uLWZpbGUtZm9ybWF0L2NpdGF0aW9uLWZpbGUtZm9ybWF0L2Jsb2IvMS4xLjAvUkVBRE1FLm1kI2NmZi12ZXJzaW9uLXJlcXVpcmVkXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJ7ZXJyb3I6IGNmZl92ZXJzaW9uX3ZhbGlkYXRpb24uZXJyb3IgfVwiXG4gICAgICAgICAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cImNmZl92ZXJzaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIxLjAuM1wiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgdi1vbjppbnB1dD1cInVwZGF0ZV9jZmZfdmVyc2lvbigkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cImNmZl92ZXJzaW9uX3ZhbGlkYXRpb24uZXJyb3JcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3sgY2ZmX3ZlcnNpb25fdmFsaWRhdGlvbi5tc2cgfX1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L2xpPlxuXG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPEhlbHBUZXh0XG4gICAgICAgICAgICAgICAgICAgIHRleHQ9XCJTcGVjaWZ5IGluc3RydWN0aW9ucyB0byB1c2VycyBvbiBob3cgdG8gY2l0ZSB0aGUgc29mdHdhcmUgdGhlIENJVEFUSU9OLmNmZiBmaWxlIGlzIGFzc29jaWF0ZWQgd2l0aC5cIlxuICAgICAgICAgICAgICAgICAgICB1cmw9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjbWVzc2FnZS1yZXF1aXJlZFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwie2Vycm9yOiBtZXNzYWdlX3ZhbGlkYXRpb24uZXJyb3IgfVwiXG4gICAgICAgICAgICAgICAgICAgIHYtYmluZDp2YWx1ZT1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1zZ1wiXG4gICAgICAgICAgICAgICAgICAgIHYtb246aW5wdXQ9XCJ1cGRhdGVfbWVzc2FnZSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwXG4gICAgICAgICAgICAgICAgICAgIHYtaWY9XCJtZXNzYWdlX3ZhbGlkYXRpb24uZXJyb3JcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3sgbWVzc2FnZV92YWxpZGF0aW9uLm1zZyB9fVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgIDxDcmVhdGl2ZVdvcmtcbiAgICAgICAgICAgICAgICB2LWJpbmQ6YWJzdHJhY3Q9XCJhYnN0cmFjdFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmF1dGhvcl9pZD1cImF1dGhvcl9pZFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmF1dGhvcnM9XCJhdXRob3JzXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6ZGF0ZV9yZWxlYXNlZD1cImRhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtYmluZDpkb2k9XCJkb2lcIlxuICAgICAgICAgICAgICAgIHYtYmluZDppZGVudGlmaWVyX2lkPVwiaWRlbnRpZmllcl9pZFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmlkZW50aWZpZXJzPVwiaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtYmluZDprZXl3b3JkX2lkPVwia2V5d29yZF9pZFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmtleXdvcmRzPVwia2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtYmluZDpsaWNlbnNlPVwibGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOnJlcG9zaXRvcnlfY29kZT1cInJlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOnRpdGxlPVwidGl0bGVcIlxuICAgICAgICAgICAgICAgIHYtYmluZDp2ZXJzaW9uPVwidmVyc2lvblwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtYWJzdHJhY3Q9XCJhZGRfYWJzdHJhY3RcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWFmZmlsaWF0aW9uPVwiYWRkX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1hdXRob3I9XCJhZGRfYXV0aG9yXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1kYXRlLXJlbGVhc2VkPVwiYWRkX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWRvaT1cImFkZF9kb2lcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWlkZW50aWZpZXI9XCJhZGRfaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtaWRlbnRpZmllcnM9XCJhZGRfaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWtleXdvcmQ9XCJhZGRfa2V5d29yZFwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQta2V5d29yZHM9XCJhZGRfa2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWxpY2Vuc2U9XCJhZGRfbGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtbmFtZS1wYXJ0aWNsZT1cImFkZF9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1uYW1lLXN1ZmZpeD1cImFkZF9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtb3JjaWQ9XCJhZGRfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLXJlcG9zaXRvcnktY29kZT1cImFkZF9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLXRpdGxlPVwiYWRkX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC12ZXJzaW9uPVwiYWRkX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1hdXRob3ItZG93bj1cIm1vdmVfYXV0aG9yX2Rvd25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1hdXRob3ItdXA9XCJtb3ZlX2F1dGhvcl91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWlkZW50aWZpZXItZG93bj1cIm1vdmVfaWRlbnRpZmllcl9kb3duXCJcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUtaWRlbnRpZmllci11cD1cIm1vdmVfaWRlbnRpZmllcl91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWtleXdvcmQtZG93bj1cIm1vdmVfa2V5d29yZF9kb3duXCJcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUta2V5d29yZC11cD1cIm1vdmVfa2V5d29yZF91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtYWJzdHJhY3Q9XCJyZW1vdmVfYWJzdHJhY3RcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWFmZmlsaWF0aW9uPVwicmVtb3ZlX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1hdXRob3I9XCJyZW1vdmVfYXV0aG9yXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1kYXRlLXJlbGVhc2VkPVwicmVtb3ZlX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWRvaT1cInJlbW92ZV9kb2lcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWlkZW50aWZpZXI9XCJyZW1vdmVfaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtaWRlbnRpZmllcnM9XCJyZW1vdmVfaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWtleXdvcmQ9XCJyZW1vdmVfa2V5d29yZFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUta2V5d29yZHM9XCJyZW1vdmVfa2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWxpY2Vuc2U9XCJyZW1vdmVfbGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtbmFtZS1wYXJ0aWNsZT1cInJlbW92ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1uYW1lLXN1ZmZpeD1cInJlbW92ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtb3JjaWQ9XCJyZW1vdmVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLXJlcG9zaXRvcnktY29kZT1cInJlbW92ZV9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLXRpdGxlPVwicmVtb3ZlX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS12ZXJzaW9uPVwicmVtb3ZlX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWFic3RyYWN0PVwidXBkYXRlX2Fic3RyYWN0XCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1hZmZpbGlhdGlvbj1cInVwZGF0ZV9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtZGF0ZS1yZWxlYXNlZD1cInVwZGF0ZV9kYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1kb2k9XCJ1cGRhdGVfZG9pXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1mYW1pbHktbmFtZXM9XCJ1cGRhdGVfZmFtaWx5X25hbWVzXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1naXZlbi1uYW1lcz1cInVwZGF0ZV9naXZlbl9uYW1lc1wiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtaWRlbnRpZmllci10eXBlPVwidXBkYXRlX2lkZW50aWZpZXJfdHlwZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtaWRlbnRpZmllci12YWx1ZT1cInVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1rZXl3b3JkPVwidXBkYXRlX2tleXdvcmRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWxpY2Vuc2U9XCJ1cGRhdGVfbGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtbmFtZS1wYXJ0aWNsZT1cInVwZGF0ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1uYW1lLXN1ZmZpeD1cInVwZGF0ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtb3JjaWQ9XCJ1cGRhdGVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLXJlcG9zaXRvcnktY29kZT1cInVwZGF0ZV9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLXRpdGxlPVwidXBkYXRlX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS12ZXJzaW9uPVwidXBkYXRlX3ZlcnNpb25cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC91bD5cbjwhLS1cbiAgICAgICAgPGgxPk9wdGlvbmFsIHByb3BlcnRpZXM8L2gxPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZXMgKFRPRE8pXG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAtLT5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQ3JlYXRpdmVXb3JrIGZyb20gJy4vQ3JlYXRpdmVXb3JrLnZ1ZSc7XG5pbXBvcnQgSGVscFRleHQgZnJvbSAnLi9IZWxwVGV4dC52dWUnO1xuXG5pbXBvcnQge2FkZF9hYnN0cmFjdCxcbiAgICAgICAgYWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICBhZGRfYXV0aG9yLFxuICAgICAgICBhZGRfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgYWRkX2RvaSxcbiAgICAgICAgYWRkX2lkZW50aWZpZXIsXG4gICAgICAgIGFkZF9pZGVudGlmaWVycyxcbiAgICAgICAgYWRkX2tleXdvcmQsXG4gICAgICAgIGFkZF9rZXl3b3JkcyxcbiAgICAgICAgYWRkX2xpY2Vuc2UsXG4gICAgICAgIGFkZF9uYW1lX3BhcnRpY2xlLFxuICAgICAgICBhZGRfbmFtZV9zdWZmaXgsXG4gICAgICAgIGFkZF9vcmNpZCxcbiAgICAgICAgYWRkX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgYWRkX3RpdGxlLFxuICAgICAgICBhZGRfdmVyc2lvbixcbiAgICAgICAgbW92ZV9hdXRob3JfZG93bixcbiAgICAgICAgbW92ZV9hdXRob3JfdXAsXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl9kb3duLFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfdXAsXG4gICAgICAgIG1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICBtb3ZlX2tleXdvcmRfdXAsXG4gICAgICAgIHJlbW92ZV9hYnN0cmFjdCxcbiAgICAgICAgcmVtb3ZlX2FmZmlsaWF0aW9uLFxuICAgICAgICByZW1vdmVfYXV0aG9yLFxuICAgICAgICByZW1vdmVfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXIsXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVycyxcbiAgICAgICAgcmVtb3ZlX2RvaSxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmQsXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkcyxcbiAgICAgICAgcmVtb3ZlX2xpY2Vuc2UsXG4gICAgICAgIHJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICByZW1vdmVfbmFtZV9zdWZmaXgsXG4gICAgICAgIHJlbW92ZV9vcmNpZCxcbiAgICAgICAgcmVtb3ZlX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgcmVtb3ZlX3RpdGxlLFxuICAgICAgICByZW1vdmVfdmVyc2lvbixcbiAgICAgICAgdXBkYXRlX2Fic3RyYWN0LFxuICAgICAgICB1cGRhdGVfYWZmaWxpYXRpb24sXG4gICAgICAgIHVwZGF0ZV9jZmZfdmVyc2lvbixcbiAgICAgICAgdXBkYXRlX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlLFxuICAgICAgICB1cGRhdGVfZG9pLFxuICAgICAgICB1cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICB1cGRhdGVfZ2l2ZW5fbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9rZXl3b3JkLFxuICAgICAgICB1cGRhdGVfbGljZW5zZSxcbiAgICAgICAgdXBkYXRlX21lc3NhZ2UsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICB1cGRhdGVfbmFtZV9zdWZmaXgsXG4gICAgICAgIHVwZGF0ZV9vcmNpZCxcbiAgICAgICAgdXBkYXRlX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgdXBkYXRlX3RpdGxlLFxuICAgICAgICB1cGRhdGVfdmVyc2lvbn0gZnJvbSAnLi9Gb3JtRW1pdHRlcnMuanMnO1xuXG5pbXBvcnQge3ZhbGlkYXRlX21lc3NhZ2UsXG4gICAgICAgIHZhbGlkYXRlX2NmZl92ZXJzaW9ufSBmcm9tICcuL0Zvcm1WYWxpZGF0b3JzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdGb3JtJyxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIENyZWF0aXZlV29yayxcbiAgICAgICAgSGVscFRleHRcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGFic3RyYWN0OiBTdHJpbmcsXG4gICAgICAgIGF1dGhvcl9pZDogTnVtYmVyLFxuICAgICAgICBhdXRob3JzOiBBcnJheSxcbiAgICAgICAgY2ZmX3ZlcnNpb246IFN0cmluZyxcbiAgICAgICAgZGF0ZV9yZWxlYXNlZDogU3RyaW5nLFxuICAgICAgICBkb2k6IFN0cmluZyxcbiAgICAgICAgaWRlbnRpZmllcl9pZDogTnVtYmVyLFxuICAgICAgICBpZGVudGlmaWVyczogQXJyYXksXG4gICAgICAgIGtleXdvcmRfaWQ6IE51bWJlcixcbiAgICAgICAga2V5d29yZHM6IEFycmF5LFxuICAgICAgICBsaWNlbnNlOiBTdHJpbmcsXG4gICAgICAgIG1lc3NhZ2U6IFN0cmluZyxcbiAgICAgICAgcmVwb3NpdG9yeV9jb2RlOiBTdHJpbmcsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgICAgIHZlcnNpb246IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgbWVzc2FnZV92YWxpZGF0aW9uOiB2YWxpZGF0ZV9tZXNzYWdlLFxuICAgICAgICBjZmZfdmVyc2lvbl92YWxpZGF0aW9uOiB2YWxpZGF0ZV9jZmZfdmVyc2lvblxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRfYWJzdHJhY3QsXG4gICAgICAgIGFkZF9hZmZpbGlhdGlvbixcbiAgICAgICAgYWRkX2F1dGhvcixcbiAgICAgICAgYWRkX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIGFkZF9kb2ksXG4gICAgICAgIGFkZF9pZGVudGlmaWVyLFxuICAgICAgICBhZGRfaWRlbnRpZmllcnMsXG4gICAgICAgIGFkZF9rZXl3b3JkLFxuICAgICAgICBhZGRfa2V5d29yZHMsXG4gICAgICAgIGFkZF9saWNlbnNlLFxuICAgICAgICBhZGRfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxuICAgICAgICBhZGRfb3JjaWQsXG4gICAgICAgIGFkZF9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgIGFkZF90aXRsZSxcbiAgICAgICAgYWRkX3ZlcnNpb24sXG4gICAgICAgIG1vdmVfYXV0aG9yX2Rvd24sXG4gICAgICAgIG1vdmVfYXV0aG9yX3VwLFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX3VwLFxuICAgICAgICBtb3ZlX2tleXdvcmRfZG93bixcbiAgICAgICAgbW92ZV9rZXl3b3JkX3VwLFxuICAgICAgICByZW1vdmVfYWJzdHJhY3QsXG4gICAgICAgIHJlbW92ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgcmVtb3ZlX2F1dGhvcixcbiAgICAgICAgcmVtb3ZlX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIHJlbW92ZV9kb2ksXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVyLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcnMsXG4gICAgICAgIHJlbW92ZV9rZXl3b3JkLFxuICAgICAgICByZW1vdmVfa2V5d29yZHMsXG4gICAgICAgIHJlbW92ZV9saWNlbnNlLFxuICAgICAgICByZW1vdmVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgcmVtb3ZlX25hbWVfc3VmZml4LFxuICAgICAgICByZW1vdmVfb3JjaWQsXG4gICAgICAgIHJlbW92ZV9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgIHJlbW92ZV90aXRsZSxcbiAgICAgICAgcmVtb3ZlX3ZlcnNpb24sXG4gICAgICAgIHVwZGF0ZV9hYnN0cmFjdCxcbiAgICAgICAgdXBkYXRlX2FmZmlsaWF0aW9uLFxuICAgICAgICB1cGRhdGVfY2ZmX3ZlcnNpb24sXG4gICAgICAgIHVwZGF0ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICB1cGRhdGVfZG9pLFxuICAgICAgICB1cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICB1cGRhdGVfZ2l2ZW5fbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3R5cGUsXG4gICAgICAgIHVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlLFxuICAgICAgICB1cGRhdGVfa2V5d29yZCxcbiAgICAgICAgdXBkYXRlX2xpY2Vuc2UsXG4gICAgICAgIHVwZGF0ZV9tZXNzYWdlLFxuICAgICAgICB1cGRhdGVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgdXBkYXRlX25hbWVfc3VmZml4LFxuICAgICAgICB1cGRhdGVfb3JjaWQsXG4gICAgICAgIHVwZGF0ZV9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgIHVwZGF0ZV90aXRsZSxcbiAgICAgICAgdXBkYXRlX3ZlcnNpb25cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAuZm9ybSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNhN2JjYWY7XG4gICAgICAgIGZsZXgtYmFzaXM6IDAuMDtcbiAgICAgICAgZmxleC1ncm93OiAxLjA7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgaGVpZ2h0OiA3NXZoO1xuICAgICAgICBtYXJnaW4tbGVmdDogMSU7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMSU7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgfVxuXG4gICAgLmZvcm0gaW5wdXQge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICBib3JkZXItY29sb3I6ICNhN2JjYWY7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci13aWR0aDogMnB4O1xuICAgICAgICBjb2xvcjogIzAwMDAwMDtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdJbmNvbnNvbGF0YScsIG1vbm9zcGFjZTtcbiAgICAgICAgZm9udC1zaXplOiAxLjByZW07XG4gICAgICAgIG1pbi13aWR0aDogNDAwcHg7XG4gICAgICAgIHBhZGRpbmc6IDZweDtcbiAgICB9XG5cbiAgICAuZm9ybSB0ZXh0YXJlYSB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogI2E3YmNhZjtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnSW5jb25zb2xhdGEnLCBtb25vc3BhY2U7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4wcmVtO1xuICAgICAgICBoZWlnaHQ6IDgwcHg7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIHJlc2l6ZTogdmVydGljYWw7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcbiAgICAgICAgd2lkdGg6IDkwJTtcbiAgICB9XG5cbiAgICAuZm9ybSBpbnB1dDpmb2N1cywgLmZvcm0gdGV4dGFyZWE6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZjkzO1xuICAgIH1cblxuICAgIC5mb3JtIGlucHV0LmVycm9yLCAuZm9ybSB0ZXh0YXJlYS5lcnJvciB7XG4gICAgICAgIGJvcmRlci1jb2xvcjogcmVkO1xuICAgIH1cblxuICAgIHAuY2FwdGlvbiB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnSW5jb25zb2xhdGEnLCBtb25vc3BhY2U7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4wcmVtO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMS4wZW07XG4gICAgfVxuXG4gICAgcC5tZXNzYWdlIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMi41ZW07XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNWVtO1xuICAgIH1cblxuICAgIC5mb3JtIHVsIHtcbiAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIH1cblxuICAgIC5mb3JtIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICAgICAgY29sb3I6ICMyMjIyMjI7XG4gICAgfVxuXG48L3N0eWxlPlxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm1cIiB9LCBbXG4gICAgX2MoXG4gICAgICBcInVsXCIsXG4gICAgICBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIGNmZi12ZXJzaW9uXFxuICAgICAgICAgICAgICAgIFwiKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJIZWxwVGV4dFwiLCB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgdGV4dDpcbiAgICAgICAgICAgICAgICAgIFwiVGhlIGV4YWN0IHZlcnNpb24gb2YgdGhlIENpdGF0aW9uIEZpbGUgRm9ybWF0IHRoYXQgaXMgdXNlZCBmb3IgdGhlIGZpbGUuXCIsXG4gICAgICAgICAgICAgICAgdXJsOlxuICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2l0YXRpb24tZmlsZS1mb3JtYXQvYmxvYi8xLjEuMC9SRUFETUUubWQjY2ZmLXZlcnNpb24tcmVxdWlyZWRcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3M6IHsgZXJyb3I6IF92bS5jZmZfdmVyc2lvbl92YWxpZGF0aW9uLmVycm9yIH0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiBcIjEuMC4zXCIsIHR5cGU6IFwidGV4dFwiIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY2ZmX3ZlcnNpb24gfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0udXBkYXRlX2NmZl92ZXJzaW9uKCRldmVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF92bS5jZmZfdmVyc2lvbl92YWxpZGF0aW9uLmVycm9yXG4gICAgICAgICAgICAgID8gX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwibWVzc2FnZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNmZl92ZXJzaW9uX3ZhbGlkYXRpb24ubXNnKSArXG4gICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJjYXB0aW9uXCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VcXG4gICAgICAgICAgICAgICAgXCIpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcIkhlbHBUZXh0XCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OlxuICAgICAgICAgICAgICAgICAgXCJTcGVjaWZ5IGluc3RydWN0aW9ucyB0byB1c2VycyBvbiBob3cgdG8gY2l0ZSB0aGUgc29mdHdhcmUgdGhlIENJVEFUSU9OLmNmZiBmaWxlIGlzIGFzc29jaWF0ZWQgd2l0aC5cIixcbiAgICAgICAgICAgICAgICB1cmw6XG4gICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jaXRhdGlvbi1maWxlLWZvcm1hdC9ibG9iLzEuMS4wL1JFQURNRS5tZCNtZXNzYWdlLXJlcXVpcmVkXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm1zZ1wiLFxuICAgICAgICAgICAgICBjbGFzczogeyBlcnJvcjogX3ZtLm1lc3NhZ2VfdmFsaWRhdGlvbi5lcnJvciB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm1lc3NhZ2UgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0udXBkYXRlX21lc3NhZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX3ZtLm1lc3NhZ2VfdmFsaWRhdGlvbi5lcnJvclxuICAgICAgICAgICAgICA/IF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcIm1lc3NhZ2VcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgICAgICBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5tZXNzYWdlX3ZhbGlkYXRpb24ubXNnKSArXG4gICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiQ3JlYXRpdmVXb3JrXCIsIHtcbiAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgYWJzdHJhY3Q6IF92bS5hYnN0cmFjdCxcbiAgICAgICAgICAgIGF1dGhvcl9pZDogX3ZtLmF1dGhvcl9pZCxcbiAgICAgICAgICAgIGF1dGhvcnM6IF92bS5hdXRob3JzLFxuICAgICAgICAgICAgZGF0ZV9yZWxlYXNlZDogX3ZtLmRhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICBkb2k6IF92bS5kb2ksXG4gICAgICAgICAgICBpZGVudGlmaWVyX2lkOiBfdm0uaWRlbnRpZmllcl9pZCxcbiAgICAgICAgICAgIGlkZW50aWZpZXJzOiBfdm0uaWRlbnRpZmllcnMsXG4gICAgICAgICAgICBrZXl3b3JkX2lkOiBfdm0ua2V5d29yZF9pZCxcbiAgICAgICAgICAgIGtleXdvcmRzOiBfdm0ua2V5d29yZHMsXG4gICAgICAgICAgICBsaWNlbnNlOiBfdm0ubGljZW5zZSxcbiAgICAgICAgICAgIHJlcG9zaXRvcnlfY29kZTogX3ZtLnJlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgIHRpdGxlOiBfdm0udGl0bGUsXG4gICAgICAgICAgICB2ZXJzaW9uOiBfdm0udmVyc2lvblxuICAgICAgICAgIH0sXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIFwiYWRkLWFic3RyYWN0XCI6IF92bS5hZGRfYWJzdHJhY3QsXG4gICAgICAgICAgICBcImFkZC1hZmZpbGlhdGlvblwiOiBfdm0uYWRkX2FmZmlsaWF0aW9uLFxuICAgICAgICAgICAgXCJhZGQtYXV0aG9yXCI6IF92bS5hZGRfYXV0aG9yLFxuICAgICAgICAgICAgXCJhZGQtZGF0ZS1yZWxlYXNlZFwiOiBfdm0uYWRkX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICBcImFkZC1kb2lcIjogX3ZtLmFkZF9kb2ksXG4gICAgICAgICAgICBcImFkZC1pZGVudGlmaWVyXCI6IF92bS5hZGRfaWRlbnRpZmllcixcbiAgICAgICAgICAgIFwiYWRkLWlkZW50aWZpZXJzXCI6IF92bS5hZGRfaWRlbnRpZmllcnMsXG4gICAgICAgICAgICBcImFkZC1rZXl3b3JkXCI6IF92bS5hZGRfa2V5d29yZCxcbiAgICAgICAgICAgIFwiYWRkLWtleXdvcmRzXCI6IF92bS5hZGRfa2V5d29yZHMsXG4gICAgICAgICAgICBcImFkZC1saWNlbnNlXCI6IF92bS5hZGRfbGljZW5zZSxcbiAgICAgICAgICAgIFwiYWRkLW5hbWUtcGFydGljbGVcIjogX3ZtLmFkZF9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgICAgXCJhZGQtbmFtZS1zdWZmaXhcIjogX3ZtLmFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgICAgIFwiYWRkLW9yY2lkXCI6IF92bS5hZGRfb3JjaWQsXG4gICAgICAgICAgICBcImFkZC1yZXBvc2l0b3J5LWNvZGVcIjogX3ZtLmFkZF9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgICAgICBcImFkZC10aXRsZVwiOiBfdm0uYWRkX3RpdGxlLFxuICAgICAgICAgICAgXCJhZGQtdmVyc2lvblwiOiBfdm0uYWRkX3ZlcnNpb24sXG4gICAgICAgICAgICBcIm1vdmUtYXV0aG9yLWRvd25cIjogX3ZtLm1vdmVfYXV0aG9yX2Rvd24sXG4gICAgICAgICAgICBcIm1vdmUtYXV0aG9yLXVwXCI6IF92bS5tb3ZlX2F1dGhvcl91cCxcbiAgICAgICAgICAgIFwibW92ZS1pZGVudGlmaWVyLWRvd25cIjogX3ZtLm1vdmVfaWRlbnRpZmllcl9kb3duLFxuICAgICAgICAgICAgXCJtb3ZlLWlkZW50aWZpZXItdXBcIjogX3ZtLm1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgICAgIFwibW92ZS1rZXl3b3JkLWRvd25cIjogX3ZtLm1vdmVfa2V5d29yZF9kb3duLFxuICAgICAgICAgICAgXCJtb3ZlLWtleXdvcmQtdXBcIjogX3ZtLm1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgICAgIFwicmVtb3ZlLWFic3RyYWN0XCI6IF92bS5yZW1vdmVfYWJzdHJhY3QsXG4gICAgICAgICAgICBcInJlbW92ZS1hZmZpbGlhdGlvblwiOiBfdm0ucmVtb3ZlX2FmZmlsaWF0aW9uLFxuICAgICAgICAgICAgXCJyZW1vdmUtYXV0aG9yXCI6IF92bS5yZW1vdmVfYXV0aG9yLFxuICAgICAgICAgICAgXCJyZW1vdmUtZGF0ZS1yZWxlYXNlZFwiOiBfdm0ucmVtb3ZlX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICBcInJlbW92ZS1kb2lcIjogX3ZtLnJlbW92ZV9kb2ksXG4gICAgICAgICAgICBcInJlbW92ZS1pZGVudGlmaWVyXCI6IF92bS5yZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgICAgIFwicmVtb3ZlLWlkZW50aWZpZXJzXCI6IF92bS5yZW1vdmVfaWRlbnRpZmllcnMsXG4gICAgICAgICAgICBcInJlbW92ZS1rZXl3b3JkXCI6IF92bS5yZW1vdmVfa2V5d29yZCxcbiAgICAgICAgICAgIFwicmVtb3ZlLWtleXdvcmRzXCI6IF92bS5yZW1vdmVfa2V5d29yZHMsXG4gICAgICAgICAgICBcInJlbW92ZS1saWNlbnNlXCI6IF92bS5yZW1vdmVfbGljZW5zZSxcbiAgICAgICAgICAgIFwicmVtb3ZlLW5hbWUtcGFydGljbGVcIjogX3ZtLnJlbW92ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgICAgXCJyZW1vdmUtbmFtZS1zdWZmaXhcIjogX3ZtLnJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgICAgIFwicmVtb3ZlLW9yY2lkXCI6IF92bS5yZW1vdmVfb3JjaWQsXG4gICAgICAgICAgICBcInJlbW92ZS1yZXBvc2l0b3J5LWNvZGVcIjogX3ZtLnJlbW92ZV9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgICAgICBcInJlbW92ZS10aXRsZVwiOiBfdm0ucmVtb3ZlX3RpdGxlLFxuICAgICAgICAgICAgXCJyZW1vdmUtdmVyc2lvblwiOiBfdm0ucmVtb3ZlX3ZlcnNpb24sXG4gICAgICAgICAgICBcInVwZGF0ZS1hYnN0cmFjdFwiOiBfdm0udXBkYXRlX2Fic3RyYWN0LFxuICAgICAgICAgICAgXCJ1cGRhdGUtYWZmaWxpYXRpb25cIjogX3ZtLnVwZGF0ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgICAgIFwidXBkYXRlLWRhdGUtcmVsZWFzZWRcIjogX3ZtLnVwZGF0ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZG9pXCI6IF92bS51cGRhdGVfZG9pLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZmFtaWx5LW5hbWVzXCI6IF92bS51cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZ2l2ZW4tbmFtZXNcIjogX3ZtLnVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdHlwZVwiOiBfdm0udXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdmFsdWVcIjogX3ZtLnVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlLFxuICAgICAgICAgICAgXCJ1cGRhdGUta2V5d29yZFwiOiBfdm0udXBkYXRlX2tleXdvcmQsXG4gICAgICAgICAgICBcInVwZGF0ZS1saWNlbnNlXCI6IF92bS51cGRhdGVfbGljZW5zZSxcbiAgICAgICAgICAgIFwidXBkYXRlLW5hbWUtcGFydGljbGVcIjogX3ZtLnVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICAgICAgXCJ1cGRhdGUtbmFtZS1zdWZmaXhcIjogX3ZtLnVwZGF0ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgICAgIFwidXBkYXRlLW9yY2lkXCI6IF92bS51cGRhdGVfb3JjaWQsXG4gICAgICAgICAgICBcInVwZGF0ZS1yZXBvc2l0b3J5LWNvZGVcIjogX3ZtLnVwZGF0ZV9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgICAgICBcInVwZGF0ZS10aXRsZVwiOiBfdm0udXBkYXRlX3RpdGxlLFxuICAgICAgICAgICAgXCJ1cGRhdGUtdmVyc2lvblwiOiBfdm0udXBkYXRlX3ZlcnNpb25cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgMVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTVjYjc3MDNkXCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vRm9ybS52dWVcIilcbn1cbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRm9ybS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Zvcm0udnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTVjYjc3MDNkXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Zvcm0udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0Zvcm0udnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTVjYjc3MDNkXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNWNiNzcwM2RcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgaWQ9XCJhcHBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgICAgICAgPGgxPmNmZmluaXQ8L2gxPlxuICAgICAgICAgICAgPGgyPkluaXRpYWxpemUgeW91ciBDSVRBVElPTi5jZmYgZmlsZXM8L2gyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPEZvcm1cbiAgICAgICAgICAgICAgICB2LWJpbmQ6YWJzdHJhY3Q9XCJhYnN0cmFjdFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmF1dGhvcl9pZD1cImF1dGhvcl9pZFwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmF1dGhvcnM9XCJhdXRob3JzXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6Y2ZmX3ZlcnNpb249XCJjZmZfdmVyc2lvblwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmRhdGVfcmVsZWFzZWQ9XCJkYXRlX3JlbGVhc2VkXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6ZG9pPVwiZG9pXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6aWRlbnRpZmllcl9pZD1cImlkZW50aWZpZXJfaWRcIlxuICAgICAgICAgICAgICAgIHYtYmluZDppZGVudGlmaWVycz1cImlkZW50aWZpZXJzXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6a2V5d29yZF9pZD1cImtleXdvcmRfaWRcIlxuICAgICAgICAgICAgICAgIHYtYmluZDprZXl3b3Jkcz1cImtleXdvcmRzXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6bGljZW5zZT1cImxpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIHYtYmluZDptZXNzYWdlPVwibWVzc2FnZVwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOnJlcG9zaXRvcnlfY29kZT1cInJlcG9zaXRvcnlfY29kZVwiXG4gICAgICAgICAgICAgICAgdi1iaW5kOnRpdGxlPVwidGl0bGVcIlxuICAgICAgICAgICAgICAgIHYtYmluZDp2ZXJzaW9uPVwidmVyc2lvblwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtYWJzdHJhY3Q9XCJhZGRfYWJzdHJhY3RcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWFmZmlsaWF0aW9uPVwiYWRkX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1hdXRob3I9XCJhZGRfYXV0aG9yXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1kYXRlLXJlbGVhc2VkPVwiYWRkX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWRvaT1cImFkZF9kb2lcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWlkZW50aWZpZXI9XCJhZGRfaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtaWRlbnRpZmllcnM9XCJhZGRfaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWtleXdvcmQ9XCJhZGRfa2V5d29yZFwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQta2V5d29yZHM9XCJhZGRfa2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLWxpY2Vuc2U9XCJhZGRfbGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtbmFtZS1wYXJ0aWNsZT1cImFkZF9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC1uYW1lLXN1ZmZpeD1cImFkZF9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjphZGQtb3JjaWQ9XCJhZGRfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLXJlcG9zaXRvcnktY29kZT1cImFkZF9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246YWRkLXRpdGxlPVwiYWRkX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOmFkZC12ZXJzaW9uPVwiYWRkX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1hdXRob3ItZG93bj1cIm1vdmVfYXV0aG9yX2Rvd25cIlxuICAgICAgICAgICAgICAgIHYtb246bW92ZS1hdXRob3ItdXA9XCJtb3ZlX2F1dGhvcl91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWlkZW50aWZpZXItZG93bj1cIm1vdmVfaWRlbnRpZmllcl9kb3duXCJcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUtaWRlbnRpZmllci11cD1cIm1vdmVfaWRlbnRpZmllcl91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjptb3ZlLWtleXdvcmQtZG93bj1cIm1vdmVfa2V5d29yZF9kb3duXCJcbiAgICAgICAgICAgICAgICB2LW9uOm1vdmUta2V5d29yZC11cD1cIm1vdmVfa2V5d29yZF91cFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtYWJzdHJhY3Q9XCJyZW1vdmVfYWJzdHJhY3RcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWFmZmlsaWF0aW9uPVwicmVtb3ZlX2FmZmlsaWF0aW9uXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1hdXRob3I9XCJyZW1vdmVfYXV0aG9yXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1kYXRlLXJlbGVhc2VkPVwicmVtb3ZlX2RhdGVfcmVsZWFzZWRcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWRvaT1cInJlbW92ZV9kb2lcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWlkZW50aWZpZXI9XCJyZW1vdmVfaWRlbnRpZmllclwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtaWRlbnRpZmllcnM9XCJyZW1vdmVfaWRlbnRpZmllcnNcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWtleXdvcmQ9XCJyZW1vdmVfa2V5d29yZFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUta2V5d29yZHM9XCJyZW1vdmVfa2V5d29yZHNcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLWxpY2Vuc2U9XCJyZW1vdmVfbGljZW5zZVwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtbmFtZS1wYXJ0aWNsZT1cInJlbW92ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS1uYW1lLXN1ZmZpeD1cInJlbW92ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjpyZW1vdmUtb3JjaWQ9XCJyZW1vdmVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLXJlcG9zaXRvcnktY29kZT1cInJlbW92ZV9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246cmVtb3ZlLXRpdGxlPVwicmVtb3ZlX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnJlbW92ZS12ZXJzaW9uPVwicmVtb3ZlX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWFic3RyYWN0PVwidXBkYXRlX2Fic3RyYWN0XCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1hZmZpbGlhdGlvbj1cInVwZGF0ZV9hZmZpbGlhdGlvblwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtY2ZmLXZlcnNpb249XCJ1cGRhdGVfY2ZmX3ZlcnNpb25cIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWRhdGUtcmVsZWFzZWQ9XCJ1cGRhdGVfZGF0ZV9yZWxlYXNlZFwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtZG9pPVwidXBkYXRlX2RvaVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtZmFtaWx5LW5hbWVzPVwidXBkYXRlX2ZhbWlseV9uYW1lc1wiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtZ2l2ZW4tbmFtZXM9XCJ1cGRhdGVfZ2l2ZW5fbmFtZXNcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWlkZW50aWZpZXItdHlwZT1cInVwZGF0ZV9pZGVudGlmaWVyX3R5cGVcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLWlkZW50aWZpZXItdmFsdWU9XCJ1cGRhdGVfaWRlbnRpZmllcl92YWx1ZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUta2V5d29yZD1cInVwZGF0ZV9rZXl3b3JkXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1saWNlbnNlPVwidXBkYXRlX2xpY2Vuc2VcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLW1lc3NhZ2U9XCJ1cGRhdGVfbWVzc2FnZVwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtbmFtZS1wYXJ0aWNsZT1cInVwZGF0ZV9uYW1lX3BhcnRpY2xlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS1uYW1lLXN1ZmZpeD1cInVwZGF0ZV9uYW1lX3N1ZmZpeFwiXG4gICAgICAgICAgICAgICAgdi1vbjp1cGRhdGUtb3JjaWQ9XCJ1cGRhdGVfb3JjaWRcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLXJlcG9zaXRvcnktY29kZT1cInVwZGF0ZV9yZXBvc2l0b3J5X2NvZGVcIlxuICAgICAgICAgICAgICAgIHYtb246dXBkYXRlLXRpdGxlPVwidXBkYXRlX3RpdGxlXCJcbiAgICAgICAgICAgICAgICB2LW9uOnVwZGF0ZS12ZXJzaW9uPVwidXBkYXRlX3ZlcnNpb25cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDZmZUZXh0IHYtYmluZDpjZmY9XCJjZmZcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJkb3dubG9hZC1idXR0b25cIlxuICAgICAgICAgICAgICAgIHYtb246Y2xpY2s9XCJzYXZlX3RleHRfYXNfZmlsZVwiPlxuICAgICAgICAgICAgICAgIFNhdmUgVGV4dCB0byBGaWxlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJnaXRodWJcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2l0YXRpb24tZmlsZS1mb3JtYXQvY2ZmLWluaXRpYWxpemVyLWphdmFzY3JpcHRcIj5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cImltZy9naXRodWItbWFyay1saWdodC02NHB4LnBuZ1wiXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTBweFwiXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjUwcHhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5pbXBvcnQge2FkZCBhcyBhZGRfYWJzdHJhY3QsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfYWJzdHJhY3QsXG4gICAgICAgIHVwZGF0ZSBhcyB1cGRhdGVfYWJzdHJhY3R9IGZyb20gJy4vQWJzdHJhY3RIYW5kbGVycy5qcyc7XG5cbmltcG9ydCB7YWRkIGFzIGFkZF9hZmZpbGlhdGlvbixcbiAgICAgICAgcmVtb3ZlIGFzIHJlbW92ZV9hZmZpbGlhdGlvbixcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9hZmZpbGlhdGlvbn0gZnJvbSAnLi9BZmZpbGlhdGlvbkhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9uYW1lX3BhcnRpY2xlfSBmcm9tICcuL05hbWVQYXJ0aWNsZUhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGRfYXV0aG9yLFxuICAgICAgICBtb3ZlX2F1dGhvcl9kb3duLFxuICAgICAgICBtb3ZlX2F1dGhvcl91cCxcbiAgICAgICAgcmVtb3ZlX2F1dGhvcn0gZnJvbSAnLi9BdXRob3JzSGFuZGxlcnMuanMnO1xuXG5pbXBvcnQge2FkZF9pZGVudGlmaWVyLFxuICAgICAgICBtb3ZlX2lkZW50aWZpZXJfZG93bixcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX3VwLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWV9IGZyb20gJy4vSWRlbnRpZmllckhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGRfaWRlbnRpZmllcnMsXG4gICAgICAgIHJlbW92ZV9pZGVudGlmaWVyc30gZnJvbSAnLi9JZGVudGlmaWVyc0hhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX2tleXdvcmQsXG4gICAgICAgIG1vdmVfZG93biBhcyBtb3ZlX2tleXdvcmRfZG93bixcbiAgICAgICAgbW92ZV91cCBhcyBtb3ZlX2tleXdvcmRfdXAsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfa2V5d29yZCxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9rZXl3b3JkfSBmcm9tICcuL0tleXdvcmRIYW5kbGVycy5qcyc7XG5cbmltcG9ydCB7YWRkIGFzIGFkZF9rZXl3b3JkcyxcbiAgICAgICAgcmVtb3ZlIGFzIHJlbW92ZV9rZXl3b3Jkc30gZnJvbSAnLi9LZXl3b3Jkc0hhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX2RhdGVfcmVsZWFzZWQsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9kYXRlX3JlbGVhc2VkfSBmcm9tICcuL0RhdGVSZWxlYXNlZEhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX2RvaSxcbiAgICAgICAgcmVtb3ZlIGFzIHJlbW92ZV9kb2ksXG4gICAgICAgIHVwZGF0ZSBhcyB1cGRhdGVfZG9pfSBmcm9tICcuL0RvaUhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX2xpY2Vuc2UsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfbGljZW5zZSxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9saWNlbnNlfSBmcm9tICcuL0xpY2Vuc2VIYW5kbGVycy5qcyc7XG5cbmltcG9ydCB7YWRkIGFzIGFkZF9yZXBvc2l0b3J5X2NvZGUsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICB1cGRhdGUgYXMgdXBkYXRlX3JlcG9zaXRvcnlfY29kZX0gZnJvbSAnLi9SZXBvc2l0b3J5Q29kZUhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHtjb21wdXRlX2NmZn0gZnJvbSAnLi9jb21wdXRlX2NmZi5qcyc7XG5cbmltcG9ydCB7dXBkYXRlX2ZhbWlseV9uYW1lcyxcbiAgICAgICAgdXBkYXRlX2dpdmVuX25hbWVzfSBmcm9tICcuL0F1dGhvckhhbmRsZXIuanMnO1xuXG5pbXBvcnQge2FkZCBhcyBhZGRfb3JjaWQsXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfb3JjaWQsXG4gICAgICAgIHVwZGF0ZSBhcyB1cGRhdGVfb3JjaWR9IGZyb20gJy4vT3JjaWRIYW5kbGVycy5qcyc7XG5cbmltcG9ydCB7YWRkIGFzIGFkZF9uYW1lX3N1ZmZpeCxcbiAgICAgICAgcmVtb3ZlIGFzIHJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV9uYW1lX3N1ZmZpeH0gZnJvbSAnLi9OYW1lU3VmZml4SGFuZGxlcnMuanMnO1xuXG5pbXBvcnQge3VwZGF0ZV9jZmZfdmVyc2lvbixcbiAgICAgICAgdXBkYXRlX21lc3NhZ2V9IGZyb20gJy4vRm9ybUhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHtzYXZlX3RleHRfYXNfZmlsZX0gZnJvbSAnLi9kb3dubG9hZC5qcyc7XG5cbmltcG9ydCB7YWRkIGFzIGFkZF90aXRsZSxcbiAgICAgICAgcmVtb3ZlIGFzIHJlbW92ZV90aXRsZSxcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV90aXRsZX0gZnJvbSAnLi9UaXRsZUhhbmRsZXJzLmpzJztcblxuaW1wb3J0IHthZGQgYXMgYWRkX3ZlcnNpb24sXG4gICAgICAgIHJlbW92ZSBhcyByZW1vdmVfdmVyc2lvbixcbiAgICAgICAgdXBkYXRlIGFzIHVwZGF0ZV92ZXJzaW9ufSBmcm9tICcuL1ZlcnNpb25IYW5kbGVycy5qcyc7XG5cbmltcG9ydCBDZmZUZXh0IGZyb20gJy4vQ2ZmVGV4dC52dWUnO1xuXG5pbXBvcnQgRm9ybSBmcm9tICcuL0Zvcm0udnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdBcHAnLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQ2ZmVGV4dCxcbiAgICAgICAgRm9ybVxuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWJzdHJhY3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGF1dGhvcl9pZDogLTEsXG4gICAgICAgICAgICBhdXRob3JzOiBbXSxcbiAgICAgICAgICAgIGNmZl92ZXJzaW9uOiAnMS4xLjAnLFxuICAgICAgICAgICAgZGF0ZV9yZWxlYXNlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9pOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpZGVudGlmaWVyX2lkOiAtMSxcbiAgICAgICAgICAgIGlkZW50aWZpZXJzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBrZXl3b3JkX2lkOiAtMSxcbiAgICAgICAgICAgIGtleXdvcmRzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsaWNlbnNlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtZXNzYWdlOiAnSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlLCBwbGVhc2UgY2l0ZSBpdCB1c2luZyB0aGVzZSBtZXRhZGF0YS4nLFxuICAgICAgICAgICAgcmVwb3NpdG9yeV9jb2RlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aXRsZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNmZjogY29tcHV0ZV9jZmZcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkX2Fic3RyYWN0LFxuICAgICAgICBhZGRfYWZmaWxpYXRpb24sXG4gICAgICAgIGFkZF9hdXRob3IsXG4gICAgICAgIGFkZF9kYXRlX3JlbGVhc2VkLFxuICAgICAgICBhZGRfZG9pLFxuICAgICAgICBhZGRfaWRlbnRpZmllcixcbiAgICAgICAgYWRkX2lkZW50aWZpZXJzLFxuICAgICAgICBhZGRfa2V5d29yZCxcbiAgICAgICAgYWRkX2tleXdvcmRzLFxuICAgICAgICBhZGRfbmFtZV9wYXJ0aWNsZSxcbiAgICAgICAgYWRkX25hbWVfc3VmZml4LFxuICAgICAgICBhZGRfbGljZW5zZSxcbiAgICAgICAgYWRkX29yY2lkLFxuICAgICAgICBhZGRfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICBhZGRfdGl0bGUsXG4gICAgICAgIGFkZF92ZXJzaW9uLFxuICAgICAgICBtb3ZlX2F1dGhvcl9kb3duLFxuICAgICAgICBtb3ZlX2F1dGhvcl91cCxcbiAgICAgICAgbW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgIG1vdmVfaWRlbnRpZmllcl91cCxcbiAgICAgICAgbW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgIG1vdmVfa2V5d29yZF91cCxcbiAgICAgICAgcmVtb3ZlX2Fic3RyYWN0LFxuICAgICAgICByZW1vdmVfYWZmaWxpYXRpb24sXG4gICAgICAgIHJlbW92ZV9hdXRob3IsXG4gICAgICAgIHJlbW92ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICByZW1vdmVfZG9pLFxuICAgICAgICByZW1vdmVfaWRlbnRpZmllcixcbiAgICAgICAgcmVtb3ZlX2lkZW50aWZpZXJzLFxuICAgICAgICByZW1vdmVfa2V5d29yZCxcbiAgICAgICAgcmVtb3ZlX2tleXdvcmRzLFxuICAgICAgICByZW1vdmVfbGljZW5zZSxcbiAgICAgICAgcmVtb3ZlX25hbWVfcGFydGljbGUsXG4gICAgICAgIHJlbW92ZV9uYW1lX3N1ZmZpeCxcbiAgICAgICAgcmVtb3ZlX29yY2lkLFxuICAgICAgICByZW1vdmVfcmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICByZW1vdmVfdGl0bGUsXG4gICAgICAgIHJlbW92ZV92ZXJzaW9uLFxuICAgICAgICBzYXZlX3RleHRfYXNfZmlsZSxcbiAgICAgICAgdXBkYXRlX2Fic3RyYWN0LFxuICAgICAgICB1cGRhdGVfYWZmaWxpYXRpb24sXG4gICAgICAgIHVwZGF0ZV9mYW1pbHlfbmFtZXMsXG4gICAgICAgIHVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgdXBkYXRlX2lkZW50aWZpZXJfdmFsdWUsXG4gICAgICAgIHVwZGF0ZV9uYW1lX3BhcnRpY2xlLFxuICAgICAgICB1cGRhdGVfbmFtZV9zdWZmaXgsXG4gICAgICAgIHVwZGF0ZV9vcmNpZCxcbiAgICAgICAgdXBkYXRlX2NmZl92ZXJzaW9uLFxuICAgICAgICB1cGRhdGVfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgdXBkYXRlX2RvaSxcbiAgICAgICAgdXBkYXRlX2tleXdvcmQsXG4gICAgICAgIHVwZGF0ZV9saWNlbnNlLFxuICAgICAgICB1cGRhdGVfbWVzc2FnZSxcbiAgICAgICAgdXBkYXRlX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgdXBkYXRlX3RpdGxlLFxuICAgICAgICB1cGRhdGVfdmVyc2lvblxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG48c3R5bGU+XG4gICAgYm9keSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1ZjZkNjQ7XG4gICAgICAgIG1hcmdpbjogMHB4O1xuICAgIH1cbiAgICAuY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgbWFyZ2luLXRvcDogMnZoO1xuICAgICAgICBtaW4td2lkdGg6IDMwMHB4O1xuICAgIH1cblxuICAgIC5oZWFkZXIge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAuaGVhZGVyIGgxIHtcbiAgICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgICBmb250LWZhbWlseTogJ0luY29uc29sYXRhJywgbW9ub3NwYWNlO1xuICAgICAgICB0ZXh0LWFsaWduOmNlbnRlcjtcbiAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxLjByZW07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuMHJlbTtcbiAgICB9XG4gICAgLmhlYWRlciBoMiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdTb3VyY2UgU2FucyBQcm8nLCBzYW5zLXNlcmlmO1xuICAgICAgICB0ZXh0LWFsaWduOmNlbnRlcjtcbiAgICAgICAgY29sb3I6ICNlZWU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuMHJlbTtcbiAgICAgICAgbWFyZ2luLXRvcDogMC4wcmVtO1xuICAgIH1cblxuICAgIC5kb3dubG9hZC1idXR0b24ge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7IC8qIFNhZmFyaSAqL1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWRhYTYxO1xuICAgICAgICBib3JkZXItY29sb3I6ICMyMjI7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7XG4gICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgICAgICAgZm9udC1zaXplOiAxLjByZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICAgIHBhZGRpbmc6IDE1cHggMzJweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG4gICAgfVxuICAgIC5kb3dubG9hZC1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDg3YTRhO1xuICAgICAgICBib3JkZXItY29sb3I6ICNjY2M7XG4gICAgICAgIGNvbG9yOiAjY2NjO1xuICAgIH1cblxuICAgIC5naXRodWIge1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHJpZ2h0OiAxJTtcbiAgICAgICAgYm90dG9tOiAxMHB4O1xuICAgIH1cbjwvc3R5bGU+XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwiYXBwXCIgfSB9LCBbXG4gICAgX3ZtLl9tKDApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcIkZvcm1cIiwge1xuICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBhYnN0cmFjdDogX3ZtLmFic3RyYWN0LFxuICAgICAgICAgICAgYXV0aG9yX2lkOiBfdm0uYXV0aG9yX2lkLFxuICAgICAgICAgICAgYXV0aG9yczogX3ZtLmF1dGhvcnMsXG4gICAgICAgICAgICBjZmZfdmVyc2lvbjogX3ZtLmNmZl92ZXJzaW9uLFxuICAgICAgICAgICAgZGF0ZV9yZWxlYXNlZDogX3ZtLmRhdGVfcmVsZWFzZWQsXG4gICAgICAgICAgICBkb2k6IF92bS5kb2ksXG4gICAgICAgICAgICBpZGVudGlmaWVyX2lkOiBfdm0uaWRlbnRpZmllcl9pZCxcbiAgICAgICAgICAgIGlkZW50aWZpZXJzOiBfdm0uaWRlbnRpZmllcnMsXG4gICAgICAgICAgICBrZXl3b3JkX2lkOiBfdm0ua2V5d29yZF9pZCxcbiAgICAgICAgICAgIGtleXdvcmRzOiBfdm0ua2V5d29yZHMsXG4gICAgICAgICAgICBsaWNlbnNlOiBfdm0ubGljZW5zZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IF92bS5tZXNzYWdlLFxuICAgICAgICAgICAgcmVwb3NpdG9yeV9jb2RlOiBfdm0ucmVwb3NpdG9yeV9jb2RlLFxuICAgICAgICAgICAgdGl0bGU6IF92bS50aXRsZSxcbiAgICAgICAgICAgIHZlcnNpb246IF92bS52ZXJzaW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgXCJhZGQtYWJzdHJhY3RcIjogX3ZtLmFkZF9hYnN0cmFjdCxcbiAgICAgICAgICAgIFwiYWRkLWFmZmlsaWF0aW9uXCI6IF92bS5hZGRfYWZmaWxpYXRpb24sXG4gICAgICAgICAgICBcImFkZC1hdXRob3JcIjogX3ZtLmFkZF9hdXRob3IsXG4gICAgICAgICAgICBcImFkZC1kYXRlLXJlbGVhc2VkXCI6IF92bS5hZGRfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgICAgIFwiYWRkLWRvaVwiOiBfdm0uYWRkX2RvaSxcbiAgICAgICAgICAgIFwiYWRkLWlkZW50aWZpZXJcIjogX3ZtLmFkZF9pZGVudGlmaWVyLFxuICAgICAgICAgICAgXCJhZGQtaWRlbnRpZmllcnNcIjogX3ZtLmFkZF9pZGVudGlmaWVycyxcbiAgICAgICAgICAgIFwiYWRkLWtleXdvcmRcIjogX3ZtLmFkZF9rZXl3b3JkLFxuICAgICAgICAgICAgXCJhZGQta2V5d29yZHNcIjogX3ZtLmFkZF9rZXl3b3JkcyxcbiAgICAgICAgICAgIFwiYWRkLWxpY2Vuc2VcIjogX3ZtLmFkZF9saWNlbnNlLFxuICAgICAgICAgICAgXCJhZGQtbmFtZS1wYXJ0aWNsZVwiOiBfdm0uYWRkX25hbWVfcGFydGljbGUsXG4gICAgICAgICAgICBcImFkZC1uYW1lLXN1ZmZpeFwiOiBfdm0uYWRkX25hbWVfc3VmZml4LFxuICAgICAgICAgICAgXCJhZGQtb3JjaWRcIjogX3ZtLmFkZF9vcmNpZCxcbiAgICAgICAgICAgIFwiYWRkLXJlcG9zaXRvcnktY29kZVwiOiBfdm0uYWRkX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgIFwiYWRkLXRpdGxlXCI6IF92bS5hZGRfdGl0bGUsXG4gICAgICAgICAgICBcImFkZC12ZXJzaW9uXCI6IF92bS5hZGRfdmVyc2lvbixcbiAgICAgICAgICAgIFwibW92ZS1hdXRob3ItZG93blwiOiBfdm0ubW92ZV9hdXRob3JfZG93bixcbiAgICAgICAgICAgIFwibW92ZS1hdXRob3ItdXBcIjogX3ZtLm1vdmVfYXV0aG9yX3VwLFxuICAgICAgICAgICAgXCJtb3ZlLWlkZW50aWZpZXItZG93blwiOiBfdm0ubW92ZV9pZGVudGlmaWVyX2Rvd24sXG4gICAgICAgICAgICBcIm1vdmUtaWRlbnRpZmllci11cFwiOiBfdm0ubW92ZV9pZGVudGlmaWVyX3VwLFxuICAgICAgICAgICAgXCJtb3ZlLWtleXdvcmQtZG93blwiOiBfdm0ubW92ZV9rZXl3b3JkX2Rvd24sXG4gICAgICAgICAgICBcIm1vdmUta2V5d29yZC11cFwiOiBfdm0ubW92ZV9rZXl3b3JkX3VwLFxuICAgICAgICAgICAgXCJyZW1vdmUtYWJzdHJhY3RcIjogX3ZtLnJlbW92ZV9hYnN0cmFjdCxcbiAgICAgICAgICAgIFwicmVtb3ZlLWFmZmlsaWF0aW9uXCI6IF92bS5yZW1vdmVfYWZmaWxpYXRpb24sXG4gICAgICAgICAgICBcInJlbW92ZS1hdXRob3JcIjogX3ZtLnJlbW92ZV9hdXRob3IsXG4gICAgICAgICAgICBcInJlbW92ZS1kYXRlLXJlbGVhc2VkXCI6IF92bS5yZW1vdmVfZGF0ZV9yZWxlYXNlZCxcbiAgICAgICAgICAgIFwicmVtb3ZlLWRvaVwiOiBfdm0ucmVtb3ZlX2RvaSxcbiAgICAgICAgICAgIFwicmVtb3ZlLWlkZW50aWZpZXJcIjogX3ZtLnJlbW92ZV9pZGVudGlmaWVyLFxuICAgICAgICAgICAgXCJyZW1vdmUtaWRlbnRpZmllcnNcIjogX3ZtLnJlbW92ZV9pZGVudGlmaWVycyxcbiAgICAgICAgICAgIFwicmVtb3ZlLWtleXdvcmRcIjogX3ZtLnJlbW92ZV9rZXl3b3JkLFxuICAgICAgICAgICAgXCJyZW1vdmUta2V5d29yZHNcIjogX3ZtLnJlbW92ZV9rZXl3b3JkcyxcbiAgICAgICAgICAgIFwicmVtb3ZlLWxpY2Vuc2VcIjogX3ZtLnJlbW92ZV9saWNlbnNlLFxuICAgICAgICAgICAgXCJyZW1vdmUtbmFtZS1wYXJ0aWNsZVwiOiBfdm0ucmVtb3ZlX25hbWVfcGFydGljbGUsXG4gICAgICAgICAgICBcInJlbW92ZS1uYW1lLXN1ZmZpeFwiOiBfdm0ucmVtb3ZlX25hbWVfc3VmZml4LFxuICAgICAgICAgICAgXCJyZW1vdmUtb3JjaWRcIjogX3ZtLnJlbW92ZV9vcmNpZCxcbiAgICAgICAgICAgIFwicmVtb3ZlLXJlcG9zaXRvcnktY29kZVwiOiBfdm0ucmVtb3ZlX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgIFwicmVtb3ZlLXRpdGxlXCI6IF92bS5yZW1vdmVfdGl0bGUsXG4gICAgICAgICAgICBcInJlbW92ZS12ZXJzaW9uXCI6IF92bS5yZW1vdmVfdmVyc2lvbixcbiAgICAgICAgICAgIFwidXBkYXRlLWFic3RyYWN0XCI6IF92bS51cGRhdGVfYWJzdHJhY3QsXG4gICAgICAgICAgICBcInVwZGF0ZS1hZmZpbGlhdGlvblwiOiBfdm0udXBkYXRlX2FmZmlsaWF0aW9uLFxuICAgICAgICAgICAgXCJ1cGRhdGUtY2ZmLXZlcnNpb25cIjogX3ZtLnVwZGF0ZV9jZmZfdmVyc2lvbixcbiAgICAgICAgICAgIFwidXBkYXRlLWRhdGUtcmVsZWFzZWRcIjogX3ZtLnVwZGF0ZV9kYXRlX3JlbGVhc2VkLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZG9pXCI6IF92bS51cGRhdGVfZG9pLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZmFtaWx5LW5hbWVzXCI6IF92bS51cGRhdGVfZmFtaWx5X25hbWVzLFxuICAgICAgICAgICAgXCJ1cGRhdGUtZ2l2ZW4tbmFtZXNcIjogX3ZtLnVwZGF0ZV9naXZlbl9uYW1lcyxcbiAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdHlwZVwiOiBfdm0udXBkYXRlX2lkZW50aWZpZXJfdHlwZSxcbiAgICAgICAgICAgIFwidXBkYXRlLWlkZW50aWZpZXItdmFsdWVcIjogX3ZtLnVwZGF0ZV9pZGVudGlmaWVyX3ZhbHVlLFxuICAgICAgICAgICAgXCJ1cGRhdGUta2V5d29yZFwiOiBfdm0udXBkYXRlX2tleXdvcmQsXG4gICAgICAgICAgICBcInVwZGF0ZS1saWNlbnNlXCI6IF92bS51cGRhdGVfbGljZW5zZSxcbiAgICAgICAgICAgIFwidXBkYXRlLW1lc3NhZ2VcIjogX3ZtLnVwZGF0ZV9tZXNzYWdlLFxuICAgICAgICAgICAgXCJ1cGRhdGUtbmFtZS1wYXJ0aWNsZVwiOiBfdm0udXBkYXRlX25hbWVfcGFydGljbGUsXG4gICAgICAgICAgICBcInVwZGF0ZS1uYW1lLXN1ZmZpeFwiOiBfdm0udXBkYXRlX25hbWVfc3VmZml4LFxuICAgICAgICAgICAgXCJ1cGRhdGUtb3JjaWRcIjogX3ZtLnVwZGF0ZV9vcmNpZCxcbiAgICAgICAgICAgIFwidXBkYXRlLXJlcG9zaXRvcnktY29kZVwiOiBfdm0udXBkYXRlX3JlcG9zaXRvcnlfY29kZSxcbiAgICAgICAgICAgIFwidXBkYXRlLXRpdGxlXCI6IF92bS51cGRhdGVfdGl0bGUsXG4gICAgICAgICAgICBcInVwZGF0ZS12ZXJzaW9uXCI6IF92bS51cGRhdGVfdmVyc2lvblxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiQ2ZmVGV4dFwiLCB7IGF0dHJzOiB7IGNmZjogX3ZtLmNmZiB9IH0pXG4gICAgICBdLFxuICAgICAgMVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZG93bmxvYWQtYnV0dG9uXCIsXG4gICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zYXZlX3RleHRfYXNfZmlsZSB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBTYXZlIFRleHQgdG8gRmlsZVxcbiAgICAgICAgXCIpXVxuICAgICAgKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLl9tKDEpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRlclwiIH0sIFtcbiAgICAgIF9jKFwiaDFcIiwgW192bS5fdihcImNmZmluaXRcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImgyXCIsIFtfdm0uX3YoXCJJbml0aWFsaXplIHlvdXIgQ0lUQVRJT04uY2ZmIGZpbGVzXCIpXSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImdpdGh1YlwiIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcImFcIixcbiAgICAgICAge1xuICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBocmVmOlxuICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9jaXRhdGlvbi1maWxlLWZvcm1hdC9jZmYtaW5pdGlhbGl6ZXItamF2YXNjcmlwdFwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgc3JjOiBcImltZy9naXRodWItbWFyay1saWdodC02NHB4LnBuZ1wiLFxuICAgICAgICAgICAgICB3aWR0aDogXCI1MHB4XCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCI1MHB4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICApXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTdiYTViZDkwXCIsIHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH0pXG4gIH1cbn0iLCJ2YXIgZGlzcG9zZWQgPSBmYWxzZVxuZnVuY3Rpb24gaW5qZWN0U3R5bGUgKGNvbnRleHQpIHtcbiAgaWYgKGRpc3Bvc2VkKSByZXR1cm5cbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcHAudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTdiYTViZDkwXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0FwcC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbmltcG9ydCBub3JtYWxpemVDb21wb25lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplclwiXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfcmVuZGVyX18sXG4gIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXBwLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi03YmE1YmQ5MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTdiYTViZDkwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnXG5cbm5ldyBWdWUoe1xuICAgIGVsOiAnI2FwcCcsXG4gICAgcmVuZGVyOiBoID0+IGgoQXBwKVxufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n')}]);